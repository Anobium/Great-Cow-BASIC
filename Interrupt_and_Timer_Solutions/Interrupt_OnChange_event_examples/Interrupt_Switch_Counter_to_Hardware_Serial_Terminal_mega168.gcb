'''A demonstration program for GCGB and GCB.
'''--------------------------------------------------------------------------------------------------------------------------------
'''This program demonstrates Interrupt upon the button press on portb.0
'''Each microprocessor will have different commands to setup the Interrupt. Refer to datasheet.
'''When each interrupt event occurs a counter is incremented.
'''Afer each event the counter is shown on the terminal.
'''The demonstration also show the four states a button can be in UP, PRESSED, DOWN and RELEASED.
'''Enjoy
'''@author 	EvanV
'''@licence	GPL
'''@version	1.1a
'''@date   	20.02.2015
'''********************************************************************************

#CHIP mega168,16
#OPTION Explicit

' ----- Define Hardware settings
'Config hardware UART
#DEFINE USART_BLOCKING
#DEFINE USART_BAUD_RATE 9600
#DEFINE USART_DELAY 10 ms

'Required for switch_event method
Dir SwitchIn1 In

' ----- Constants
'Required for switch_event method
#DEFINE BUTTON_UP 0
#DEFINE BUTTON_PRESSED 1
#DEFINE BUTTON_DOWN 2
#DEFINE BUTTON_RELEASED 3
#DEFINE BUTTON_UNKNOWN 4


'Required for switch_event method
#DEFINE SwitchIn1 PORTb.0
#DEFINE check_switch PORTb.0
#DEFINE state_switch On


'----- Variables
Dim CURRENT_STATE, OLD_STATE, BTN As Byte
Dim ButtonPressCount As Byte

ButtonPressCount = 0

'Required for switch_event method
Dim btn_pv



' ----- Main body of program commences here.


'Enable portb.0 as the source of the interrupt. See the datasheet for more information.
'Trigger on change of PB0
PCINT0 = 1
On Interrupt PinChange0  Call ButtonPressed

HSerPrintCRLF 2
HSerPrint "Started"
HSerPrintCRLF


'track button presses - required to manage serial display only
old_state = 0

Do Forever
    'determine the state of the switch
    current_state = switch_event

    'if the current state is not the same as the saved state then print current state
    If current_state <> old_state Then
        HSerPrint current_state
        'save state
        old_state = current_state
    End If
    'if the current state is Released then show the count.
    'count is incremented in the Interrupt routine.
    If current_state = BUTTON_RELEASED Then
        HSerPrint "("
        HSerPrint ButtonPressCount
        HSerPrint ")"
        ' Restore intterupt
        On Interrupt PinChange0  Call ButtonPressed
    End If
    'print only if the button is Pressed. Formatting display only.
    If current_state = BUTTON_PRESSED Then
        HSerPrint ":"
    End If

Loop
End

' ----- Support methods.  Subroutines and Functions
Sub ButtonPressed

    'Check port is depressed/down? If yes, then increment counter
    If check_switch = 1 Then
        ButtonPressCount++
        On Interrupt PinChange0  Ignore
    End If


End Sub




'/****************************************************************************
'  Function:
'    input_event(void)
'
'  Summary:
'    Processes the single button into the states UP, DOWN, PRESSED & RELEASED.
'
'  Description:
'    This function helps write user interface state machines by determining when
'    the button was pressed, released
'
'  Precondition:
'    None
'
'  Parameters:
'    None
'
'  Returns:
'    event_t value of the current button events.
'    Valid responses are BUTTON_UP, BUTTON_DOWN, BUTTON_PRESSED, BUTTON_RELEASED
'
'  Remarks:
'	state_switch inverts the port. If high then use state_switch=off

'	#define SwitchIn1 PORTD.2
'	Dir SwitchIn1 In
'	#define check_switch RD2
'	#define state_switch OFF
'
' ***************************************************************************/

Function switch_event()
    Dim ret As Byte
    Dim btn As Byte

    btn = check_switch = state_switch

    If !btn & !btn_pv Then
        ' button is not pressed now nor was it pressed previously
        ret = BUTTON_UP

    End If
    If btn & !btn_pv Then
        ' button is pressed now but it wasn't previously
        ret = BUTTON_PRESSED

    End If
    If btn & btn_pv  Then
        ' button was pressed previously and is still pressed
        ret = BUTTON_DOWN

    End If
    If !btn & btn_pv    Then
        ' button is not pressed now but it was previously
        ret = BUTTON_RELEASED
    End If

    btn_pv = btn
    switch_event = ret
End Function

' Debounce button, Debounce switch
Function input_switch (  )

    input_switch  = FALSE
    If check_switch = state_switch Then
        ButtonCount = 0
        Do While check_switch = state_switch AND ButtonCount < 4
            Wait 5 ms
            ButtonCount = ButtonCount + 1
        Loop
    End If
    If ButtonCount > 3 Then
        input_switch  = TRUE
        ButtonCount = 0
    End If
End Function
