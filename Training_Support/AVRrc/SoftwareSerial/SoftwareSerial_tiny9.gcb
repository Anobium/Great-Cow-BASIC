'''A demonstration program for GCB
'''---------------------------------------------------------------------------------
'''This program uses the SoftSerial library for serial sending serial communoications.
''' SoftSerial uses ASM routines for minimal overhead.
'''
''' You cannot use Ser1Print unless you have a string of 3 bytes - this is caused by the use of STACKS to cache the Program Counter in RAM.
''' Therefore, you MUST use a table to send the character using Ser1Send ()
'''
'''
'''
'''
'''
'''@author  Evan Venn
'''@licence GPL
'''@version 1.0
'''@date    11/06/2020
'''********************************************************************************

; ----- Configuration
#chip tiny9,  8
#option Explicit

; ----- Include library
#include <softserial.h>

dir portb.0 in
dir portb.2 in
dir portb.3 in


; ----- Config Serial UART :
#define SER1_BAUD 19200    ; baudrate must be defined
#define SER1_DATABITS 8    ; databits optional (default = 8)
#define SER1_STOPBITS 1    ; stopbits optional (default = 1)
#define SER1_INVERT Off    ; inverted polarity optional (default = Off)
; Config I/O ports for transmitting:
#define SER1_TXPORT PORTB  ; I/O port (without .bit) must be defined
#define SER1_TXPIN 1       ; portbit  must be defined


; ----- Variables
    Dim StringLenByte, RecByte  As Byte

; ----- Main body of program commences here.

    Ser1Send 1
    Ser1Send 10   'new line in Terminal
    Ser1Send 13
    Ser1Send 10   'new line in Terminal
    Ser1Send 13
    for RecByte = 1 to 31
     ReadTable Strings, RecByte, STxDataByte
     Ser1Send STxDataByte
    next
    Ser1Send 10   'new line in Terminal
    Ser1Send 13
    Ser1Send 10   'new line in Terminal
    Ser1Send 13


    table Strings
    87,101,108,99,111,109,101,32,116,111,32,71,114,101,97,116,32,67,111,119,32,66,65,83,73,67,32,50,48,50,48
    end table

    dir portb.0 out
    dir portb.2 out
    Do
        pulseout portb.0, 100 ms
        wait 100 ms
        Ser1Send "."
        portb.2 = ! portb.2
    Loop


'Sub to resolve oscillator
#startup Init
Sub Init
      'As Great Cow BASIC does not set the AVR frequency per chipfamily - set here.
      'Unlock the  frequency register where 0xD8 is the correct signature for the AVRrc chips
      CCP = 0xD8            'signature to CCP
      CLKMSR = 0            'use clock 00: Calibrated Internal 8 MHzOscillator
      CCP = 0xD8
      #IFDEF ChipMHz 8
        CLKPSR = 0
      #ENDIF
      #IFDEF ChipMHz 4
        CLKPSR = 1
      #ENDIF
      #IFDEF ChipMHz 2
        CLKPSR = 2
      #ENDIF
      #IFDEF ChipMHz 1
        CLKPSR = 3
      #ENDIF
      #IFDEF ChipMHz 0.5
        CLKPSR = 4
      #ENDIF
      #IFDEF ChipMHz 0.25
        CLKPSR = 5
      #ENDIF
      #IFDEF ChipMHz 0.125
        CLKPSR = 6
      #ENDIF
      #IFDEF ChipMHz 0.0625
        CLKPSR = 7
      #ENDIF
      #IFDEF ChipMHz 0.03125
        CLKPSR = 8
      #ENDIF
End Sub
