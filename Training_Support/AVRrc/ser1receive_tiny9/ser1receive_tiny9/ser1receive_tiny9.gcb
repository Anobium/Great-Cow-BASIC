'''A demonstration program for GCB
'''---------------------------------------------------------------------------------
'''This program uses the SoftSerial library for serial sending and receiving.
''' SoftSerial uses ASM routines for minimal overhead.
''' Ser1Receive stops programm execution until a startbit-impulse is detected.
''' See other samples how to realize timeouts or interrupt-driven receiving.
''':
'''@author  Evan Venn
'''@licence GPL
'''@version 1.0
'''@date    11/06/2020
'''********************************************************************************

; ----- Configuration
#chip tiny9,  1
#option Explicit

; ----- Include library
#include <softserial.h>

; ----- Config Serial UART :
#define SER1_BAUD 600    ; baudrate must be defined
#define SER1_DATABITS 8    ; databits optional (default = 8)
#define SER1_STOPBITS 1    ; stopbits optional (default = 1)
#define SER1_INVERT Off    ; inverted polarity optional (default = Off)
; Config I/O ports for transmitting:
#define SER1_TXPORT PORTB  ; I/O port (without .bit) must be defined
#define SER1_TXPIN 1       ; portbit  must be defined
; Config I/O ports for receiving:

'NOTE:  RX is commented out until we have resolved the LDS/STS issue

'#define SER1_RXPORT PORTB  ; I/O port (without .bit) must be defined
'#define SER1_RXPIN 2       ; portbit  must be defined
'#define SER1_RXNOWAIT Off  ; don't wait for stopbit optional (default = Off)

; ----- Variables
Dim RecByte As Byte
Dim myString as String * 19
  myString = "Please send a byte!"
; ----- Main body of program commences here.

/*
    Repeat 2
        Ser1Send 10   'new line in Terminal
        Ser1Send 13
    end Repeat
    Repeat 20
        Ser1Print myString  'send a text
        Ser1Send myString( 19 )
        Ser1Send 10   'new line in Terminal
        Ser1Send 13
    End Repeat
*/

    dir portb.0 out
    Do
        pulseout portb.0, 100 ms
'        wait 100 ms
        Ser1Send "."
    Loop
'
' Do Forever
'
'  RecByte = Ser1Receive      'receive one byte - wait until detecting startbit
'  Ser1Send  13               'new line in Terminal
'  Ser1Send  10               '
'  Ser1Print "You sent: "  'send a text
'  Ser1Send RecByte           'send the sign representing the byte
'
' Loop


'Sub to resolve oscillator
'#startup Init
Sub Init
      'As Great Cow BASIC does not set the AVR frequency per chipfamily - set here.
      'Unlock the  frequency register where 0xD8 is the correct signature for the AVRrc chips
     ' CCP = 0xD8
      #IFDEF ChipMHz 8
        CLKPSR = 0
      #ENDIF
      #IFDEF ChipMHz 4
        CLKPSR = 1
      #ENDIF
      #IFDEF ChipMHz 2
        CLKPSR = 2
      #ENDIF
      #IFDEF ChipMHz 1
        CLKPSR = 3
      #ENDIF
      #IFDEF ChipMHz 0.5
        CLKPSR = 4
      #ENDIF
      #IFDEF ChipMHz 0.25
        CLKPSR = 5
      #ENDIF
      #IFDEF ChipMHz 0.125
        CLKPSR = 6
      #ENDIF
      #IFDEF ChipMHz 0.0625
        CLKPSR = 7
      #ENDIF
      #IFDEF ChipMHz 0.03125
        CLKPSR = 8
      #ENDIF
End Sub
