'''A demonstration program for GCB
'''---------------------------------------------------------------------------------
''' This program shows logic test in the AVRrc chips - change the constant CURRENTTEST to change the program
'''
'''
'''@author  Evan Venn
'''@licence GPL
'''@version 1.0
'''@date    11/06/2020
'''********************************************************************************

; ----- Configuration
#chip tiny9,  1
'#option Explicit

; ----- Include library
#include <softserial.h>

; ----- Constants

  #DEFINE RedLED PORTB.2
  #DEFINE GreenLED PORTB.1
  #DEFINE YellowLED PORTB.0

  #Define CURRENTTEST 1


; ----- Variables
  'See inline

; ----- Main body of program commences here.

  #IFDEF  CURRENTTEST 1
    'Test 1

    Dir RedLED     out
    Dir YellowLED  out

    Dim LEDMask as Byte    ' Pattern to be displayed
    LEDMask = 0b001        ' Initialise the Patten

    Dim Counter as Byte
    Counter = 0

    Do
        Ser1Print LEDMask
        Ser1Send 58
        Ser1Print Counter
        Ser1Send 13
        Ser1Send 10

        LEDMask = FnLSL(LEDMask, 1) & 0x0F      ' Mask the lower 3 bits
        if LEDMask.3 then LEDMask = 0b001       ' Restart the sequence

        ' Display the Pattern - cannot use Green LED as this is serial line
        YellowLED = !LEDMask.0
        RedLED    = !LEDMask.2

        wait 100 ms
        Counter++
    Loop

  #ENDIF


  #IFDEF  CURRENTTEST 2
    'Test2 -
  #ENDIF


  #IFDEF  CURRENTTEST 3
    'Test3 -
  #ENDIF


End






; ----- Config Serial UART :
#define SER1_BAUD 600      ; baudrate must be defined
#define SER1_DATABITS 8    ; databits optional (default = 8)
#define SER1_STOPBITS 1    ; stopbits optional (default = 1)
#define SER1_INVERT Off    ; inverted polarity optional (default = Off)
; Config I/O ports for transmitting:
#define SER1_TXPORT PORTB  ; I/O port (without .bit) must be defined
#define SER1_TXPIN 1       ; portbit  must be defined
; Config I/O ports for receiving:
#define SER1_RXPORT PORTB  ; I/O port (without .bit) must be defined
#define SER1_RXPIN 2       ; portbit  must be defined
#define SER1_RXNOWAIT Off  ; don't wait for stopbit optional (default = Off)


' ----- Subs


'Sub to resolve oscillator
#startup Init
Sub Init
      'As Great Cow BASIC does not set the AVR frequency per chipfamily - set here.
      'Unlock the  frequency register where 0xD8 is the correct signature for the AVRrc chips
      CCP = 0xD8
      #IFDEF ChipMHz 8
        CLKPSR = 0
      #ENDIF
      #IFDEF ChipMHz 4
        CLKPSR = 1
      #ENDIF
      #IFDEF ChipMHz 2
        CLKPSR = 2
      #ENDIF
      #IFDEF ChipMHz 1
        CLKPSR = 3
      #ENDIF
      #IFDEF ChipMHz 0.5
        CLKPSR = 4
      #ENDIF
      #IFDEF ChipMHz 0.25
        CLKPSR = 5
      #ENDIF
      #IFDEF ChipMHz 0.125
        CLKPSR = 6
      #ENDIF
      #IFDEF ChipMHz 0.0625
        CLKPSR = 7
      #ENDIF
      #IFDEF ChipMHz 0.03125
        CLKPSR = 8
      #ENDIF
End Sub
