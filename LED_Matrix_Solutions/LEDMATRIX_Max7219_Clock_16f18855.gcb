'''A demonstration program for GCGB and GCB.
'''--------------------------------------------------------------------------------------------------------------------------------
'''This program shows a clock on the LED Matrix
'''This is not an accurate clock as this uses the internal clock source. Use an external or better clock source to make a real clock.
''':
'''You must select the correct Pset constant to match your LED Matrix.  See Configuration below.
''':
'''@author  Evan R. Venn
'''@licence GPL
'''@version 1.00
'''@date    27.01.2017
'''********************************************************************************
' ----- Configuration
#CHIP 16f18855,32
#CONFIG MCLRE=On
#INCLUDE <max7219_ledmatrix_driver.h>
#OPTION Explicit

#STARTUP InitPPS, 85
Sub InitPPS
    #IFDEF MAX7219_LEDMatrix_HardwareSPI
        UNLOCKPPS
        '   //RB4->MSSP1:SDI1;
        SSP1DATPPS = 0x0C
        '   //RB5->MSSP1:SDO1;
        RB5PPS = 0x15
        '   //RB3->MSSP1:SCK1;
        RB3PPS = 0x14
        LOCKPPS
    #ENDIF
End Sub



' ----- Constants
'Set SPI pins for the Max7219
#DEFINE Max7219_DI    portb.4
#DEFINE Max7219_DO    portb.5
#DEFINE Max7219_SCK   portb.3
#DEFINE Max7219_CS    portc.3

'Specifics for device configuration
#DEFINE MAX7219_X_Devices 4
' remove and make a comment out if you want to use Software SPI for this device
#DEFINE MAX7219_LEDMatrix_HardwareSPI

'Choose one of the constants below to match the orientation of your LED Matrixes.
'All the LED Matrixes must have the same orientation.
#DEFINE Pset max7219_LEDMatrix_PSet_0
'#define Pset max7219_LEDMatrix_PSet_90
'#define Pset max7219_LEDMatrix_PSet_180
'#define Pset max7219_LEDMatrix_PSet_270


'; ----- Main body of program commences here.


'Start of clock code - this is not highly accurate - get a proper clock source!
Dim mytime As Long
Dim mystring As String * 5
Dim secs, mins, hours As Byte

'start time 16:49
myTime = 900+109

'   Initialise the timer.
'   Firstly tell the compiler to use a 16bit timer for this demonstration
#DEFINE TMR0_16BIT

'     For this timer we need the following:
'       Prescaler
'           1:256
'            HF int Osc, and
'            NOT to sync Timer
'       Post scaler
'           1:2
InitTimer0 Osc, PRE0_256 + TMR0_HFINTOSC ,  POST0_2
'     Start the Timer
StartTimer 0

'Event every 1 sec
SetTimer ( 0 , 0x0bdc  )


Do

    secs = myTime mod 60
    mins = myTime mod 3600 / 60
    mystring=""

    Dim minutepassed As Byte
    minutepassed=0
    Do While minutepassed <> 60
        'wait for the event
        Wait While TMR0IF = 0
        ' Clearing Timer flag will reset event
        TMR0IF = 0
        'Set timer to 1s before the next event occurs.  This as close as you can get to 1s
        SetTimer ( 0 , 0x0bdc )
        minutepassed++


        Max7219_LEDMatrix_ClearBuffer
        If minutepassed.0 = 1 Then
            Pset 0,0, 1
        Else
            Pset 0,0, 0
        End If

        If mins < 10 Then
            myString = "0" + Str(mins)
        Else
            myString = Str(mins)
        End If
        If secs < 10 Then
            myString = myString +":0" + Str(secs)
        Else
            myString = myString +":" + Str(secs)
        End If

        GLCDPrint ( 2, 0, myString )
        Max7219_LEDMatrix_Update

    Loop

    If myTime = 1440 Then mytime = 0
            'end of day
    mytime++
Loop
