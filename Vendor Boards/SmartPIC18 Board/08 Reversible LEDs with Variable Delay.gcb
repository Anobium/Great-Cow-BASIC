'''
'''  This demonstration produces a variable speed rotating LED display that is proportional to the ADC value.
'''  The ADC value and LED rotate speed are inversely proportional to each other.
'''
'''  Rotate the POT counterclockwise to see the LEDs shift faster.
'''
'''  Press the switch to reverse the direction of the LEDs.
'''
'''  The four LSbs of the ADC are mirrored onto the LEDs. Rotate the potentiometer
'''  to change the display.
'''


'''************************************************************************
'''
'''  PIC: 18f26k22
'''  Compiler: GCB
'''  IDE: GCB@SYN
'''
'''  Board: SmartPIC 18 Board
'''  Date: 29.8.17
'''
' ----- Configuration
    'Chip Settings.
    #chip 18f26k22, 16

    '' -------------------LATB-----------------
    '' Bit#:  -7---6---5---4---3---2---1---0---
    '' LED:   -------| X | ----------| X |-----
    ''-----------------------------------------
    ''

    '' ------------------PORTB-----------------
    '' Bit#:  -7---6---5---4---3---2---1---0---
    '' SWITCH:---------------------------| X |-
    ''-----------------------------------------
    ''

    '' ------------------PORTC-----------------
    '' Bit#:  -7---6---5---4---3---2---1---0---
    '' LCD   :-------------------| X |---------
    ''-----------------------------------------
    ''


    #define LEDD1 PORTB.1
    #define LEDD2 PORTB.5
    #define Potentiometer   PORTA.4
    #define LDR             PORTA.4
    #define SwitchIn        PORTB.4
    #define LCDControl      PORTC.2

    Dir     LEDD1         Out
    Dir     LEDD2         Out
    Dir     Potentiometer In   'this is AN17 port
    Dir     LDR           In
    Dir     SwitchIn      In
    Dir     LCDControl    Out

    TRISA = 0x00;
    TRISB = 0x01;                   // RB0:Input (PB)
    TRISC = 0x38;                   // RC3,RC4,RC6:Input (AN16)


    #define DOWN        0
    #define UP          1


    Dim DIRECTION as Byte
    dim mydelay, leds  as byte

    'start from the right to left
    direction = LED_RIGHT

    dir portb out
    leds = 8

    do

        mydelay = ReadAD10( AN17 ) / 4

        ' Factor the ADC reading to delay steps
        mydelay = mydelay / 16

       ' decrement the 4 LSbs of the ADC and delay 20ms for each
        do while ( mydelay <> 0 )
              mydelay--
              wait 20 ms
              if check_switch = true then
                  ' toggle the direction
                  direction = !direction
              end if
        loop

        porta = leds

        'Show state
        if direction = LED_RIGHT then
          HSerPrint ">> "
        Else
          HSerPrint "<< "
        end if

        HSerPrint right(ByteToBin( leds ),4)

        HSerPrintCRLF

        if  direction = LED_RIGHT  then
            'shift to the right by 1

            Rotate leds right simple

            ' when the ROTATE moves the bit to bit 7, restart the pattern
            if leds = 128 then
               leds = 8
            end if

        else
            'Set C off to ensure the carry bit does not impact
            Set C off
            Rotate leds left

            'when the last LED is lit, restart the pattern
            if  leds = 16 then
                leds = 1
            end if
        end if

    loop



  'global variable - if button is held down, we don't want to keep on switching directions
  dim previous_state as bit
  previous_state = SWITCH_UP

  function  check_switch
      'switch is normally open to 5V ...when pressed, RA3 is connected to GND
      if (SWITCH = SWITCH_DOWN) then
          'debounce by delaying and checking if switch is still pressed
          wait 1 ms
          if ( (previous_state =  SWITCH_DOWN) & (SWITCH = SWITCH_DOWN) ) then
              ' don't toggle
              check_switch = false
              exit function
          else
              ' check if still down
              if (SWITCH = SWITCH_DOWN) then
                 previous_state = SWITCH_DOWN
                 ' reverse the LEDs
                 check_switch = true
                 exit function
             else
              'switch not properly held down
              previous_state = SWITCH_UP
              ' don't reverse
              check_switch = false
              exit function
             end if
          end if
      else
         'switch not pressed
          previous_state = SWITCH_UP
          'don't reverse
          check_switch = false
          exit function
      end if

  end Function

