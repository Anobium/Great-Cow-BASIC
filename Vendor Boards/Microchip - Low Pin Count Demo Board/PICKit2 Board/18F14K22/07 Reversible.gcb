'''
'''******************************************************************
'''  Lesson 7 - "Reversible"
'''
'''  This lesson combines all of the previous lessons in using the button to reverse the
'''  direction of rotation when the button is pressed. The speed of rotation is controlled
'''  using the potentiometer.
'''
'''  The program needs to keep track of rotation direction and new code needs to be added
'''  to rotate in the other direction. Lesson 5 rotates right and checks for a '1' in the carry
'''  bit to determine when to restart the sequence. In Lesson 7, the program needs to rotate
'''  both ways and check for a '1' in bit 4 of the display when rotating to the left. When the
'''  '1' shows up in bit 4 of LATC, it will be re-inserted into bit  0 .
'''
'''  The debounce routine is more in-depth in this lesson because we need to keep in mind
'''  of the scenario of the switch being held down for long periods of time. If SW1 is held
'''  down, the LEDs would change direction rapidly, making the display look like it is out of
'''  control. The above flowchart will only change direction on the first indication of a solid
'''  press and then ignore the switch until it is released and pushed again. The switch must
'''  be pressed for at least the time it takes for the program to check the switch in its loop.
'''  Since the PIC MCU is running at 500 kHz, this will seem instantaneous.
'''
'''  LEDs will rotate at a speed that is proportional to the ADC value. The switch will toggle
'''  the direction of the LEDs
'''
'''  PIC: 18F14K22,8
'''  Compiler: GCB
'''  IDE: GCB@SYN
'''
'''  Board: PICkit 2 Low Pin Count Demo Board
'''  Date: 04/05/18
'''
''''''******************************************************************
''' See Low Pin Count Demo Board User's Guide for Lesson Information*
''''''*****************************************************************
'''


 #Chip 18F14K22, 8
 #option explicit
 #config MCLRE_OFF

    #define SWITCH_DOWN         0
    #define SWITCH_UP           1

    #define LED_RIGHT           TRUE
    #define LED_LEFT            FAlSE

    #define SWITCH      PORTA.3

    dim myDelay as byte
    Dim DIRECTION as Byte

    'start from the right to left
    direction = LED_RIGHT

    'Set LEDs DIRection as out
    dir portc.0 out
    dir portc.1 out
    dir portc.2 out
    dir portc.3 out
    dir portc.4 out

    'Set the whole port, all 8 bits to OFF-OFF-OFF-OFF-ON-OFF-OFF-OFF
    'This will turn one specific LED on. Our startings LEDs
    portc = 0b00001000

    'Potentiamtor is connected to RA4...set as input
    dir porta.0 in

    'setup switch (SW1)
    dir porta.3 in

    dim maxADCReading, myDelay as Word
    maxADCReading = 0

    do
        'Read the ADC  and store the result in the variable
        myDelay = ReadAD10 ( AN0 , true )

        'Store the maximum value of the ADC in the variable.  We are showing this to ensure the ADC has a dynamic range.
        if myDelay > maxADCReading Then
            maxADCReading = myDelay
        end if

        'Scale the variable to from 1 to 20 - gives a delay of 20ms to 400 ms
        myDelay =  scale ( myDelay,  1, maxADCReading, 0, 20 )


       ' decrement the 8 MSbs of the ADC and delay 20ms for each
        do while ( myDelay <> 0 )
              myDelay--
              wait 20 ms
        loop

        if check_switch = true then
            ' toggle the direction
            direction = !direction
        end if
        if  direction = LED_RIGHT  then
            'shift to the right by 1
            Set C off
            Rotate portc right

            ' when the last LED is lit, restart the pattern
            if C = 1 then
               portc.3 = 1
            end if

        else
            'shift to the left by 1
            Set C off
            Rotate portc left

            'when the last LED is lit, restart the pattern
            if  portC.4 = 1 then
                  portC.0 = 1
                  portC.4 = 0
            end if
        end if

    loop



    'global variable - if button is held down, we don't want to keep on switching directions
    dim previous_state as bit
    previous_state = SWITCH_UP

    function  check_switch

        'switch is normally open to 5V ...when pressed, RA3 is connected to GND
        if (SWITCH = SWITCH_DOWN) then
            'debounce by delaying and checking if switch is still pressed
            wait 5 ms
            if ( (previous_state =  SWITCH_DOWN) & (SWITCH = SWITCH_DOWN) ) then
                ' don't toggle
                check_switch = false
                exit function
            else
                ' check if still down
                if (SWITCH = SWITCH_DOWN) then
                   previous_state = SWITCH_DOWN
                   ' reverse the LEDs
                   check_switch = true
                   exit function
               else
                'switch not properly held down
                previous_state = SWITCH_UP
                ' don't reverse
                check_switch = false
                exit function
               end if
            end if
        else
           'switch not pressed
            previous_state = SWITCH_UP
            'don't reverse
            check_switch = false
            exit function
        end if

    end Function
