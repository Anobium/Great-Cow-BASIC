'''
'''******************************************************************
''' LCD demonstration for the board. We have added the LCD section to specific the ports.
''' All the LCD commands are standard Great Cow BASIC LCD commands.
'''
''' See the section "Setup LCD Parameters" for the specification of the LCD commands.
'''
'''************************************************************************
    'Chip Settings.
    #chip 16F19156, 32
    #config LVP=on
    #option Explicit

    'Generated by PIC PPS Tool for Great Cow Basic
    'PPS Tool version: 0.0.5.11
    'PinManager data: v1.55
    '
    'Template comment at the start of the config file
    '
    #startup InitPPS, 85

    Sub InitPPS

            'Module: MSSP1
            RC3PPS = 0x0013    'SCL1 > RC3
            SSP1CLKPPS = 0x0013    'RC3 > SCL1 (bi-directional)
            RC4PPS = 0x0014    'SDA1 > RC4
            SSP1DATPPS = 0x0014    'RC4 > SDA1 (bi-directional)
            'Module: EUSART1
            RC6PPS = 0x000D    'TX1 > RC6
            TX1PPS = 0x0016    'RC6 > TX1 (bi-directional)

    End Sub
    'Template comment at the end of the config file


    '' -------------------PORTA----------------
    '' Bit#:  -7---6---5---4---3---2---1---0---
    '' IO:    ---|RS |RW | E |D7 |D6 |D5 |D4
    ''-----------------------------------------
    ''

    '' -------------------PORTB----------------
    '' Bit#:  -7---6---5---4---3---2---1---0---
    '' IO:    -------| O | A |-------| O | I |-
    ''-----------------------------------------
    ''

    '' ------------------PORTC-----------------
    '' Bit#:  -7---6---5---4---3---2---1---0---
    '' IO:    ---| TX| A |-I---I---------------
    ''-----------------------------------------
    ''


    #define LEDD1 PORTB.1
    #define LEDD2 PORTB.5
    #define SwitchIn        PORTB.0

    Dir     LEDD1         Out
    Dir     LEDD2         Out
    Dir     SwitchIn      In

        ' Define I2C settings
    #define HI2C_BAUD_RATE 100
    #define HI2C_DATA PORTC.4
    #define HI2C_CLOCK PORTC.3

    HI2CMode Master

    'Initialise I2C - For the MSSP module the ports need to be set to Input
    Dir HI2C_DATA in
    Dir HI2C_CLOCK in

    '''Set up LCD
    #define LCD_IO 10
    #define LCD_I2C_Address_1 0x4E

    'You may need to use SLOW or MEDIUM if your LCD is a slower device.
    #define LCD_SPEED slow
    'You may need to invert these states. Dependent of LCD I2C adapter.
    #define LCD_Backlight_On_State  1
    #define LCD_Backlight_Off_State 0

    '*****************************************************************************************************
    'Main program commences here.. everything before this is setup for the board.
    dim tm_year, tm_mon, tm_wday, tm_mday, tm_hour, tm_min, tm_sec as byte
    RTCC_Initialize()

    CLS

    do
       locate 0,0
       Print "Time"
       If RTCC_TimeGet() = true Then
          locate 0, 15
          Print "*"
          Print tm_hour
          Print tm_min
       Else
          locate 0, 15
          Print "!"
       end if
       wait 500 ms
    loop




sub RTCC_Initialize()
    dim  RTCCTimeInitialized  as Bit
    RTCCTimeInitialized  = false
    #define write_RTCWREN RTCCON.RTCWREN = 1
    #define clear_RTCWREN RTCCON.RTCWREN = 0




    'In order to be able to write the Write Enable(WREN) bit for RTCC you neet to enable EEPROM writing
    'it is strongly recommended to disable interrupts during this code segment
    Intoff
    'Set the RTCWREN bit
    write_RTCWREN
    RTCCON.RTCEN = 0

    if ( RTCCTimeInitialized = false ) then

        'set RTCC time 2017-10-28 12-13-22
        YEAR     = 0x17      'year
        MONTH    = 0x10      ' month
        WEEKDAY  = 0x06      ' weekday
        DAY      = 0x28      ' day
        HOURS    = 0x12      ' hours
        MINUTES  = 0x13      ' minutes
        SECONDS  = 0x22      ' seconds
        rtccTimeInitialized = true

    end if
    'calibration register
    RTCCAL = 0x00

    'Enable RTCC, clear RTCWREN
    RTCCON.RTCEN = 1
    clear_RTCWREN

end sub



' This function implements RTCC_TimeGet. It access the
' registers of  RTCC and writes to them the values provided
' in a time structure.

function RTCC_TimeGet () as bit


    if (RTCCON.RTCSYNC) then
        RTCC_TimeGet =  false
        exit function
    end if

    'Set the RTCWREN bit
    write_RTCWREN

    'get year

    tm_year    = ConcatInt(20, GetDecimalValue(YEAR))
    'get month
    tm_mon     = GetDecimalValue(MONTH)
    ' get weekday
    tm_wday    = GetDecimalValue(WEEKDAY)
    'get day
    tm_mday    = GetDecimalValue(DAY)
    'get hour
    tm_hour    = GetDecimalValue(HOURS)
    'get minutes
    tm_min     = GetDecimalValue(MINUTES)
    'get seconds
    tm_sec     = GetDecimalValue(SECONDS)

    clear_RTCWREN

    RTCC_TimeGet = true

end function
'
'void RTCC_TimeSet(struct tm *initialTime)
'{
'
'    write_RTCWREN
'    RTCCONbits.RTCEN = 0;
'
'    'set year
'    YEAR = GetHexValue(initialTime->tm_year)
'    'set month
'    MONTH = GetHexValue(initialTime->tm_mon)
'    'set weekday
'    WEEKDAY = GetHexValue(initialTime->tm_wday)
'    'set day
'    DAY = GetHexValue(initialTime->tm_mday)
'    'set hours
'    HOURS = GetHexValue(initialTime->tm_hour)
'    'set minutes
'    MINUTES = GetHexValue(initialTime->tm_min)
'    'set seconds
'    SECONDS = GetHexValue(initialTime->tm_sec)
'
'    RTCCONbits.RTCEN = 1;
'    clear_RTCWREN
'
'}
'
'bool RTCC_AlarmTimeGet(struct tm *alarmTime)
'{
'   if(RTCCONbits.RTCSYNC) return false;
'
'    'Set the RTCWREN bit
'    write_RTCWREN
'
'    'get month
'    alarmTime->tm_mon     = GetDecimalValue(ALRMMTH)
'    'get weekday
'    alarmTime->tm_wday    = GetDecimalValue(ALRMWD)
'    'get day
'    alarmTime->tm_mday    =  GetDecimalValue(ALRMDAY);
'    'get hour
'    alarmTime->tm_hour    = GetDecimalValue(ALRMHR)
'    'get minutes
'    alarmTime->tm_min     = GetDecimalValue(ALRMMIN)
'    'get seconds
'    alarmTime->tm_sec     = GetDecimalValue(ALRMSEC)
'
'    clear_RTCWREN
'  return true;
'}
'
'void RTCC_AlarmTimeSet(struct tm *alarmTime)
'{
'    ALRMCONbits.ALRMEN = 0;
'
'    'set month
'    ALRMMTH = GetHexValue(alarmTime->tm_mon)
'    'set weekday
'    ALRMWD = GetHexValue(alarmTime->tm_wday)
'    'set day
'    ALRMDAY = GetHexValue(alarmTime->tm_mday)
'    'set hours
'    ALRMHR = GetHexValue(alarmTime->tm_hour)
'    'set minutes
'    ALRMMIN = GetHexValue(alarmTime->tm_min)
'    'set seconds
'    ALRMSEC = GetHexValue(alarmTime->tm_sec)
'
'    ALRMCONbits.ALRMEN = 1;
'}
'
'/**
' This function implements RTCC_TimeReset.This function is used to
' used by application to reset the RTCC value and reinitialize RTCC value.
'*/
'void RTCC_TimeReset()
'{
'    rtccTimeInitialized = false;
'}
'
'/**
'  This function returns the value of the rtccTimeInitialized vaiable.
'*/
'static bool RTCCTimeInitialized(void)
'{
'    return(rtccTimeInitialized)
'}
'
'uint8_t ConvertHexToBCD(uint8_t hexvalue)
'{
'    uint8_t bcdvalue;
'    bcdvalue = (uint8_t)((hexvalue / 10) << 4)
'    bcdvalue = (uint8_t)(bcdvalue | (hexvalue % 10))
'    return bcdvalue;
'}
'
'uint8_t ConvertBCDToHex(uint8_t bcdvalue)
'{
'    uint8_t hexvalue;
'    hexvalue = (uint8_t)((((bcdvalue & 0xF0) >> 4)* 10) + (bcdvalue & 0x0F))
'    return hexvalue;
'}
'
'time_t ConvertDateTimeToUnixTime(struct tm *tmTime)
'{
'    return mktime(tmTime)
'}
'
'struct tm *ConvertUnixTimeToDateTime(time_t *unixTime)
'{
'    return gmtime(unixTime)
'}
'
function GetDecimalValue ( in hex_value)
GetDecimalValue = hex_value
'    prefix_value = (uint8_t)(((hex_value & 0xf0) >> 4))
'    sufix_value  = (uint8_t)(hex_value & 0x0f)
'    int1 = ConvertHexToBCD(prefix_value)
'    int2 = ConvertHexToBCD(sufix_value)
'
'    GetDecimalValue = (ConcatInt(int1, int2 ))

end function
'
'uint8_t GetHexValue(int value)
'{
'    uint8_t low     = ConvertBCDToHex(GetLastDigit(value))
'    uint8_t high    = ConvertBCDToHex(GetLastDigit(value/10))
'
'    return ((uint8_t)(((high & 0x0f) << 4) | low))
'}
'
function ConcatInt( uint1, uint2)

    dim ConcatInt_temp as byte
    ConcatInt_temp = 1

    if (uint2 = 0) then

        if ( uint1 =  20)  then 'if the result is about the year

            ConcatInt_temp = 100

        else

          ConcatInt_temp = 10
        end if
    end if

    while (ConcatInt_temp <= uint2)
        ConcatInt_temp = ConcatInt_temp * 10
    loop

     ConcatInt = ( uint1*ConcatInt_temp ) + uint2
end function

'uint8_t GetLastDigit(int int_value)
'{
'    uint8_t result  =  (uint8_t)(int_value % 10)
'    int_value      /= 10;
'
'    return result;
'}
'
'bool RTCC_Task(void)
'{
'    bool status;
'    status = PIR8bits.RTCCIF;
'    if( PIR8bits.RTCCIF)
'    {
'       PIR8bits.RTCCIF = 0;
'    }
'    return status;
'}
'
'/**
' End of File
'*/
'
'
'
'
'
'
'
'
'
'
'
'
'
'
'
