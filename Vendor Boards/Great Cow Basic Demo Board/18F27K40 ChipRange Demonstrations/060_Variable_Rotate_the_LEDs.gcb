'''
''' This shows how to read the ADC converter and display the
''' a proportional delay value by changing/inverting the LEDs state.
''' The pot on the board varies the voltage coming in from the ADC.
'''
''' The ADC is referenced to the same Vdd as the device, which
''' is nominally is 5V.  The ADC returns the ratio of the voltage
''' on Pin RA0 to 5V.  The ADC has a resolution of 10 bits, with 1023
''' representing 5V and 0 representing 0V.
'''
''' Adjust the LDR or rotate the pot to change the LEDs state displayed.
'''
'''
'''Great Cow  BASIC Header block
'''
'''@author  Evan R. Venn
'''@licence GPL
'''@version 1.00
'''@date    03/05/2018
'''****
' ----- Configuration
    'Chip Settings.
    #chip 18F27K40, 32
    #option Explicit

    '' -------------------PORTA----------------
    '' Bit#:  -7---6---5---4---3---2---1---0---
    '' IO:    -----------------------| A |-----
    ''-----------------------------------------
    ''

    '' -------------------PORTB----------------
    '' Bit#:  -7---6---5---4---3---2---1---0---
    '' IO:    ---------------| O | O | O | O |-
    ''-----------------------------------------
    ''

    '' ------------------PORTC-----------------
    '' Bit#:  -7---6---5---4---3---2---1---0---
    '' IO:    ---------------------------------
    ''-----------------------------------------
    ''

    'Define constants to make things easier. We can reuse these at any time.
    #define LEDPORT PORTB
    #define LEDD1   LEDPORT.0
    #define LEDD2   LEDPORT.1
    #define LEDD3   LEDPORT.2
    #define LEDD4   LEDPORT.3


    Dir     LEDD1         Out
    Dir     LEDD2         Out
    Dir     LEDD3         Out
    Dir     LEDD4         Out

    'Define the potentiometer port
    #define ADCPort       PORTA.1
    Dir     ADCPort       In

    '*****************************************************************************************************
    'Main program commences here.. everything before this is setup for the board.

   'Set the LED states
    LEDD1 = 0
    LEDD2 = 0
    LEDD3 = 0
    LEDD4 = 1


    dim ADCVal, MaxADCVal, ADCWait as word   'we have change to a larger variable to hold the range of 0 to 1023

    Dim     LEDState as Byte
    'We are only interested in the lower four bits, so, use a mask to extract the state of these bits.
    LEDState = LEDPORT AND 0B00001111

    MaxADCVal = 0

    do

        'Read the ADC for the cuttent value
        ADCVal =  ReadAD10 ( ANA1, TRUE )

        'Ensure the ADC value supports the widest range.
        'Use the MaxADCVal as the top range measure then scale from 0 to the MaxADCVal
        'You will have to swing the potentiometer through the complete range, but, do this once and you have a full range!
        if ( ADCVal > MaxADCVal ) Then
            MaxADCVal = ADCVal
        end if

        'Adapt the ADCVal to be representative delay between 20ms and 400ms
        ADCWait = scale ( ADCVal, 0 , MaxADCVal, 2, 400 )

        'Wait for the number of milliseconds
        Wait ADCWait ms

        'Rotate the LEDs.  We are only interested in the four LEDs so we mask the other bits.
        'Clear the C register bit, rotate the LEDState variable, check if the C register bit is set and set the LEDState variable.
        Set C off                 ' Clear the carry flag
        Rotate LEDState right        ' and shift the contents of LEDState
        ' If the Carry is equal to 1 then the sequence has completed, then set the initial state again, the same operation as the starting LED.
        If C = 1 then
           'Set the initial LED states
            LEDD1 = 0
            LEDD2 = 0
            LEDD3 = 0
            LEDD4 = 1
            LEDState = LEDPORT AND 0B00001111
        else
            'Set the port
            LEDPORT = LEDState
        end if


    loop
