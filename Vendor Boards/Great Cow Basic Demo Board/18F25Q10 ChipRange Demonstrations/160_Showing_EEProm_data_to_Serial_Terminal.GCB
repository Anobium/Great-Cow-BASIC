'''
'''******************************************************************
''' Lesson "EEPROM"
'''
''' This lesson will provide code for writing and reading a single byte onto
''' the on-board EEPROM. EEPROM is non-volatile memory, meaning that it does
''' not lose its value when power is shut off. This is unlike RAM, which will
''' lose its value when no power is applied. The EEPROM is useful for storing
''' variables that must still be present during no power.
''' It is also convenient to use if the entire RAM space is used up.
''' Writes and reads to the EEPROM are practically instant and are much faster
''' than program memory operations.

''' This will show the value of the EEPROM on the serial Terminal.
''' You can experiment by changing the variable 'Outdata' from Random function to a specific range.  Enjoy.
'''
'''
'''Great Cow  BASIC Header block
'''
'''@author  Evan R. Venn
'''@licence GPL
'''@version 1.00
'''@date    27/10/2018
'''****
' ----- Configuration
    'Chip Settings.
    #chip 18F25Q10, 32
    #option Explicit

    'Generated by PIC PPS Tool for Great Cow Basic
    'PPS Tool version: 0.0.5.22
    'PinManager data: Not available (3)
    'Generated for 18F25Q10
    '
    'Template comment at the start of the config file
    '
    #startup InitPPS, 85
    #define PPSToolPart 18F25Q10

    Sub InitPPS

            'Module: EUSART1
            RC6PPS = 0x0009    'TX1 > RC6

    End Sub
    'Template comment at the end of the config file


    'Setup Serial port
    #define USART_BAUD_RATE 19200
    #define USART_TX_BLOCKING


    '' -------------------PORTA----------------
    '' Bit#:  -7---6---5---4---3---2---1---0---
    '' IO:    ---|RS |RW | E |D7 |D6 |D5 |D4
    ''-----------------------------------------
    ''

    '' -------------------PORTB----------------
    '' Bit#:  -7---6---5---4---3---2---1---0---
    '' IO:    -------| O | A |-------| O | I |-
    ''-----------------------------------------
    ''

    '' ------------------PORTC-----------------
    '' Bit#:  -7---6---5---4---3---2---1---0---
    '' IO:    ---| TX| A |-I---I---------------
    ''-----------------------------------------
    ''


    #define LEDD1 PORTB.1
    #define LEDD2 PORTB.5
    #define SwitchIn        PORTB.0

    Dir     LEDD1         Out
    Dir     LEDD2         Out
    Dir     SwitchIn      In

    '*****************************************************************************************************
    'Main program commences here.. everything before this is setup for the board.

    ' Now assumes Serial Terminal is operational
    dim EEPromAddress, DisplayNewLine, Outdata, Indata as byte

    Do Forever

          HSerPrintCRLF
          HSerPrint "EEPROM Test and Show EEProm Results"
          HSerPrintCRLF 2


          Set LEDD1 off
          Set LEDD2 off


          HSerPrint "     "
          for EEPromAddress = 0 to 15
            HSerPrint hex(EEPromAddress)
            HSerPrint " "
          next

          for EEPromAddress = 0 to 255
            DisplayNewLine = EEPromAddress % 16
            if DisplayNewLine = 0 Then
              HSerPrintCRLF
              HserPrint hex(EEPromAddress)
              HSerPrint ": "
            end if
            HSerPrint " "

            Outdata = EEPromAddress
            'Outdata = EEPromAddress
            EPWrite ( EEPromAddress, Outdata )
            EPRead  ( EEPromAddress, Indata )

            if Outdata = Indata then
              HSerPrint  hex(Indata)
            Else
              HSerPrint  "!!"
            end if

          next

          HSerPrintCRLF 2
          HSerPrint   "End of EEProm Program and Display"
          HSerPrintCRLF 2
          Set LEDD2 on
          Set LEDD1 on

          wait while SwitchIn = On
    Loop
    END
