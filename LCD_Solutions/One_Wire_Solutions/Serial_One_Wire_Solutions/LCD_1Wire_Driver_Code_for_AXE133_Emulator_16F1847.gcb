'''A demonstration program for GCGB and GCB.
'''--------------------------------------------------------------------------------------------------------------------------------
'''This is the driver for the LCD. This program is a Great Cow Basic implementation of the Picaxe AXE133 Serial LCD/OLED driver.
'''    See www.picaxe.com for details of the AXE133 and the Open Source code this is based upon.
'''     Supported Commands, see LCD Wire Usage.txt
'''     0-252 normal ASCII characters
'''     253, X  display 16 character pre-saved message from EEPROM memory, X can be 0-15
'''     254, X  LCD command, X can be 0 to 255
'''     255, X  control outputs A.3, A.2, A.1, A.0 (via lower 4 bits of X)
'''     So, if using a backlit LCD with the active low transistor driver
'''     on output A.2, then 255,%000 switches backlight on and 255,%100 switches off
'''@author  EvanV
'''@licence GPL
'''@version 1.0a
'''@date    14.02.2015
'''********************************************************************************

' ----- Configuration

#CHIP 16F1847, 32
#OPTION Explicit

' ----- Define Hardware settings
'LCD connection settings
#DEFINE LCD_IO 4
#DEFINE LCD_NO_RW
#DEFINE LCD_DB4 portB.4
#DEFINE LCD_DB5 portB.5
#DEFINE LCD_DB6 portB.6
#DEFINE LCD_DB7 portB.7
#DEFINE LCD_RS portA.7
#DEFINE LCD_Enable portA.6

' turn on the RS232 and terminal port.
' Define the USART port
#DEFINE USART_BAUD_RATE 9600
#DEFINE USART_BLOCKING
#DEFINE SerInPort PORTB.1
'Set pin directions
Dir SerInPort In

Dir spare0 Out
Dir spare1 Out
Dir spare2 Out
Dir spare3 Out

' ----- Constants
' spare output 0
#DEFINE spare0  = PORTA.0
' spare output 1
#DEFINE spare1  = PORTA.1
' spare output 2 (or optional backlight)
#DEFINE spare2  = PORTA.2
' spare output 3
#DEFINE spare3  = PORTA.3


'----- Variables
Dim B1, B2, XLOOP, LOCATION, ENDLOCATION, EEPROM_PTR, INASCVAL As Byte


' ----- Main body of program commences here.
Set spare0 Off
Set spare1 Off
Set spare2 Off
Set spare3 Off

' change to 20 for displays with 20 character lines
#DEFINE line_length = 16
' store msg in the EEPROM memory
EEPROM 0 ,   "   16f1847 v5   "
' store msg in the EEPROM memory
EEPROM 0x10, "Anobium    @9600"
' store msg in the EEPROM memory
EEPROM 0x20, "Up              "
' store msg in the EEPROM memory
EEPROM 0x30, "Pressed         "
' store msg in the EEPROM memory
EEPROM 0x40, "Down            "
' store msg in the EEPROM memory
EEPROM 0x50, "Released        "
' store msg in the EEPROM memory
EEPROM 0x60, "Button 1 is     "
' store msg in the EEPROM memory
EEPROM 0x70, "Time :          "
' store msg in the EEPROM memory
EEPROM 0x80, "Button 2 is     "
' store msg in the EEPROM memory
EEPROM 0x90, "Used :          "
' store msg in the EEPROM memory
EEPROM 0xA0, "Meter:          "
' store msg in the EEPROM memory
EEPROM 0xB0, "Date :          "
' store msg in the EEPROM memory
EEPROM 0xC0, "Pic Restarts:   "
' store msg in the EEPROM memory
EEPROM 0xD0, "Since:          "
' store msg in the EEPROM memory
EEPROM 0xE0, "Set Clock?      "
' store msg in the EEPROM memory
EEPROM 0xF0, "Set Date?       "


Locate 0,0
msg 0
Locate 1,0
msg 1
Locate 0,0

main:
Set LCD_RS On
HSerReceive b1

' NB keep character mode test as first item in this list to optimise speeD
Select Case b1
Case  < 253
    LCDNormalWriteByte b1
    ' quickly loop back to top
    Goto main
Case 254

    HSerReceive b2
    Set LCD_RS Off
    LCDNormalWriteByte b2
    Set LCD_RS On
    Goto main
Case 253
    HSerReceive b2
    ' do the 16 character message
    msg b2
    ' back to top
    Goto main
Case Else
    ' must be 255
    ' wait for the next byte
    
    HSerReceive b2
    Set PortA = ( b2 & 0b00011111 ) | 0b10000000
    ' output the data on A.0 to A.4, keep RS high
    ' back to top
    Goto main
End Select
Goto main

End

' ----- Support methods.  Subroutines and Functions

Sub eeprom ( In location As Byte, In datastuff As String )
    For xloop = 1 To datastuff(0)
        EPWrite location, datastuff(xloop)
        location++
    Next
End Sub


Sub  msg ( In location )

    location = ( location & 0b00001111) * line_length
    ' EEPROM start address is 0 to 15 multiplied by 16
    ' end address is start address + (line_length - 1)
    endlocation = location + line_length - 1

    ' for 16 times
    For eeprom_ptr = location To endlocation
        ' read next character
        EPRead eeprom_ptr,inAscVal
        Print CHR(inAscVal)
    Next
End Sub


