'''A demonstration program for GCGB and GCB
'''This program will test the LCD panel and the buttons of the LCD Keypad Shield.
'''Requires  LCD Keypad Shield attached to a Arduino UNO.
'''The LCD Keypad shield is developed for Arduino compatible boards, to provide a user-friendly interface that allows users to go through the menu, make selections etc.
'''It consists of a 1602 white character blue backlight LCD.
'''The keypad consists of 5 keys — select, up, right, down and left. To save the digital IO pins, the keypad interface uses only one ADC channel. The key value is read through a 5 stage voltage divider.
'''@author 	EvanV
'''@licence	GPL
'''@version	1.0a
'''@date   	16 March 2019
'''********************************************************************************

' ----- Configuration
#CHIP mega328p, 16
#OPTION Explicit
#INCLUDE <uno_mega328p.h>

' ----- Constants
'Setup LCD Parameters
#DEFINE LCD_IO 4
#DEFINE LCD_NO_RW
#DEFINE LCD_SPEED SLOW


#DEFINE LCD_RS         Digital_8
#DEFINE LCD_Enable     Digital_9
#DEFINE LCD_DB4        Digital_4
#DEFINE LCD_DB5        Digital_5
#DEFINE LCD_DB6        Digital_6
#DEFINE LCD_DB7        Digital_7


#DEFINE btnRIGHT  0
#DEFINE btnUP     1
#DEFINE btnDOWN   2
#DEFINE btnLEFT   3
#DEFINE btnSELECT 4
#DEFINE btnNONE   5


' ----- Define Hardware settings
#DEFINE Resetbtn         Reset
Dir Resetbtn In
#DEFINE LCDBacklite      Digital_10
Dir LCDBacklite Out


' ----- Variables
Dim COUNTERVALUE, SELECT_STATUS, PWMLEVEL, BTNRESET, PWMCOUNTER, PWMCOUNTER As Byte
select_status = !TRUE
Dim adc_key_in As Word

' ----- Quick Command Reference:
'The LCD Keypad shield is developed for Arduino compatible boards, to provide a user-friendly interface that allows users to go through the menu, make selections etc.
'It consists of a 1602 white character blue backlight LCD.
'The keypad consists of 5 keys — select, up, right, down and left. To save the digital IO pins, the keypad interface uses only one ADC channel. The key value is read through a 5 stage voltage divider.



' ----- Main body of program commences here.

'Call the initialisation routine
InitPWM
InitClock
InitChars

CLS
Wait 100 ms
Print "LCD KeypadShield"
Locate 1,0
Print "Version for AVR"
Wait 1 s
CLS


Do Forever

    ' Flasf bit of the LCD every second
    Locate 0,15
    If  CounterValue.0 = 0 Then
        LCDWriteChar 0
    Else
        LCDWriteChar 1
    End If

    Locate 1,0
    Select Case read_LCD_buttons
    Case btnRIGHT AND !select_status
        Print "Right   "
    Case btnUP

        If select_status = TRUE  Then
            PWMLevel = PWMLevel + 5
            If PWMLevel > 100 Then
                PWMLevel = 100
                Locate 1,0
                Print Pad("Level Max", 16)
            Else
                Print Pad("Level " +Str(PWMLevel), 16)
            End If
            Wait 100 ms
        Else
            Print "Up      "
        End If

    Case btnDOWN

        If select_status = TRUE  Then


            If PWMLevel > 0 Then
                PWMLevel = PWMLevel - 5
                If PWMLevel = 0 Then
                    Locate 1,0
                    Print Pad("Level Min", 16)
                Else
                    Print Pad("Level " +Str(PWMLevel), 16)
                End If
                Wait 100 ms
            End If
        Else
            Print "Down    "
        End If

    Case btnLEFT AND !select_status
        Print "Left    "
    Case btnSELECT
        Print "Select  "
        select_status = !select_status
        If select_status = TRUE Then
            Locate 0,0
            Print "Set"
        Else
            CLS
        End If
        Do While btnSELECT = read_LCD_buttons
        Loop

    Case Else
        If select_status = TRUE Then
            Print Pad("Level " +Str(PWMLevel), 16)
        Else
            Print "None    "
        End If
    End Select

Loop


End

' ----- Support methods.  Subroutines and Functions




'read the buttons
Function read_LCD_buttons
    read_LCD_buttons =   btnNONE
    If Resetbtn = 1 Then
        read_LCD_buttons = btnReset
        Exit Function
    End If
    ' read the value from the sensor
    adc_key_in = ReadAD10( AN0 )
    ' Buttons when read are centered at these valies: 0, 144, 329, 504, 741
    ' we add approx 50 to those values and check to see if we are close
    ' We make this the 1st option for speed reasons since it will be the most likely result

    Select Case adc_key_in
    Case < 50
        read_LCD_buttons = btnRIGHT
    Case < 150
        read_LCD_buttons = btnUP
    Case < 400
        read_LCD_buttons = btnDOWN
    Case < 550
        read_LCD_buttons = btnLEFT
    Case < 700
        read_LCD_buttons = btnSelect
    End Select

End Function

Sub InitClock
    InitTimer1 Osc, PS_256
    StartTimer 1
    CounterValue = 0
    On Interrupt Timer1Overflow Call IncCounter
End Sub


Sub IncCounter
    CounterValue ++
End Sub

'Setup routine
Sub InitPWM
    'Clear variables
    PWMLevel = 100
    PWMCounter = 0

    'Add a handler for the interrupt
    On Interrupt Timer0Overflow Call PWMHandler

    'Set up the timer
    InitTimer0 Osc, PS_1
    StartTimer 0

End Sub

'This will be called when Timer 0 overflows
Sub PWMHandler
    If PWMLevel > PWMCounter Then
        Set LCDBacklite On
    Else
        Set LCDBacklite Off
    End If
    PWMCounter -= 1
    If PWMCounter = 0 Then
        PWMCounter = 100
    End If
End Sub


Sub InitChars

    'Create an array to store the character until it is copied
    Dim LCDCharData(8)

    'Set the array to hold the character
    'Binary has been used to improve the readability of the code, but is not essential
    LCDCharData(1) = b'00000001'
    LCDCharData(2) = b'00000000'
    LCDCharData(3) = b'00000000'
    LCDCharData(4) = b'00000000'
    LCDCharData(5) = b'00000000'
    LCDCharData(6) = b'00000000'
    LCDCharData(7) = b'00000000'
    LCDCharData(8) = b'00000000'

    'Copy the character from the array to the LCD
    LCDCreateChar(0,LCDCharData())
    LCDCharData(1) = b'00000000'
    LCDCreateChar(1,LCDCharData())

End Sub
