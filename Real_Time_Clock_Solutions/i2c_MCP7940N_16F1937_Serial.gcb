'''A demonstration program for GCGB and GCB.
'''--------------------------------------------------------------------------------------------------------------------------------
'''This program shows the real time clock on a serial terminal.
'''The MCP7940N is attached to the I2C ports with appropiate resistors to the supply voltage.  Typically a 5k or 2.2k resistor 'pulling up' to the supply voltage can be used.
''':
''':    There are two pushbuttons: Mode and Set equates to Key1 and Key2. Connected to portb.0 and portb.1 resepectively.
''':
''':    During normal operation, the Mode button will toggle
''':    between 12- and 24-hours modes.
''':
''':    This has two modes US date and UK date style.
''':    Change ''':clocktype''': to 0 for US and 1 for UK
''':
''':    To set a new date and time, press the Set button
''':    which will take you consecutively to Month, Day, Year,
''':    Day of the Week, Hour, Minute and Second. Within each of
''':    these, press Mode to cycle through the possible values.
''':    You may hold the Mode button to increment automatically,
''':    or press momentarily for a single increment. Time is
''':    always set in 24-hour clock format.
''':
''':    Based on the Thomas Henry works of 5/26/2014
''':    Evan R Venn/Anobium  ---  4/1/2015
''':    Evan R Venn/Anobium  ---  10/1/2015 - Minor improvements to cater for Oscicallor stopping
''':    Evan R Venn/Anobium  ---  11/1/2015 - added Hardware i2c support
''':
'''@author          EvanV
'''@licence	GPL
'''@version	1.2a
'''@date   	23.02.15
'''********************************************************************************

' ----- Configuration
#CHIP 16F1937, 32
#OPTION Explicit
#OPTION Explicit

#INCLUDE <mcp7940n.h>



' ----- Define Hardware settings
Dir setBut In
Dir modeBut In

' Define Hardware I2C settings for SSP module
#DEFINE HI2C_BAUD_RATE 400
#DEFINE HI2C_DATA PORTC.4
#DEFINE HI2C_CLOCK PORTC.3
'I2C pins need to be input for SSP module
Dir HI2C_DATA In
Dir HI2C_CLOCK In
'MASTER I2C Device for SSP module
HI2CMode Master


'       Define I2C settings - CHANGE PORTS
'       #define I2C_MODE Master
'       #define I2C_DATA PORTC.4
'       #define I2C_CLOCK PORTC.3
'       #define I2C_DISABLE_INTERRUPTS ON
'    ;   #define I2C_BIT_DELAY   20 us      width of data bit on SDA
'    ;   #define I2C_CLOCK_DELAY 10 us      width of clock pulse on SCL
'    ;   #define I2C_END_DELAY   10 us      interval between clock pulses

' THIS CONFIG OF THE SERIAL PORT WORKS WITH max232 THEN TO PC
' USART settings
#DEFINE USART_BAUD_RATE 9600
Dir PORTc.6 Out
Dir PORTc.7 In
#DEFINE USART_DELAY 10 ms
#DEFINE USART_BLOCKING
Wait 500 ms
'sound bell on terminal
HSerSend 7


'0 is US or 1 is UK style
#DEFINE clocktype   0
'settling time for switches
#DEFINE debounce    50 ms
'delay time for pushbutton
#DEFINE delay       150 ms
'flag for pressed pushbutton
#DEFINE pressed     1
'Set pushbutton
#DEFINE setBut      portb.0
'Mode pushbutton
#DEFINE modeBut     portb.1

'a reference to the alarm 0
#DEFINE Alarm0 0x00
'a reference to the alarm 1
#DEFINE Alarm1 0x01


'----- Variables

Dim MINUTE, STATE, DAYSMAX, DAYSMAX As Byte
Dim ALARM0TRACK, ALARM1TRACK As Byte


Dim changed As BIT
Dim hour, min, sec, am_pm As Byte
Dim oldsec As Byte
Dim date, month, year, DOW As Byte
Dim mode, Oldmode, dayMax As Byte
'      init value
oldsec = 255

'----- Tables

'# of days in months
Table monthDays
    31
    'leap years only
    29
    31
    30
    31
    30
    31
    31
    30
    31
    30
    31
End Table

'----- Program

CLS

#IFDEF HI2C_DATA
    Locate 0, 12
    Print "i2cHW"
    ' is MCP7940 present?
    HI2CReStart
    HI2CSend(DS_AddrWrite)
    HI2CStop

    If HI2CAckpollState = TRUE  Then
        ' is MCP7940 present?
        ' user message
        Print "No MCP7940N"
        Locate 1,0
        ' user message
        Print "Stopped"
    End
End If
#ENDIF

#IFDEF I2C_DATA
    Locate 0, 12
    Print "i2cSW"
    ' is MCP7940 present?
    I2CStart
    I2CSend(DS_AddrWrite)
    I2CStop

    If I2CSendState = FALSE  Then
        ' is MCP7940 present?
        ' user message
        Print "No MCP7940N"
        Locate 1,0
        ' user message
        Print "Stopped"
    End
End If
#ENDIF

Locate 0,0
Print "MCP7940"
Locate 1,0
Print "Great Cow Basic"
Wait 2 s
CLS

' example uses of the new functions
'read failure time information
MCP7940_ReadFailureClock ( Alarm0 , hour, minute, DoW, date, month )
'get initial date
MCP7940_ReadDate(DOW, date, month, year)
'and the current mode
MCP7940_ReadHourMode(mode)
'update hour mode from RTC
MCP7940_SetHourMode(mode)
'and, ensure the clock is running
MCP7940_EnableOscillator( TRUE )
'and, that a battery is attached
MCP7940_BatteryBackup( TRUE )
'clear power failure, if reguired
MCP7940_ClearPowerFail
'and, turn off output as we will use as the alarm port!
MCP7940_SetSQW 0


'Another method to turn off SQW by masking the current state of the control address
state = MCP7940_ReadControl
state = state AND 0b00111111
MCP7940_SetControl ( state )

'Another method  to turn ON SQW by masking the current state
'  state = MCP7940_ReadControl
'  state = state or 0b11000000
'  MCP7940_SetControl ( state )




'Examples of how to set the Alarms
'You must do the following:
'1. Turn off the Output of the device.  Use MCP7940_SetSQW 0
'2. Set the MCP7940_SetAlarmPolarity - on or off
'3. Set the alarm parameters, time etc using  MCP7940_SetAlarm
'4. Clear the alarm status, using MCP7940_ClearAlarm
'5. Enable the alarm, using MCP7940_EnableAlarm
'
'You can test the status of the alarm by raising an interrupt in your PIC but you can also test MCP7940_AlarmStatus.  MCP7940_AlarmStatus will return true | false.
'After the alarm event has occured you MUST clear the alarm, using MCP7940_ClearAlarm


'and, turn off output as we will use as the alarm port!
MCP7940_SetSQW 0

' set Alarm0 - alert every time the Seconds is at 45 secs.
MCP7940_SetAlarmPolarity ( Alarm0, On )
'MCP7940_SetAlarm ( [0 |  1] , hour, minute, second, DOW, date )
MCP7940_SetAlarm ( Alarm0 , 11, 45, 45, 1, 1, 0 )
'MCP7940_SetAlarmMask ( [0 |  1] , alarmAssertionMatch )
MCP7940_SetAlarmMask ( Alarm0, MCP7940_AlarmAssertion_Seconds )
MCP7940_ClearAlarm ( Alarm0 )
MCP7940_EnableAlarm ( Alarm0 )
'  MCP7940_ReadAlarm( Alarm0, hour, min, sec, DOW, date )   ;MCP7940_ReadAlarm ( in DS_Value, out DS_Hour, out DS_Min, out DS_Sec, out DS_DOW, out DS_Date )

' set Alarm1 - alert every time the Seconds is at 15 secs.
MCP7940_SetAlarmPolarity ( Alarm1, On )
MCP7940_SetAlarm ( Alarm1 , 11, 45, 15, 1, 1, 0 )
MCP7940_SetAlarmMask ( Alarm1, MCP7940_AlarmAssertion_Seconds )
MCP7940_ClearAlarm ( Alarm1 )
MCP7940_EnableAlarm ( Alarm1 )
'  MCP7940_ReadAlarm( Alarm1, hour, min, sec, DOW, date )   ;MCP7940_ReadAlarm ( in DS_Value, out DS_Hour, out DS_Min, out DS_Sec, out DS_DOW, out DS_Date )

' MCP7940_DisableAlarm ( 0 )
' MCP7940_DisableAlarm ( 1 )

'End of Alarm setup commands



'Main body of program commences here.
'get initial date
MCP7940_ReadDate(DOW, date, month, year)
'and the current mode
MCP7940_ReadHourMode(mode)


Do

    'show time and date
    updateDisp
    If setBut = pressed Then
        'change time and date
        changeSetting
    End If

    If modeBut = pressed Then
        '12 or 24 hour mode
        changeMode
    End If

    'Alarm Handling code. Simply tests the status and displays a message on the LCD

    If MCP7940_AlarmStatus ( 0 ) = 1 Then
        ' display message
        Locate 0,15
        Print "*0"
        MCP7940_ClearAlarm ( 0 )
        Alarm0track = sec
    End If


    If MCP7940_AlarmStatus ( 1 ) = 1 Then
        ' display message
        Locate 1,15
        Print "*1"
        MCP7940_ClearAlarm ( 1 )
        Alarm1track = sec
    End If

    If ((Alarm0track + 4) % 60 ) < sec Then
        ' clear the line after time delay of 4 secs
        Locate 0,15
        Print "  "
    End If

    If ((Alarm1track + 4) % 60 ) < sec Then
        ' clear the line after time delay of 4 secs
        Locate 1,15
        Print "  "
    End If
    'End of Alarm Handling code.


Loop
End
'----- Subroutines

Sub printTime
    If mode = 24 Then
        If hour < 10 Then
            'left pad with zero
            Print "0"
        End If
    End If
    Print hour

    Print ":"
    If min < 10 Then
        'left pad with zero
        Print "0"
    End If
    Print min

    Print ":"
    If sec < 10 Then
        'left pad with zero
        Print "0"
    End If
    Print sec

    If mode = 12 Then
        'Print a.m or p.m
        If am_pm Then
            'only in 12-hour mode
            Print " p.m. "
        Else
            Print " a.m. "
        End If
    Else
        'wipe out garbage
        Print "     "
    End If
End Sub

'-----

Sub printDate
    'day of the week
    Select Case DOW
    Case 1:
        Print "Sun."
    Case 2:
        Print "Mon."
    Case 3:
        Print "Tue."
    Case 4:
        Print "Wed."
    Case 5:
        Print "Thu."
    Case 6:
        Print "Fri."
    Case 7:
        Print "Sat."
    Case Else
        Print "Err."
    End Select

    If clocktype = 0 Then
        Print month
        Print "/"
        Print date
        'make four-digit year
        Print "/20"
        If year < 10 Then
            Print "0"
        End If
    Else
        Print date
        Print "/"
        Print month
        'make four-digit year
        Print "/20"
        If year < 10 Then
            Print "0"
        End If
    End If
    Print year
    'blank any garbage
    Print " "
End Sub

'-----

Sub updateDisp
    'for best efficiency, date is only updated once a day
    MCP7940_ReadTime(hour, min, sec, am_pm)
    If oldsec <> sec Then
        If !(hour | min | sec) Then
            'time to update
            MCP7940_ReadDate(DOW, date, month, year)
        End If

        'home the cursor
        Locate 0,0
        'show time
        printTime

        'show the date
        Locate 1,0
        printDate
        oldsec =  sec
    End If
End Sub

'-----

Sub changeSetting
    'assume no change will be made
    changed = FALSE
    'and the current mode
    MCP7940_ReadHourMode(Oldmode)
    'ensure the display is correct
    mode = 24
    'change settings in 24-hour mode
    MCP7940_SetHourMode(24)

    'wait for Set release
    Do While setBut = pressed
        Wait debounce
    Loop

    Wait While ( setBut = pressed ) OR ( modeBut = pressed )

    If clocktype = 0 Then
        ' handle US and UK clock type
        SetMonth
        SetDate
    Else
        SetDate
        SetMonth
    End If
    SetYear

    '***** Day of the Week

    CLS
    Print "Set Weekday:"
    Locate 1,0
    printDate

    Do
        'Mode button held
        Do While modeBut = pressed
            'increment while pressed
            DOW++
            If DOW > 7 Then
                '1 = Sunday, etc.
                DOW = 1
            End If

            'Print updated display
            Locate 1,0
            printDate
            'wait for repeat
            Wait While modeBut = pressed
            'a change was made
            changed = TRUE
        Loop
    Loop While setBut <> pressed

    'wait for Set release
    Do While setBut = pressed
        Wait debounce
    Loop

    '***** Hour

    CLS
    Print "Set Hours:"
    Locate 1,0
    If OldMode = 12 AND am_pm Then
        ' make correction of AM_PM mode by adding 12 hours to handle mode changes
        hour = hour + 12
    End If

    printTime

    Do
        'Mode button held
        Do While modeBut = pressed
            'increment while pressed
            hour++
            If hour > 23 Then
                'remember, set in 24-hour mode
                hour = 0
            End If

            'Print updated display
            Locate 1,0
            printTime
            'wait for repeat
            Wait While modeBut = pressed
            'a change was made
            changed = TRUE
        Loop
    Loop While setBut <> pressed

    'wait for Set release
    Do While setBut = pressed
        Wait debounce
    Loop

    '***** Minutes

    CLS
    Print "Set Minutes:"
    Locate 1,0
    printTime

    Do
        'Mode button held
        Do While modeBut = pressed
            'increment while pressed
            min++
            If min > 59 Then
                '0 to 59 minutes
                min = 0
            End If

            'Print updated display
            Locate 1,0
            printTime
            'wait for repeat
            Wait While modeBut = pressed
            'a change was made
            changed = TRUE
        Loop
    Loop While setBut <> pressed

    'wait for Set release
    Do While setBut = pressed
        Wait debounce
    Loop

    '***** Second

    CLS
    Print "Set Seconds:"
    Locate 1,0
    printTime

    Do
        'Mode button held
        Do While modeBut = pressed
            'increment while pressed
            sec++
            If sec > 59 Then
                '0 to 59 seconds
                sec = 0
            End If

            'Print updated display
            Locate 1,0
            printTime
            'wait for repeat
            Wait While modeBut = pressed
            'a change was made
            changed = TRUE
        Loop
    Loop While setBut <> pressed

    'wait for Set release
    Do While setBut = pressed
        Wait debounce
    Loop

    '***** Execute the new settings

    If changed Then
        CLS
        Print "Press Set, or"
        Locate 1,0
        Print "Mode to revert"

        'wait for the Set button
        Do While (setBut <> pressed)
            Wait debounce
            If ModeBut = pressed Then
                'clear last message
                CLS
                'restore current mode
                MCP7940_SetHourMode(Oldmode)
                'do not set, exit set routine
                Exit Sub
            End If
        Loop

        'change settings in 24-hour mode
        MCP7940_SetHourMode(24)
        MCP7940_SetClock(hour, min, sec, DOW, date, month, year)
    End If

    'wait for Set release
    Do While (setBut = pressed)
    Loop

    'let it settle
    Wait debounce
    'clear last message
    CLS
    'restore current mode
    MCP7940_SetHourMode(Oldmode)
    'ensure the clock is running
    MCP7940_EnableOscillator( TRUE )
    'restore mode
    mode = Oldmode
End Sub

'-----

Sub changeMode
    'change settings in 24-hour mode
    MCP7940_SetHourMode(24)

    If mode = 12 Then
        'toggle between 12 and 24
        mode = 24
    Else
        mode = 12
    End If

    'change to new mode
    MCP7940_SetHourMode(mode)

    'wait for a release
    Do While modeBut = pressed
        Wait debounce
    Loop
End Sub

Sub setMonth
    '***** Month
    CLS
    Print "Set Month:"
    Locate 1,0
    printDate

    Do
        'Mode button held
        Do While modeBut = pressed
            'increment while pressed
            month++
            If month > 12 Then
                month = 1
            End If

            'Print updated display
            Locate 1,0
            printDate
            'wait for repeat
            Wait While modeBut = pressed
            'a change was made
            changed = TRUE
        Loop
        Wait debounce
        'Set moves you on
    Loop While setBut <> pressed

    ReadTable monthDays, month, daysMax

    'wait for Set release
    Do While setBut = pressed
        Wait debounce
    Loop
End Sub



Sub SetDate
    '***** Date

    CLS
    Print "Set Date:"
    Locate 1,0
    printDate
    ReadTable monthDays, month, daysMax
    Do
        'Mode button held
        Do While modeBut = pressed
            'increment while pressed
            date++
            If date > daysMax Then
                'stay within legal days
                date = 1
            End If

            'Print updated display
            Locate 1,0
            printDate
            'wait for repeatt
            Wait While modeBut = pressed
            'a change was made
            changed = TRUE
        Loop
        Wait debounce
    Loop While setBut <> pressed

    'wait for Set release
    Do While setBut = pressed
        Wait debounce
    Loop
End Sub


Sub SetYear
    '***** Year

    CLS
    Print "Set Year:"
    Locate 1,0
    printDate

    Do
        'Mode button held
        Do While modeBut = pressed
            'increment while pressed
            year++
            If year > 99 Then
                'this millennium only
                year = 0
            End If

            'Print updated display
            Locate 1,0
            printDate
            'wait for repeat
            Wait While modeBut = pressed
            'a change was made
            changed = TRUE
        Loop
        Wait debounce
    Loop While setBut <> pressed

    'wait for Set release
    Do While setBut = pressed
        Wait debounce
    Loop


End Sub


#DEFINE Locate ANSI_rev
#DEFINE CLS ANSIERASECREEN
#DEFINE Print HSerPrint

' Position cursor on Terminal
Sub ANSI ( In xpos, In ypos )
    HSerSend 27
    HSerPrint "["
    HSerPrint ypos
    HSerSend 59
    HSerPrint xpos
    HSerPrint "H"
End Sub

' Position cursor on Terminal
Sub ANSI_rev ( In ypos, In xpos )
    ypos++
    HSerSend 27
    HSerPrint "["
    HSerPrint ypos
    HSerSend 59
    HSerPrint xpos
    HSerPrint "H"
End Sub


' Eraase Terminal
Sub ANSIERASECREEN
    HSerSend 27
    HSerPrint "["
    HSerPrint "2"
    HSerPrint "J"
    Ansi ( 0, 0 )

    HSerSend 27
    HSerPrint "["
    HSerPrint "?"
    HSerPrint "25"
    HSerPrint "l"



End Sub


