'''A demonstration program for GCGB and GCB.
'''--------------------------------------------------------------------------------------------------------------------------------
'''This program shows how to use the NXP PCF 8591 8-bit A/D and D/A IC with GCB.
'''This prvovided more analogue input pins on your project and you can generate analogue signals.
'''The NXP PCF8591 IC has a single DAC (digital to analogue) converter as well as four ADCs (analogue to digital converters) – all accessible via the I2C bus.
'''If the I2C bus is new to you, please familiarise yourself with I2C here before moving forward.
'''The PCF8591 is available in DIP form, which makes it easy to experiment with:
'''@author  EvanV
'''@licence GPL
'''@version 1.1a
'''@date    10/12/2015
'''********************************************************************************

' ----- Configuration
#CHIP 16F1937, 32


'Please review the datasheet
'Device address
#DEFINE PCF8591 0x90
#DEFINE PCF8591_DAC_ENABLE 0x40
#DEFINE PCF8591_ADC_CH0 0x40
#DEFINE PCF8591_ADC_CH1 0x41
#DEFINE PCF8591_ADC_CH2 0x42
#DEFINE PCF8591_ADC_CH3 0x43
#DEFINE PCF8591_AUTO_INCREMENT 0x04

#DEFINE IntegerMathsFactorisor

' ----- Define Hardware settings
' Define I2C settings - CHANGE PORTS if required
#DEFINE HI2C_BAUD_RATE 100
#DEFINE HI2C_DATA PORTC.4
#DEFINE HI2C_CLOCK PORTC.3
'Initialise I2C Slave
'I2C pins need to be input for SSP module
Dir HI2C_DATA In
Dir HI2C_CLOCK In
'MASTER
HI2CMode Master

' THIS CONFIG OF THE SERIAL PORT WORKS WITH A  MAX232 (or equiv) THEN TO PC
' USART settings - CHANGE PORTS if required
#DEFINE USART_BAUD_RATE 9600
Dir PORTc.6 Out
Dir PORTc.7 In
#DEFINE USART_TX_BLOCKING
Wait 500 ms


' ----- Main body of program commences here.
' Now assumes Serial Terminal is operational
HSerPrintCRLF 2
HSerPrint "PCF8591 - MultiPort Sensor I2C "
HSerPrint ChipNameStr
HSerPrintCRLF


'#define Demo1  Reference Voltage demo
'#define Demo2  ' Reads the ADC channels
' Sine wave in AOUT. You may get clipping... voltage losses by the LED! See Scope to 20ms
#DEFINE Demo3
'#define Demo4  ' Sets the AOUT to Ramp up and Ramp down



#IFDEF Demo1
    'these are psuedo floats
    Dim DACoutVolt, Voltage, RawValue0 As Long
    Dim Offset As Integer
    DACoutVolt = 0
    Voltage = 0
    Offset = 0
    RawValue0 = 0
    DACout = 0

    '***** Calibrate
    HI2CStart
    'sets the PCF8591 into a DA mode
    HI2CSend PCF8591
    'sets the PCF8591 into a DA mode
    HI2CSend PCF8591_DAC_ENABLE
    'sets the output to mid scale
    HI2CSend 0x80
    HI2CStop
    Wait 100 ms
    DACoutVolt = (128 * IntegerMathsFactorisor * 5) / 256
    Repeat 5
        RawValue0 = ReadAD ( AN0 )
    End Repeat
    Voltage = (RawValue0 * IntegerMathsFactorisor * 5 ) / 256
    Offset = DACoutVolt - Voltage

    Do Forever

        For DACout = 0 To 255
            HI2CStart
            'sets the PCF8591 into a DA mode
            HI2CSend PCF8591
            'sets the outputn
            HI2CSend PCF8591_DAC_ENABLE
            'set On
            HI2CSend DACout
            HI2CStop
            Wait 10 ms


            RawValue0 = ReadAD ( AN0 )
            Voltage = (RawValue0 * IntegerMathsFactorisor * 5 ) / 256
            DACoutVolt = [Long]DACout * IntegerMathsFactorisor * 5
            DACoutVolt = [Long]DACoutVolt / 256



            'Because the math could give us something less than zero
            'we need to set it to zero if it is.
            If ( DACoutVolt > offset ) Then
                DACoutVolt = [Long]DACoutVolt - Offset
            Else
                DACoutVolt = 0
            End If


            HSerPrint "DAC Out = "
            HSerPrint DACout
            HSerSend 9
            HSerPrint "DAC Target Voltage = "
            HSerPrint PrintFloat(DACoutVolt)
            HSerSend 9
            HSerPrint "Raw ADC Value = "
            HSerPrint RawValue0
            HSerSend 9
            HSerPrint "Voltage = "
            HSerPrint PrintFloat(Voltage)
            HSerPrintCRLF


        Next

    Loop
End

Dim tempstr As String * 3
Function PrintFloat ( In Float As Long ) As String * 6

    tempstr = Str( Float )
    Select Case float
    Case < 10
        tempstr = "00"+Str( Float )

    Case < 100
        tempstr = "0"+Str( Float )
    End Select

    PrintFloat = Left(tempstr,1)
    PrintFloat = PrintFloat + "."
    PrintFloat = PrintFloat + Right(tempstr,2)

End Function
#ENDIF







#IFDEF Demo2
    Do Forever
        HI2CStart
        HI2CSend PCF8591
        'control byte - read ADC0 then auto-increment
        HI2CSend PCF8591_AUTO_INCREMENT
        HI2CStart
        HI2CSend ( PCF8591 | 1 )
        'First byte is a dummy byte. Dump this value.
        HI2CReceive value0
        HI2CReceive value0
        HI2CReceive value1
        HI2CReceive value2
        HI2CReceive value3, NACK
        HI2CStop

        Locate 6,0
        Print Pad(Str(value0),3)
        Print " "
        Print Pad(Str(value1),3)
        Print " "
        Print Pad(Str(value2),3)
        Print " "
        Print Pad(Str(value3),3)
        Print " "

    Loop

#ENDIF

#IFDEF Demo3
    Dim sinev(256)
    Dim inc As Word
    For inc = 1 To 256
        ReadTable sinevalues, inc, sinev(inc)
    Next

Table sinevalues
    0x80, 0x83, 0x86, 0x89, 0x8C, 0x90, 0x93, 0x96
    0x99, 0x9C, 0x9F, 0xA2, 0xA5, 0xA8, 0xAB, 0xAE
    0xB1, 0xB3, 0xB6, 0xB9, 0xBC, 0xBF, 0xC1, 0xC4
    0xC7, 0xC9, 0xCC, 0xCE, 0xD1, 0xD3, 0xD5, 0xD8
    0xDA, 0xDC, 0xDE, 0xE0, 0xE2, 0xE4, 0xE6, 0xE8
    0xEA, 0xEB, 0xED, 0xEF, 0xF0, 0xF1, 0xF3, 0xF4
    0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFA, 0xFB, 0xFC
    0xFD, 0xFD, 0xFE, 0xFE, 0xFE, 0xFF, 0xFF, 0xFF
    0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFE, 0xFE, 0xFD
    0xFD, 0xFC, 0xFB, 0xFA, 0xFA, 0xF9, 0xF8, 0xF6
    0xF5, 0xF4, 0xF3, 0xF1, 0xF0, 0xEF, 0xED, 0xEB
    0xEA, 0xE8, 0xE6, 0xE4, 0xE2, 0xE0, 0xDE, 0xDC
    0xDA, 0xD8, 0xD5, 0xD3, 0xD1, 0xCE, 0xCC, 0xC9
    0xC7, 0xC4, 0xC1, 0xBF, 0xBC, 0xB9, 0xB6, 0xB3
    0xB1, 0xAE, 0xAB, 0xA8, 0xA5, 0xA2, 0x9F, 0x9C
    0x99, 0x96, 0x93, 0x90, 0x8C, 0x89, 0x86, 0x83
    0x80, 0x7D, 0x7A, 0x77, 0x74, 0x70, 0x6D, 0x6A
    0x67, 0x64, 0x61, 0x5E, 0x5B, 0x58, 0x55, 0x52
    0x4F, 0x4D, 0x4A, 0x47, 0x44, 0x41, 0x3F, 0x3C
    0x39, 0x37, 0x34, 0x32, 0x2F, 0x2D, 0x2B, 0x28
    0x26, 0x24, 0x22, 0x20, 0x1E, 0x1C, 0x1A, 0x18
    0x16, 0x15, 0x13, 0x11, 0x10, 0x0F, 0x0D, 0x0C
    0x0B, 0x0A, 0x08, 0x07, 0x06, 0x06, 0x05, 0x04
    0x03, 0x03, 0x02, 0x02, 0x02, 0x01, 0x01, 0x01
    0x01, 0x01, 0x01, 0x01, 0x02, 0x02, 0x02, 0x03
    0x03, 0x04, 0x05, 0x06, 0x06, 0x07, 0x08, 0x0A
    0x0B, 0x0C, 0x0D, 0x0F, 0x10, 0x11, 0x13, 0x15
    0x16, 0x18, 0x1A, 0x1C, 0x1E, 0x20, 0x22, 0x24
    0x26, 0x28, 0x2B, 0x2D, 0x2F, 0x32, 0x34, 0x37
    0x39, 0x3C, 0x3F, 0x41, 0x44, 0x47, 0x4A, 0x4D
    0x4F, 0x52, 0x55, 0x58, 0x5B, 0x5E, 0x61, 0x64
    0x67, 0x6A, 0x6D, 0x70, 0x74, 0x77, 0x7A, 0x7D
End Table

Do Forever
    For inc = 1 To 256
        HI2CStart
        'sets the PCF8591 into a DA mode
        HI2CSend PCF8591
        'sets the outputn
        HI2CSend PCF8591_DAC_ENABLE
        'set On
        HI2CSend sinev(inc)
        HI2CStop
    Next
Loop

#ENDIF

#IFDEF Demo4

    Do
        For inc = 0 To 255
            HI2CStart
            'sets the PCF8591 into a DA mode
            HI2CSend PCF8591
            'sets the outputn
            HI2CSend PCF8591_DAC_ENABLE
            'set On
            HI2CSend inc
            HI2CStop
            '                wait 5 ms
        Next
        For inc = 255 To 0 Step -1
            HI2CStart
            'sets the PCF8591 into a DA mode
            HI2CSend PCF8591
            'sets the outputn
            HI2CSend PCF8591_DAC_ENABLE
            'set On
            HI2CSend inc
            HI2CStop
            '                wait 5 ms
        Next
    Loop
End

#ENDIF



' ----- Support methods.  Subroutines and Functions
