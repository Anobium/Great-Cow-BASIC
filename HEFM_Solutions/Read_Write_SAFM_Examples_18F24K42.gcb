'''A test program of the hefsaf.h library routines
'''-----------------------------------------------------------------------------
'''This is using the hef/saf routines to read/write data or strings
'''to HEF or SAF memory. The HEF/ SAF Memory Block is then dumped to a serial terminal
'''Be sure to use one of the chip listed in hefsaf.h init routine which
'''have an UART module.  This is a revised demonstation to support the latest library.
'''
'''@author  William Roth and the works Evan Venn & Jacques Nilo
'''@licence GPL
'''@version 2.1
'''@date    09.11.2018
'''
'''*****************************************************************************

'Chip Settings.
#CHIP 18F24K42, 16

#OPTION Explicit
#STARTUP InitPPS, 85

Sub InitPPS
    'Module: UART pin directions
    ' Make TX Pin an Output
    Dir PORTC.6 Out
    'Module: UART1
    'TX1 > RC6
    RC6PPS = 0x0013
End Sub

'Setup Serial port
#DEFINE USART_BAUD_RATE 19200
#DEFINE USART_TX_BLOCKING

Wait 100 ms
HSerPrintCRLF 2
HSerPrintStringCRLF "Welcome"
Wait 1 s

Dim Rel_Address,DataByte, Index As Byte
' Absolute Address
Dim NVM_Address As Long
Dim  DataWord, As Word
Dim MyBuffer(SAF_ROWSIZE_BYTES)
'
' --- Main test Program
'
HSerPrint "Initial SAFM state :"
HSerPrintCRLF
HEFM_Dump

' Test 1: fill block 0 and 1 with structured data then dump SAFM to terminal
HSerPrintCRLF
HSerPrint "Test 1: Fill block 0 and 1 with data then dump to terminal"
HSerPrintCRLF

'incremmenting data
For Index = 1 To SAF_ROWSIZE_BYTES
    MyBuffer(index) = Index - 1
Next
SAFWriteBlock(0, MyBuffer, SAF_ROWSIZE_BYTES)

'decrementing data
For Index = 1 To SAF_ROWSIZE_BYTES
    MyBuffer(index) = SAF_ROWSIZE_BYTES -Index
Next
SAFWriteBlock(1, MyBuffer, SAF_ROWSIZE_BYTES)

HSerPrintCRLF
HSerPrint "Results of Test 1 Below"
HSerPrintCRLF
HEFM_Dump

' Test 2: read block 0 into data, move it to block 1, erase block 0 & dump
HSerPrintCRLF
HSerPrint "Test 2: Read Block 0, relocate to Block 1 and erase Block 0"
'Row 0 loaded in data
SAFReadBlock( 0, MyBuffer, SAF_ROWSIZE_BYTES)
'Data copied to row 1
SAFWriteBlock(1, MyBuffer, SAF_ROWSIZE_BYTES)
'Row 0 erased
SAFEraseBlock( 0 )
HSerPrintCRLF
HSerPrint "Results of Test 2 Below"
HSerPrintCRLF
'Dump SAFM on terminal
HEFM_Dump

' Test 3:  Write a single byte to last addrr in row 0
HSerPrintCRLF
HSerPrint "Test 3: Write a byte of data to last address in block 0 "

'Calculate rel address of last addr in block2
Rel_Address  =  SAF_ROWSIZE_BYTES - 1
DataByte  = 88
SAFWrite(Rel_Address, DataByte)

HSerPrintCRLF
HSerPrint "Results of Test 3 Below"
HSerPrintCRLF
HEFM_Dump

' Test 4: test of the read bytes routines
HSerPrintCRLF
HSerPrint "Test 4: Verify the byte from Test 3"
HSerPrintCRLF

HSerPrint "Results of Test 4 Below"
HSerPrintCRLF 2

'Calculate rel address of last addr in block 1
Rel_Address  =  SAF_ROWSIZE_BYTES - 1
'Clear the Variable
DataByte = 0

'test SAFRead  Sub
NVM_Address = Rel_Address + SAF_START_ADDR
HSerPrint "  Review value at location 0x"+Hex(NVM_Address_h)
HSerPrint Hex(NVM_Address)
HSerPrintCRLF 2

SAFRead(Rel_Address, DataByte)
HSerPrint "  Value in DataByte using subroutine:"
HSerPrintCRLF
HSerPrint "  SAFRead( Rel_Address, DataByte )"
HSerPrint " = "
HSerPrint DataByte
HSerPrint " equates to 0x"+Hex(DataByte)
HSerPrintCRLF

'test SAFRead Function
DataByte = SAFRead(rel_Address)
HSerPrintCRLF
HSerPrint "  Value in DataByte using function:"
HSerPrintCRLF
HSerPrint "  DataByte = SAFRead( Rel_Address )"
HSerPrint " = "
HSerPrint DataByte
HSerPrint " equates to 0x"+Hex(DataByte)
HSerPrintCRLF 2
HSerPrint " ***  Tests Completed ***"
HSerPrintCRLF 2

End

' This subroutine displays the SAF Flash Memory on a terminal
' Words in reverse byte order relative to address
Sub HEFM_Dump

    Dim Blocknum As Byte
    NVM_Address  = SAF_START_ADDR
    BlockNum = 0

    '128
    Repeat SAF_WORDS
        If NVM_Address % SAF_ROWSIZE_BYTES = 0 Then
            If BlockNum > 0 Then   HSerPrintCRLF
            HSerPrintCRLF

            HSerPrint "Block"
            HSerPrint BlockNum
            HSerPrint "  1 0   3 2   5 4   7 6   9 8   B A   D C   F E"
            BlockNum++
        End If

        If NVM_Address  % 16 = 0 Then
            HSerPrintCRLF
            HSerPrint Hex(NVM_Address_H)
            HSerPrint Hex(NVM_Address)
            HSerPrint "    "
        End If

        Rel_Address = NVM_ADDRESS - SAF_START_ADDR
        SAFReadWord(Rel_Address,DataWord)

        HSerPrint Hex(DataWord_H)
        HSerPrint Hex(DataWord)
        HSerPrint "  "

        ' Next "WORD"
        NVM_Address+=2
    End Repeat

    HSerPrintCRLF

End Sub
