'''A demonstration program for GCGB and GCB.
'''--------------------------------------------------------------------------------------------------------------------------------
'''This program searches for I2C devices and display their adresses to the attached PC terminal.
'''This program uses the hardware implementation of I2C and TWI for the Microchip and ATMEL microprocessors.  The microprocessor must have a suitable I2C or TWI module and the correct pullup resistors.
'''The hardware serial connections are shown in the program.
'''
'''@author  Evan R. Venn
'''@licence GPL
'''@version 1.00
'''@date    24/08/2019
'''********************************************************************

    #chip 16F18446                   'Specify the Device you are compiling for - this board is the 16F18446
                                     'Great Cow BASIC simplifies the configuration by setting the frequency and the configuration for you.
    #option Explicit                 'This option ensures that all variables are dimensioned in the user program.  See http://gcbasic.sourceforge.net/help/__option_explicit.html

    #define LEDOn  = 0               'Set a constant.  The LED can be activated by driving the connected I/O line to GND, see section 3.3.2 of the MPLAB-Xpress-PIC16F18446-Evaluation-Board.pdf
    #define LEDOff = 1               'Set a constant.  The LED can be de-activated by driving the connected I/O line to the supply voltage, see section 3.3.2 of the MPLAB-Xpress-PIC16F18446-Evaluation-Board.pdf

    #define LED0 porta.2             'Set a constant to refer to the LED.  RA2 is a Yellow LED called LED0 Edge connector, see section 3.3.1 of the MPLAB-Xpress-PIC16F18446-Evaluation-Board.pdf
    dir LED0 out                     'Set LED as an output


    #define Switch portc.2              'Set a constant to refer to the switch
    dir Switch in                       'Set the switch as an input
    WPUC2 = 1                        'Enable weak pullup, see section 3.3.2 of the MPLAB-Xpress-PIC16F18446-Evaluation-Board.pdf

    #define USART_BAUD_RATE 19200    'Setup the communication EUSART settings - do not need to do much with Great Cow BASIC
    #define USART_TX_BLOCKING


    'Generated by PIC PPS Tool for Great Cow Basic
    'PPS Tool version: 0.0.5.19
    'PinManager data: v1.65.2
    '
    'Template comment at the start of the config file
    '
    #startup InitPPS, 85

    Sub InitPPS

            'Module: EUSART1
            RX1DTPPS = 0x000E    'RB6 > RX1
            RB4PPS = 0x000F      'TX1 > RB4

            'Module: MSSP1
            RB7PPS = 0x0013    'SCL1 > RB7
            SSP1CLKPPS = 0x000F    'RB7 > SCL1 (bi-directional)
            RB5PPS = 0x0014    'SDA1 > RB5
            SSP1DATPPS = 0x000D    'RB5 > SDA1 (bi-directional)

    End Sub
    'Template comment at the end of the config file


; ----- Define Hardware settings
    ' Define I2C settings - CHANGE PORTS if required for your specific device.
    #define HI2C_BAUD_RATE 100  'can be 400
    #define HI2C_DATA  PORTB.5
    #define HI2C_CLOCK PORTB.7
    'I2C pins need to be input for SSP module when used on this type of Microchip PIC device
    Dir HI2C_DATA in
    Dir HI2C_CLOCK in
    HI2CMode Master


; ----- Main body of program commences here.
  ' Now assumes Serial Terminal is operational
  dim DeviceID as byte
  Dim DISPLAYNEWLINE as Byte
  wait 100 ms

 do
    HSerPrintCRLF
    HSerPrint "Hardware I2C "
    HSerPrintCRLF 2

      ' Now assumes Serial Terminal is operational
      HSerPrintCRLF
      HSerPrint "   "
      'Create a horizontal row of numbers
      for DeviceID = 0 to 15
        HSerPrint hex(deviceID)
        HSerPrint " "
      next

      'Create a vertical column of numbers
      for DeviceID = 0 to 255
        DisplayNewLine = DeviceID % 16
        if DisplayNewLine = 0 Then
          HSerPrintCRLF
          HserPrint hex(DeviceID)
          if DisplayNewLine > 0 then
            HSerPrint " "
          end if
        end if
        HSerPrint " "

        'Do an initial Start
        HI2CStart
        if HI2CWaitMSSPTimeout <> True then

          'Send to address to device
          HI2CSend ( deviceID )

          'Did device fail to respond?
          if HI2CAckPollState = false then
            HI2CSend ( 0 )
            HSerPrint   hex(deviceID)
          Else
            HSerPrint "--"
          end if

          'Do a stop.
          HI2CStop
        Else
          HSerPrint "! "
        end if

      next

      HSerPrintCRLF 2
      HSerPrint   "End of Search"
      HSerPrintCRLF 2
      wait 1 s
      wait while switch = On
  loop

; ----- Support methods.  Subroutines and Functions
