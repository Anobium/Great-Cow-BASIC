'''
'''This demonstration program is a simple GLCD demonstration of the SSD1306 GLCD capabilities and Maths/Trig capabilities.
'''
'''This program demonstrates the basic primatives a voltmeter on a Graphical LCD (GLCD)
''':
'''You can change the microcontroller, the GLCD and the analogue port.
'''
'''To change the microcontroller simply change the #chip statement
'''To change the GLCD replace GLCD definition
'''To change the analogue port change the ADCChannelSelected constant
'''
'''************************************************************************
'''@author  StanC & EvanV
'''@licence GPL
'''@version 1.01
'''@date    22.10.2017
' ----- Configuration

    'Chip Settings.
    #chip 18f25k42, 64
    #option Explicit
    #config mclr=on

    #startup InitPPS, 85

    Sub InitPPS

          RC4PPS =      0x22   'RC4->I2C1:SDA1
          RC3PPS =      0x21   'RC3->I2C1:SCL1
          I2C1SCLPPS =  0x13   'RC3->I2C1:SCL1
          I2C1SDAPPS =  0x14   'RC4->I2C1:SDA1

          'Module: UART1
          RC6PPS = 0x0013     'TX1 > RC6
          U1RXPPS = 0x0017    'RC7 > RX1

    End Sub

    'Template comment at the end of the config file


    '' -------------------PORTA----------------
    '' Bit#:  -7---6---5---4---3---2---1---0---
    '' IO:    ---------------------------------
    ''-----------------------------------------
    ''

    '' -------------------PORTB----------------
    '' Bit#:  -7---6---5---4---3---2---1---0---
    '' IO:    -------| O | ----------| O | I |-
    ''-----------------------------------------
    ''

    '' ------------------PORTC-----------------
    '' Bit#:  -7---6---5---4---3---2---1---0---
    '' IO:    -------------I---I-| X |---------
    ''-----------------------------------------
    ''

    #define LEDD1 PORTB.1
    #define LEDD2 PORTB.5
    #define SwitchIn        PORTB.0

    Dir     LEDD1         Out
    Dir     LEDD2         Out
    Dir     SwitchIn      In

    'Setup Serial port
    #define USART_BAUD_RATE 9600
    #define USART_TX_BLOCKING


    ' Define I2C settings
    #define HI2C_BAUD_RATE 100
    #define HI2C_DATA PORTC.4
    #define HI2C_CLOCK PORTC.3
    'Initialise I2C
    Dir HI2C_DATA out
    Dir HI2C_CLOCK out
    RC3I2C.TH0=1
    RC4I2C.TH0=1

    'MASTER
    HI2CMode Master

    #include <glcd.h>
    #define GLCD_TYPE GLCD_TYPE_SSD1306
    #define GLCD_I2C_Address 0x78

    #include <trig2places.h>


    'These constants allow you to change the GLCD memory usage.
    #define GLCD_PROTECTOVERRUN
'*******************************************************************************************



    'analogue port selection
    #define ADCChannelSelected ANC5

    #define ADSpeed LowSpeed

    dim radius,xcentre,ycentre,xend,old_xend,yend,old_yend as byte
    dim angle,old_angle,adcval as word
    dim volts as string * 4
    xcentre=63
    ycentre=58
    ;draw dial
    GLCDCLS
    box 0,0,127,63
    for radius=144 to 141
      dial
    next radius
    GLCDDrawChar (5,40,asc("0")):GLCDDrawChar (115,40,asc("5"))
    radius=120
    angle=1
    anglecheck
    ;main
    do
      old_angle=angle
    ;--- DVM
      adcval=ReadAD(ADCChannelSelected)
      angle=adcval/2
    ;
      adcval=adcval*100
      adcval=adcval/51
      volts=str(adcval)
      if adcval<10 then
        volts="0.0"+left(volts,1,1)
        goto volt_format_done
      end if
      if adcval<100 then
        volts="0."+mid(volts,1,2)
      else
        volts=left(volts,1,1)+"."+mid(volts,2,2)
      end if
      volt_format_done:
    ;---
      anglecheck
      old_xend = xcentre + radius  * sin (old_angle)/255
      old_yend = ycentre - radius  * cos (old_angle)/255
      xend = xcentre + radius  * sin (angle)/255
      yend = ycentre - radius  * cos (angle)/255
      if old_angle<>angle then ;-- update screen if volts has changed
    ;   erase old needle
        line (xcentre,ycentre,old_xend,old_yend,0)
    ;   draw V
        line (55,22,63,38):line (63,38,71,22)
    ;   print new voltage
        GLCDPrint (50,10,volts,1) ;print Voltage
    ;   draw new needle
        line (xcentre,ycentre,xend,yend,1)
        wait 20 ms
      end if
    loop
    ;end main


    sub plotdial
      xend = 63 + radius  * sin (angle)/255
      yend = 58 - radius  * cos (angle)/255
      pset (xend,yend,1)
    end sub
    ;
    sub dial
      for angle= 296 to 359
        plotdial
      next angle
    ;
      for angle= 0 to 63
        plotdial
      next angle
    end sub
    ;
    sub anglecheck
      if angle>127 then
        angle =angle-127
      else
        angle =296+angle
      end if
    end sub
