'''
'''******************************************************************
''' LCD demonstration for the board. We have added the LCD section to specific the ports.
''' All the LCD commands are standard Great Cow BASIC LCD commands.
'''
''' The methods used in this demonstration are shown below.
'''
''' rtcc_Initialize - required set intial values
''' rtcc_TimeGet    - MPLAB equivilent method. Return values in global variables as follows:
'''    tm_year, tm_mon, tm_wday, tm_mday, tm_hour, tm_min, tm_sec
''' rtcc_GetFormatted_Value converts byte data to tens and digites ( rtcc_data as byte , out digits , out tens)
''' rtcc_SetClock(hour, minute, second, DOW, date, month, year)
''' rtcc_SetTime(hour, minute, second)
''' rtcc_SetDate(DOW, date, month, year)
''' rtcc_ReadClock(hour, minute, second, a.m.|p.m., DOW, date, month, year)
''' rtcc_ReadTime(hour, minute, second, a.m.|p.m.)
''' rtcc_ReadDate(DOW, date, month, year)
''' rtcc_Enable ( true or false )
''' rtcc_ReadAlarm ( hour, minute, second, DOW, date ). Return values
''' rtcc_SetAlarm ( hour, minute, second, DOW, date )
''' rtcc_SetAlarmMask ( alarmAssertionMatch )
''' rtcc_ClearAlarm  unset the alarm )
''' rtcc_ReStartAlarm  reset an existing alarm
''' rtcc_GetDecimalValue ( value ) return number value in tens and digits
''' rtcc_DecToBcd  Convert pure decimal number to binary coded decimal
''' rtcc_BcdToDec  Convert binary coded decimal to pure decimal
'''
'''************************************************************************
'Chip Settings.
#CHIP 16F19156, 32
#OPTION Explicit

'Generated by PIC PPS Tool for Great Cow Basic
'PPS Tool version: 0.0.5.11
'PinManager data: v1.55
'
'Template comment at the start of the config file
'
#STARTUP InitPPS, 85

Sub InitPPS

    'Module: MSSP1
    'SCL1 > RC3
    RC3PPS = 0x0013
    'RC3 > SCL1 (bi-directional)
    SSP1CLKPPS = 0x0013
    'SDA1 > RC4
    RC4PPS = 0x0014
    'RC4 > SDA1 (bi-directional)
    SSP1DATPPS = 0x0014
    'Module: EUSART1
    'TX1 > RC6
    RC6PPS = 0x000D
    'RC6 > TX1 (bi-directional)
    TX1PPS = 0x0016

End Sub
'Template comment at the end of the config file


'' -------------------PORTA----------------
'' Bit#:  -7---6---5---4---3---2---1---0---
'' IO:    ---|RS |RW | E |D7 |D6 |D5 |D4
''-----------------------------------------
''

'' -------------------PORTB----------------
'' Bit#:  -7---6---5---4---3---2---1---0---
'' IO:    -------| O | A |-------| O | I |-
''-----------------------------------------
''

'' ------------------PORTC-----------------
'' Bit#:  -7---6---5---4---3---2---1---0---
'' IO:    ---| TX| A |-I---I---------------
''-----------------------------------------
''
'USART settings
#DEFINE USART_BAUD_RATE 9600
#DEFINE USART_TX_BLOCKING

#DEFINE LEDD1 PORTB.1
#DEFINE LEDD2 PORTB.5
#DEFINE SwitchIn        PORTB.0

Dir     LEDD1         Out
Dir     LEDD2         Out
Dir     SwitchIn      In

' Define I2C settings
#DEFINE HI2C_BAUD_RATE 100
#DEFINE HI2C_DATA PORTC.4
#DEFINE HI2C_CLOCK PORTC.3

HI2CMode Master

'Initialise I2C - For the MSSP module the ports need to be set to Input
Dir HI2C_DATA In
Dir HI2C_CLOCK In

'''Set up LCD
#DEFINE LCD_IO 10
#DEFINE LCD_I2C_Address_1 0x4E

'You may need to use SLOW or MEDIUM if your LCD is a slower device.
#DEFINE LCD_SPEED SLOW
'You may need to invert these states. Dependent of LCD I2C adapter.
#DEFINE LCD_Backlight_On_State  1
#DEFINE LCD_Backlight_Off_State 0


'RTCC specific setup

#DEFINE  rttc_AlarmPulse porta.1
Dir rttc_AlarmPulse Out
#DEFINE  rttc_AlarmPort porta.0
Dir rttc_AlarmPort Out
rttc_AlarmPort = 0


#DEFINE LEDD1 PORTB.1
#DEFINE SwitchIn        PORTB.0

Dir     LEDD1         Out
Dir     SwitchIn      In


'*****************************************************************************************************
'Main program commences here.. everything before this is setup for the board.

#DEFINE rtcc_Calibration_Offset 0

'SETUP THE RTCC
rtcc_Initialize
' every 4th second
rtcc_SetAlarm( 0 , 0 , 4 , 0, 0, 0 )
rtcc_SetAlarmMark ( rtcc_AlarmAssertion_EverySecond )
On Interrupt RTCAlarmTrigger Call rttc_Interrupt

'MAIN LOOP VARIABLES
Dim Secs As Byte
Dim OldSecs As Byte
Dim Digits As Byte
Dim Tens As Byte
OldSecs = 0

Do

    If seconds <> oldsecs Then

        'Use a generic approach to display information on the serial terminal and the LCD
        'Hours
        rtcc_GetFormatted_Value ( Hours, digits, tens )
        HSerPrint Tens
        HSerPrint Digits
        HSerPrint ":"
        Locate 0,0
        Print Tens
        Print Digits
        Print ":"

        'Minutes
        rtcc_GetFormatted_Value ( Minutes , digits, tens )
        HSerPrint Tens
        HSerPrint Digits
        HSerPrint ":"
        Print Tens
        Print Digits
        Print ":"

        'Seconds
        rtcc_GetFormatted_Value ( Seconds , digits, tens )
        HSerPrint Tens
        HSerPrint Digits
        HSerSend 9
        Print Tens
        Print Digits

        Oldsecs = Seconds
        Tens = 0
        Digits = 0
    End If

    'Use a similar approach to MPLAB to display information on the serial terminal and the LCD
    If rtcc_TimeGet = TRUE Then
        HSerPrint tm_mday
        HSerPrint ":"
        HSerPrint tm_mon
        HSerPrint ":"
        HSerPrint tm_year
        HSerPrint " "
        HSerPrint tm_hour
        HSerPrint ":"
        HSerPrint tm_min
        HSerPrint ":"
        HSerPrint tm_sec
        HSerPrint " ("
        HSerPrint tm_wday
        HSerPrint ")"
        HSerPrintCRLF


        Locate 1,0
        Print tm_mday
        Print ":"
        Print tm_mon
        Print ":"
        Print tm_year
        Print " ("
        Print tm_wday
        Print ")"

    End If

Loop


'************************* RTCC Library Functions ****************************************************
' You should not change below here.


#DEFINE rtcc_AlarmAssertion_EveryHalfSecond                     0x04
#DEFINE rtcc_AlarmAssertion_EverySecond                         0x05
#DEFINE rtcc_AlarmAssertion_EveryTenSeconds                     0x06
#DEFINE rtcc_AlarmAssertion_EveryMinute                         0x07
#DEFINE rtcc_AlarmAssertion_EveryTenMinutes                     0x08
#DEFINE rtcc_AlarmAssertion_EveryHour                           0x09
#DEFINE rtcc_AlarmAssertion_OnceADay                            0x0A
#DEFINE rtcc_AlarmAssertion_OnceAWeek                           0x0B
#DEFINE rtcc_AlarmAssertion_OnceAMonth                          0x0C
#DEFINE rtcc_AlarmAssertion_OnceAYear                           0x0D




Sub rtcc_Initialize
    Dim  rtccTimeInitialized  As BIT
    rtccTimeInitialized  = FALSE


'    ---------     IMPORTANT ! -----------------
    '//  If RTCEN bit is set at same time or before
    '//  RTCWREN bit, then rtcc will not start


    'In order to be able to write the Write Enable(WREN) bit for rtcc you neet to enable EEPROM writing
    'it is strongly recommended to disable interrupts during this code segment
    IntOff
    'Wait stabilisation
    Wait 1 s
    'POR  Default
    RTCCON.rtccLKSEL0 = 0
    'POR Default
    RTCCON.rtccLKSEL1 = 0
    'MUST Write this bit before RTCEN
    RTCCON.RTCWREN = 1
    'Wait for SOSC to stabilise
    Wait 100 ms

    If ( rtccTimeInitialized = FALSE ) Then
        HSerPrint "rtccTimeInitialized = false"
        HSerPrintCRLF
        'set rtcc time 2017-10-28 12-13-22
        ' year
        YEAR     = 0x17
        ' month
        MONTH    = 0x12
        ' weekday
        WEEKDAY  = 0x04
        ' day
        DAY      = 0x14
        ' hours
        HOURS    = 0x23
        ' minutes
        MINUTES  = 0x59
        ' seconds
        SECONDS  = 0x58
        rtccTimeInitialized = TRUE

    End If
    'calibration register
    rtccAL = rtcc_Calibration_Offset
    'Enable rtcc, clear RTCWREN
    RTCCON.RTCEN = 1
    Wait While RTCCON.RTCSYNC = 0
    RTCCON.RTCWREN = 0
    IntOn
End Sub



' This function implements rtcc_TimeGet. It access the
' registers of  rtcc and writes to them the values provided
' in a time structure.

Dim tm_year As Word
Dim tm_mon, tm_wday, tm_mday, tm_hour, tm_min, tm_sec As Byte
Function rtcc_TimeGet


    If ( RTCCON.RTCSYNC = 0 ) Then
        rtcc_TimeGet =  FALSE
        Exit Function
    End If

    'Set the RTCWREN bit
    RTCCON.RTCWREN = 1

    'get year
    tm_year    = ConcatInt( 20, rtcc_BcdToDec(YEAR) )
    'get month
    tm_mon     = rtcc_GetDecimalValue(MONTH)
    ' get weekday
    tm_wday    = rtcc_GetDecimalValue(WEEKDAY)
    'get day
    tm_mday    = rtcc_GetDecimalValue(DAY)
    'get hour
    tm_hour    = rtcc_GetDecimalValue(HOURS)
    'get minutes
    tm_min     = rtcc_GetDecimalValue(MINUTES)
    'get seconds
    tm_sec     = rtcc_GetDecimalValue(SECONDS)

    RTCCON.RTCWREN = 0
    rtcc_TimeGet = TRUE

End Function

Sub rtcc_getFormatted_Value ( In rtcc_data As Byte , Out digits As Byte , Out tens  As Byte )

    Digits = rtcc_data AND 0b00001111
    Tens.0 = rtcc_data.4
    Tens.1 = rtcc_data.5
    Tens.2 = rtcc_data.6

End Sub

' Set the clock
Sub rtcc_setClock(In DS_Hour, In DS_Min, In DS_Sec, In DS_DOW, In DS_Date, In DS_Month, In DS_Year)

    '    ---------     IMPORTANT ! -----------------
    'If RTCEN bit is set at same time or before
    'RTCWREN bit, then rtcc will not start

    'In order to be able to write the Write Enable(WREN) bit for rtcc you neet to enable EEPROM writing
    'it is strongly recommended to disable interrupts during this code segment
    IntOff
    'Wait stabilisation
    Wait 1 s
    'POR  Default
    RTCCON.rtccLKSEL0 = 0
    'POR Default
    RTCCON.rtccLKSEL1 = 0
    'MUST Write this bit before RTCEN
    RTCCON.RTCWREN = 1
    'Wait for SOSC to stabilise
    Wait 100 ms

    ' year
    YEAR     = DS_Year
    ' month
    MONTH    = DS_Month
    ' weekday
    WEEKDAY  = DS_DOW
    ' day
    DAY      = DS_Date
    ' hours
    HOURS    = DS_Hour
    ' minutes
    MINUTES  = DS_Min
    ' seconds
    SECONDS  = DS_Sec
    rtccTimeInitialized = TRUE

    'Enable rtcc, clear RTCWREN
    RTCCON.RTCEN = 1
    Wait While RTCCON.RTCSYNC = 0
    RTCCON.RTCWREN = 0
    IntOn
End Sub

' Set the time
Sub rtcc_SetTime(In DS_Hour, In DS_Min, In DS_Sec)

    '    ---------     IMPORTANT ! -----------------
    'If RTCEN bit is set at same time or before
    'RTCWREN bit, then rtcc will not start

    'In order to be able to write the Write Enable(WREN) bit for rtcc you neet to enable EEPROM writing
    'it is strongly recommended to disable interrupts during this code segment
    IntOff
    'Wait stabilisation
    Wait 1 s
    'POR  Default
    RTCCON.rtccLKSEL0 = 0
    'POR Default
    RTCCON.rtccLKSEL1 = 0
    'MUST Write this bit before RTCEN
    RTCCON.RTCWREN = 1
    'Wait for SOSC to stabilise
    Wait 100 ms

    ' hours
    HOURS    = DS_Hour
    ' minutes
    MINUTES  = DS_Min
    ' seconds
    SECONDS  = DS_Sec
    rtccTimeInitialized = TRUE

    'Enable rtcc, clear RTCWREN
    RTCCON.RTCEN = 1
    Wait While RTCCON.RTCSYNC = 0
    RTCCON.RTCWREN = 0
    IntOn
End Sub

' Set the date
Sub rtcc_setDate(In DS_DOW, DS_Date, In DS_Month, In DS_Year)

    '    ---------     IMPORTANT ! -----------------
    'If RTCEN bit is set at same time or before
    'RTCWREN bit, then rtcc will not start

    'In order to be able to write the Write Enable(WREN) bit for rtcc you neet to enable EEPROM writing
    'it is strongly recommended to disable interrupts during this code segment
    IntOff
    'Wait stabilisation
    Wait 1 s
    'POR  Default
    RTCCON.rtccLKSEL0 = 0
    'POR Default
    RTCCON.rtccLKSEL1 = 0
    'MUST Write this bit before RTCEN
    RTCCON.RTCWREN = 1
    'Wait for SOSC to stabilise
    Wait 100 ms

    ' year
    YEAR     = DS_Year
    ' month
    MONTH    = DS_Month
    ' weekday
    WEEKDAY  = DS_DOW
    ' day
    DAY      = DS_Date
    rtccTimeInitialized = TRUE

    'Enable rtcc, clear RTCWREN
    RTCCON.RTCEN = 1
    Wait While RTCCON.RTCSYNC = 0
    RTCCON.RTCWREN = 0
    IntOn
End Sub

' Read the clock
Sub rtcc_ReadClock(Out tm_hour, Out tm_min, Out tm_sec, Out tm_wday, Out tm_mday, Out tm_mon, Out tm_year)
    'Read entire clock: hours, minutes, seconds, day of week, date, month, year

    If ( RTCCON.RTCSYNC = 0 ) Then
        rtcc_TimeGet =  FALSE
    End If

    'Set the RTCWREN bit
    RTCCON.RTCWREN = 1

    'get year
    tm_year    = ConcatInt( 20, rtcc_BcdToDec(YEAR) )
    'get month
    tm_mon     = rtcc_GetDecimalValue(MONTH)
    ' get weekday
    tm_wday    = rtcc_GetDecimalValue(WEEKDAY)
    'get day
    tm_mday    = rtcc_GetDecimalValue(DAY)
    'get hour
    tm_hour    = rtcc_GetDecimalValue(HOURS)
    'get minutes
    tm_min     = rtcc_GetDecimalValue(MINUTES)
    'get seconds
    tm_sec     = rtcc_GetDecimalValue(SECONDS)

    RTCCON.RTCWREN = 0
    rtcc_TimeGet = TRUE

End Sub

' Read the time
Sub rtcc_Readtime(Out tm_hour, Out tm_min, Out tm_sec)
    'Read entire clock: hours, minutes, seconds, day of week, date, month, year

    If ( RTCCON.RTCSYNC = 0 ) Then
        rtcc_TimeGet =  FALSE
    End If

    'Set the RTCWREN bit
    RTCCON.RTCWREN = 1
    tm_hour    = rtcc_GetDecimalValue(HOURS)
    'get minutes
    tm_min     = rtcc_GetDecimalValue(MINUTES)
    'get seconds
    tm_sec     = rtcc_GetDecimalValue(SECONDS)

    RTCCON.RTCWREN = 0
    rtcc_TimeGet = TRUE

End Sub


' Read the date
Sub rtcc_ReadDate(Out tm_wday, Out tm_mday, Out tm_mon, Out tm_year)
    'Read entire clock: hours, minutes, seconds, day of week, date, month, year

    If ( RTCCON.RTCSYNC = 0 ) Then
        rtcc_TimeGet =  FALSE
    End If

    'Set the RTCWREN bit
    RTCCON.RTCWREN = 1

    'get year
    tm_year    = ConcatInt( 20, rtcc_BcdToDec(YEAR) )
    'get month
    tm_mon     = rtcc_GetDecimalValue(MONTH)
    ' get weekday
    tm_wday    = rtcc_GetDecimalValue(WEEKDAY)
    'get day
    tm_mday    = rtcc_GetDecimalValue(DAY)
    RTCCON.RTCWREN = 0
    rtcc_TimeGet = TRUE

End Sub

' Enable the RTCC
Sub rtcc_Enable ( In rtcc_data )

    'MUST Write this bit before RTCEN
    RTCCON.RTCWREN = 1
    'Enable /Disable rtcc, clear RTCWREN
    RTCCON.RTCEN = rtcc_data.0
    Wait While RTCCON.RTCSYNC = 0
    RTCCON.RTCWREN = 0

End Sub

' Read the Alarm settings
Sub rtcc_ReadAlarm( Out tm_Hour, Out tm_Min, Out tm_Sec, Out tm_wday, Out tm_mday, Out tm_mon )


    If ( RTCCON.RTCSYNC = 0 ) Then
        rtcc_TimeGet =  FALSE
    End If

    'Set the RTCWREN bit
    RTCCON.RTCWREN = 1

    'get month
    tm_mon     = rtcc_GetDecimalValue(ALRMMTH)
    ' get weekday
    tm_wday    = rtcc_GetDecimalValue(ALRMWD)
    'get day
    tm_mday    = rtcc_GetDecimalValue(ALRMDAY)
    'get hour
    tm_hour    = rtcc_GetDecimalValue(ALRMHR)
    'get minutes
    tm_min     = rtcc_GetDecimalValue(ALRMMIN)
    'get seconds
    tm_sec     = rtcc_GetDecimalValue(ALRMSEC)

    RTCCON.RTCWREN = 0
    rtcc_TimeGet = TRUE

End Sub

'Set the alarm
Sub rtcc_SetAlarm( In tm_Hour, In tm_Min, In tm_Sec, In tm_DOW, In tm_Date, In tm_month )

    ALRMCON.ALRMEN = 0
    ' month
    ALRMMTH     = tm_Month
    ' weekday
    ALRMWD      = tm_DOW
    ' day
    ALRMDAY     = tm_Date
    ' hours
    ALRMHR      = tm_Hour
    ' minutes
    ALRMMIN     = tm_Min
    ' seconds
    ALRMSEC     = tm_Sec
    ALRMCON.ALRMEN = 1

End Sub

'Set the alarm mask
Sub rtcc_SetAlarmMark ( In rtcc_data )

    AMASK0 = rtcc_data.0
    AMASK1 = rtcc_data.1
    AMASK2 = rtcc_data.2
    AMASK3 = rtcc_data.3

End Sub

'Clear the alarm
Sub rtcc_ClearAlarm
    ALRMCON.ALRMEN = 0
End Sub

'Restart the alarm
Sub rtcc_ReStartAlarm
    ALRMCON.ALRMEN = 1
End Sub

'Get the decimal value of register
Function rtcc_GetDecimalValue ( In rtcc_data ) As Word

    Dim rtcc_Digits, rtcc_Tens As Byte

    rtcc_Digits = rtcc_data AND 0b00001111
    rtcc_Tens.0 = rtcc_data.4
    rtcc_Tens.1 = rtcc_data.5
    rtcc_Tens.2 = rtcc_data.6
    rtcc_GetDecimalValue =  ConcatInt( rtcc_Tens, rtcc_Digits )

End Function

'Concat to numbers
Function ConcatInt( uint1 As Word, uint2) As Word

    Dim ConcatInt_temp As Word
    ConcatInt_temp = 1

    If (uint2 = 0) Then

        If ( uint1 =  20)  Then
            'if the result is about the year

            ConcatInt_temp = 100

        Else

            ConcatInt_temp = 10

        End If

    End If


    While ( ConcatInt_temp <= uint2 )

    ConcatInt_temp = ConcatInt_temp * 10

Loop

ConcatInt = [Word]( [Word]uint1 * [Word]ConcatInt_temp ) + uint2

End Function

'Convert pure decimal number to binary coded decimal
Function rtcc_DecToBcd(In va ) As Byte
    rtcc_DecToBcd=( va /10)*16+ va %10
End Function

'Convert binary coded decimal to pure decimal
Function rtcc_BcdToDec(In va ) As Byte
    rtcc_BcdToDec=( va /16)*10+ va %16
End Function

'Handle the interrupt
Sub rttc_Interrupt
    'Clear the Interrupt
    RTCCIF = 0
    rttc_AlarmPort = !rttc_AlarmPort
    rtcc_ReStartAlarm
End Sub
