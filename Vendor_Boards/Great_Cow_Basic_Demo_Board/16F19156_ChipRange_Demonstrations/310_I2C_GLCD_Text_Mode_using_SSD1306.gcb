'''A demonstration program for GCGB and GCB.
'''--------------------------------------------------------------------------------------------------------------------------------
'''This program demonstrates the basic primatives of a Graphical LCD (GLCD)
'''
'''
'''This program uses the Text Mode GLCD - this means the microcontroller does not require a large amount of RAM.
'''There are two other demonstration programs that show how memory usage is is used when using GLCD.
'''
'''This program when compiles uses about ~90 bytes (total) of RAM. Compare this to the other GLCD modes of operation.
'''With this mode you cannot use the graphical methods such as Circle, line etc.
'''
'''   Add the define below, to your program, to enable Text mode of operations
'''   #define GLCD_TYPE_SSD1306_CHARACTER_MODE_ONLY
'''
'''
'''
'''@author  EvanV
'''@licence GPL
'''@version 1.02a includes OLED Fonts
'''@date    13.09.2017
'''********************************************************************************
'''
'''  PIC: 18f26k22
'''  Compiler: GCB
'''  IDE: GCB@SYN
'''
'''  Board: Great Cow BASIC Board
'''  Date: 29.8.17
'''
' ----- Configuration
'Chip Settings.
#CHIP 16F19156, 32

#OPTION Explicit

'Generated by PIC PPS Tool for Great Cow Basic
'PPS Tool version: 0.0.5.11
'PinManager data: v1.55
'
'Template comment at the start of the config file
'
#STARTUP InitPPS, 85

Sub InitPPS

    'Module: MSSP1
    'SCL1 > RC3
    RC3PPS = 0x0013
    'RC3 > SCL1 (bi-directional)
    SSP1CLKPPS = 0x0013
    'SDA1 > RC4
    RC4PPS = 0x0014
    'RC4 > SDA1 (bi-directional)
    SSP1DATPPS = 0x0014
    'Module: EUSART1
    'TX1 > RC6
    RC6PPS = 0x000D
    'RC6 > TX1 (bi-directional)
    TX1PPS = 0x0016

End Sub
'Template comment at the end of the config file


'' -------------------PORTA----------------
'' Bit#:  -7---6---5---4---3---2---1---0---
'' IO:    ---|RS |RW | E |D7 |D6 |D5 |D4
''-----------------------------------------
''

'' -------------------PORTB----------------
'' Bit#:  -7---6---5---4---3---2---1---0---
'' IO:    -------| O | A |-------| O | I |-
''-----------------------------------------
''

'' ------------------PORTC-----------------
'' Bit#:  -7---6---5---4---3---2---1---0---
'' IO:    ---| TX| A |-I---I---------------
''-----------------------------------------
''


#DEFINE LEDD1 PORTB.1
#DEFINE LEDD2 PORTB.5
#DEFINE SwitchIn        PORTB.0
#DEFINE LDR             PORTA.4

Dir     LEDD1         Out
Dir     LEDD2         Out
Dir     SwitchIn      In
'this is the ANB4 port
Dir     LDR           In

' Define I2C settings
#DEFINE HI2C_BAUD_RATE 100
#DEFINE HI2C_DATA PORTC.4
#DEFINE HI2C_CLOCK PORTC.3

HI2CMode Master

'Initialise I2C - For the MSSP module the ports need to be set to Input
Dir HI2C_DATA In
Dir HI2C_CLOCK In

#INCLUDE <glcd.h>
#DEFINE GLCD_TYPE GLCD_TYPE_SSD1306
#DEFINE GLCD_I2C_Address 0x78

'These constants allow you to change the GLCD memory usage.
#DEFINE GLCD_PROTECTOVERRUN
'*******************************************************************************************
#DEFINE GLCD_OLED_FONT
'Add this define to enable Text mode of operations
#DEFINE GLCD_TYPE_SSD1306_CHARACTER_MODE_ONLY

Dim myString As String * 28
myString = "Great Cow BASIC 2017"

'Set the LED states
LEDD1 = 1
LEDD2 = 0

'we have change to a larger variable to hold the range of 0 to 1023
Dim ADCVal As Word

GLCDfntDefaultSize = 2
GLCDPrint(0, 0,"Great")
GLCDPrint(36, 17,"Cow")
GLCDPrint( 54 , 33,"BASIC")
GLCDPrint( 0 , 49,"V0.98 @ 2017")
Wait 4 s

Do


    GLCDfntDefaultSize = 2
    GLCDPrint(0, 0,"Great")
    GLCDPrint(36, 17,"Cow")
    GLCDPrint( 54 , 33,"BASIC")
    GLCDPrint( 0 , 49,"V0.98 @ 2017")
    Wait 1 s

    GLCDCLS
    GLCDDrawString(20, 16,"Extensive")
    GLCDDrawString(20, 32,"Libraries")
    GLCDfntDefaultSize = 1
    GLCDPrint(20, 48,"https://goo.gl/gjrxkp")
    GLCDDrawString(20, 56,myString)



    ADCVal =  ReadAD10 ( AN17 )
    'Wait for the number of milliseconds
    Wait ADCVal ms

    'Flip the state of the LEDs
    LEDD1 = NOT LEDD1
    LEDD2 = NOT LEDD2

    Wait 1 s
    GLCDCLS

Loop
