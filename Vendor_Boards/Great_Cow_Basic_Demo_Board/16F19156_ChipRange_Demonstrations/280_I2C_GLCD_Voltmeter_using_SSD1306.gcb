'''A demonstration program for GCGB and GCB.
'''--------------------------------------------------------------------------------------------------------------------------------
'''This program demonstrates the basic primatives a voltmeter on a Graphical LCD (GLCD)
''':
'''You can change the microcontroller, the GLCD and the analogue port.
'''
'''To change the microcontroller simply change the #chip statement
'''To change the GLCD replace GLCD definition
'''To change the analogue port change the ADCChannelSelected constant
'''
''':
'''@author  StanC and EvanV
'''@licence GPL
'''@version 1.01a
'''@date    31.08.2017
'''********************************************************************************
'''
'''  PIC: 18f26k22
'''  Compiler: GCB
'''  IDE: GCB@SYN
'''
'''  Board: Great Cow BASIC Board
'''  Date: 29.8.17
'''
' ----- Configuration
'Chip Settings.
#CHIP 16F19156, 32

#OPTION Explicit

'Generated by PIC PPS Tool for Great Cow Basic
'PPS Tool version: 0.0.5.11
'PinManager data: v1.55
'
'Template comment at the start of the config file
'
#STARTUP InitPPS, 85

Sub InitPPS

    'Module: MSSP1
    'SCL1 > RC3
    RC3PPS = 0x0013
    'RC3 > SCL1 (bi-directional)
    SSP1CLKPPS = 0x0013
    'SDA1 > RC4
    RC4PPS = 0x0014
    'RC4 > SDA1 (bi-directional)
    SSP1DATPPS = 0x0014
    'Module: EUSART1
    'TX1 > RC6
    RC6PPS = 0x000D
    'RC6 > TX1 (bi-directional)
    TX1PPS = 0x0016

End Sub
'Template comment at the end of the config file


'' -------------------PORTA----------------
'' Bit#:  -7---6---5---4---3---2---1---0---
'' IO:    ---|RS |RW | E |D7 |D6 |D5 |D4
''-----------------------------------------
''

'' -------------------PORTB----------------
'' Bit#:  -7---6---5---4---3---2---1---0---
'' IO:    -------| O | A |-------| O | I |-
''-----------------------------------------
''

'' ------------------PORTC-----------------
'' Bit#:  -7---6---5---4---3---2---1---0---
'' IO:    ---| TX| A |-I---I---------------
''-----------------------------------------
''


#DEFINE LEDD1 PORTB.1
#DEFINE LEDD2 PORTB.5
#DEFINE SwitchIn        PORTB.0
#DEFINE LDR             PORTA.4

Dir     LEDD1         Out
Dir     LEDD2         Out
Dir     SwitchIn      In
'this is the ANB4 port
Dir     LDR           In

' Define I2C settings
#DEFINE HI2C_BAUD_RATE 100
#DEFINE HI2C_DATA PORTC.4
#DEFINE HI2C_CLOCK PORTC.3

HI2CMode Master

'Initialise I2C - For the MSSP module the ports need to be set to Input
Dir HI2C_DATA In
Dir HI2C_CLOCK In

#INCLUDE <glcd.h>
#DEFINE GLCD_TYPE GLCD_TYPE_SSD1306
#DEFINE GLCD_I2C_Address 0x78

#INCLUDE <trig2places.h>


'These constants allow you to change the GLCD memory usage.
#DEFINE GLCD_PROTECTOVERRUN
'*******************************************************************************************



'analogue port selection
#DEFINE ADCChannelSelected ANB4

#DEFINE ADSpeed LowSpeed

Dim radius,xcentre,ycentre,xend,old_xend,yend,old_yend As Byte
Dim angle,old_angle,adcval As Word
Dim volts As String * 4
xcentre=63
ycentre=58
'draw dial
GLCDCLS
Box 0,0,127,63
For radius=144 To 141
    dial
Next radius
GLCDDrawChar (5,40,Asc("0")):GLCDDrawChar (115,40,Asc("5"))
radius=120
angle=1
anglecheck
'main
Do
    old_angle=angle
    '--- DVM
    adcval=ReadAD(ADCChannelSelected)
    angle=adcval/2
    '
    adcval=adcval*100
    adcval=adcval/51
    volts=Str(adcval)
    If adcval<10 Then
        volts="0.0"+Left(volts,1,1)
        Goto volt_format_done
    End If
    If adcval<100 Then
        volts="0."+Mid(volts,1,2)
    Else
        volts=Left(volts,1,1)+"."+Mid(volts,2,2)
    End If
volt_format_done:
    '---
    anglecheck
    old_xend = xcentre + radius  * sin (old_angle)/255
    old_yend = ycentre - radius  * cos (old_angle)/255
    xend = xcentre + radius  * sin (angle)/255
    yend = ycentre - radius  * cos (angle)/255
    If old_angle<>angle Then
        '-- update screen if volts has changed
        '   erase old needle
        
        Line (xcentre,ycentre,old_xend,old_yend,0)
        '   draw V
        Line (55,22,63,38):Line (63,38,71,22)
        '   print new voltage
        'print Voltage
        GLCDPrint (50,10,volts,1)
        '   draw new needle
        Line (xcentre,ycentre,xend,yend,1)
        Wait 20 ms
    End If
Loop
'end main


Sub plotdial
    xend = 63 + radius  * sin (angle)/255
    yend = 58 - radius  * cos (angle)/255
    Pset (xend,yend,1)
End Sub
'
Sub dial
    For angle= 296 To 359
        plotdial
    Next angle
    '
    For angle= 0 To 63
        plotdial
    Next angle
End Sub
'
Sub anglecheck
    If angle>127 Then
        angle =angle-127
    Else
        angle =296+angle
    End If
End Sub
