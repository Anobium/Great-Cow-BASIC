'''
'''******************************************************************
'''
''' Pulse-Width Modulation (PWM) is a scheme that provides power to a load by switching
''' quickly between fully on and fully off states. The PWM signal resembles a square wave
''' where the high portion of the signal is considered the on state and the low portion of
''' the signal is considered the off state. The high portion, also known as the pulse width,
''' can vary in time and is defined in steps. A longer, high on time will illuminate the LED
''' brighter. The frequency or period of the PWM does not change.
'''
''' This program demostrates a method where the number of steps applied,
''' which lengthens the pulse width are calculated in an Interrupt routine.
''' The PWM period defined as the duration of one complete cycle or the total
''' amount of on and off time combined is based on a simple counter.
'''
''' The demo varies the PWM to the LED based upon the light level failing on the LDR.
'''  The duty cycle is set by the returned value from the LDR but by using PPS we can control two LEDs!
'''
'''************************************************************************
' ----- Configuration
'Chip Settings.
#CHIP 16F19156, 32

#OPTION Explicit

'Generated by PIC PPS Tool for Great Cow Basic
'PPS Tool version: 0.0.5.11
'PinManager data: v1.55
'
'Template comment at the start of the config file
'
#STARTUP InitPPS, 85

Sub InitPPS

    'Module: CCP1
    'CCP1 > RB1
    RB1PPS = 0x0009
    'RB1 > CCP1 (bi-directional)
    CCP1PPS = 0x0009
    'CCP1 > RB5
    RB5PPS = 0x0009
    'RB5 > CCP1 (bi-directional)
    CCP1PPS = 0x000D

End Sub
'Template comment at the end of the config file


'' -------------------PORTA----------------
'' Bit#:  -7---6---5---4---3---2---1---0---
'' IO:    ---|RS |RW | E |D7 |D6 |D5 |D4
''-----------------------------------------
''

'' -------------------PORTB----------------
'' Bit#:  -7---6---5---4---3---2---1---0---
'' IO:    -------| O | A |-------| O | I |-
''-----------------------------------------
''

'' ------------------PORTC-----------------
'' Bit#:  -7---6---5---4---3---2---1---0---
'' IO:    ---| TX| A |-I---I---------------
''-----------------------------------------
''


#DEFINE LEDD1 PORTB.1
#DEFINE LEDD2 PORTB.5
#DEFINE SwitchIn        PORTB.0
#DEFINE LDR             PORTA.4

Dir     LEDD1         Out
Dir     LEDD2         Out
Dir     SwitchIn      In
'this is the ANB4 port
Dir     LDR           In

'*****************************************************************************************************
'Main program commences here.. everything before this is setup for the board.


'Using ADC value to the CCP/PWM
Do

    'HPWM channel, frequency, duty cycle
    HPWM 1, 40, ReadAD( ANB4 )
    Wait 10 ms

Loop


'Code optimisation

'  This is used so include in the compiled code
#DEFINE USE_HPWMCCP1 TRUE
' This is not used so optimise
#DEFINE USE_HPWMCCP2 FALSE
' This is not used so optimise
#DEFINE USE_HPWMCCP3 FALSE
' This is not used so optimise
#DEFINE USE_HPWMCCP4 FALSE
' This is not used so optimise
#DEFINE USE_HPWMCCP5 FALSE

' This is used so include in the compiled code
#DEFINE USE_HPWM_TIMER2 TRUE
#DEFINE USE_HPWM_TIMER4 FALSE
#DEFINE USE_HPWM_TIMER6 FALSE
#DEFINE USE_HPWM_TIMER7 FALSE
