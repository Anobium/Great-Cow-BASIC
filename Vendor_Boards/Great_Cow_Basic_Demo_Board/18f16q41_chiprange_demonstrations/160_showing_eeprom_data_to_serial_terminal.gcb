'''
'''  This demonstration shows the EEProm values on the Serial Terminal.
'''
''' This lesson will provide code for writing and reading a single byte onto
''' the on-board EEPROM. EEPROM is non-volatile memory, meaning that it does
''' not lose its value when power is shut off. This is unlike RAM, which will
''' lose its value when no power is applied. The EEPROM is useful for storing
''' variables that must still be present during no power.
''' It is also convenient to use if the entire RAM space is used up.
''' Writes and reads to the EEPROM are practically instant and are much faster
''' than program memory operations.

''' This will show the value of the EEPROM on the serial Terminal.
''' You can experiment by changing the variable 'Outdata' from Random function to a specific range.  Enjoy.
'''
'''************************************************************************
'''@author  EvanV
'''@licence GPL
'''@version 1.01
'''@date    31.12.2020
' ----- Configuration

'Chip Settings.
#CHIP 18F16Q41
#OPTION Explicit

    'Generated by PIC PPS Tool for Great Cow Basic
    'PPS Tool version: 0.0.6.1
    'PinManager data: v1.79.0
    'Generated for 18F16Q41
    '
    'Template comment at the start of the config file
    '
    #startup InitPPS, 85
    #define PPSToolPart 18F16Q41

    Sub InitPPS

            'Module: UART pin directions
            Dir PORTC.6 Out    ' Make TX1 pin an output
            'Module: UART1
            RC6PPS = 0x0010    'TX1 > RC6

    End Sub
    'Template comment at the end of the config file


'' -------------------PORTA----------------
'' Bit#:  -7---6---5---4---3---2---1---0---
'' IO:   -------------ADC-RST--------------
''-----------------------------------------
''

'' -------------------PORTB----------------
'' Bit#:  -7---6---5---4---3---2---1---0---
'' IO:    ---------------------------------
''-----------------------------------------
''

'' ------------------PORTC-----------------
'' Bit#:  -7---6---5---4---3---2---1---0---
'' IO:    ----TX-----LED--LED-LED LED-SW---
''-----------------------------------------

'Define constants to make things easier. We can reuse these at any time.
#DEFINE LEDPORT LATC


Dir     RC1         Out
Dir     RC2         Out
Dir     RC3         Out
Dir     RC4         Out

#DEFINE POTENTIOMETER PORTA.4
Dir     POTENTIOMETER In
#DEFINE SWITCHIN      PORTC.0
Dir     SWITCHIN      In

'Setup Serial port
#DEFINE USART_BAUD_RATE 9600
#DEFINE USART_TX_BLOCKING


'*****************************************************************************************************
'Main program commences here.. everything before this is setup for the board.
' Now assumes Serial Terminal is operational


Dim DisplayNewLine, Outdata, Indata  As Byte
Dim EEPromAddress as Word
Do Forever

    HSerPrintCRLF
    HSerPrint "EEPROM Test and Show EEProm Results"
    HSerPrintCRLF 2

    Set RC1 Off
    Set RC2 Off


    HSerPrint "     "
    For EEPromAddress = 0 To 15
        HSerPrint Hex(EEPromAddress)
        HSerPrint " "
    Next

    For EEPromAddress = 0 To ChipEEProm -1
        DisplayNewLine = EEPromAddress % 16
        If DisplayNewLine = 0 Then
            HSerPrintCRLF
            HSerPrint Hex(EEPromAddress)
            HSerPrint ": "
        End If
        HSerPrint " "

        Outdata = Random
        'Outdata = 0x55    'If you DON'T believe put your own value here!
        'Outdata = 255 - EEPromAddress    'If you DON'T believe put your own value here!

        'Writes
        EPWrite ( EEPromAddress, Outdata )
        'Reads
        EPRead  ( EEPromAddress, Indata )

        If Outdata = Indata Then
            HSerPrint  Hex(Indata)
        Else
            HSerPrint  "--"
        End If

    Next

    HSerPrintCRLF 2
    HSerPrint   "End of EEProm Program and Display"
    HSerPrintCRLF 2
    Set RC2 On
    Set RC1 On

    Wait While SwitchIn = Off
Loop
End
