'''
'''  This demonstration shows reading PROGMEM on the Serial Terminal.
'''
'''************************************************************************
'''@author  EvanV
'''@licence GPL
'''@version 1.01
'''@date    31.12.2020
' ----- Configuration

#CHIP 18F16Q41
#OPTION Explicit

    'Generated by PIC PPS Tool for Great Cow Basic
    'PPS Tool version: 0.0.6.1
    'PinManager data: v1.79.0
    'Generated for 18F16Q41
    '
    'Template comment at the start of the config file
    '
    #startup InitPPS, 85
    #define PPSToolPart 18F16Q41

    Sub InitPPS

            'Module: UART pin directions
            Dir PORTC.6 Out    ' Make TX1 pin an output
            'Module: UART1
            RC6PPS = 0x0010    'TX1 > RC6

    End Sub
    'Template comment at the end of the config file

'' -------------------PORTA----------------
'' Bit#:  -7---6---5---4---3---2---1---0---
'' IO:    ---------------------------------
''-----------------------------------------
''

'' -------------------PORTB----------------
'' Bit#:  -7---6---5---4---3---2---1---0---
'' IO:    --------IN-LED--LED-LED LED -----
''-----------------------------------------
''

'' ------------------PORTC-----------------
'' Bit#:  -7---6---5---4---3---2---1---0---
'' IO:    ----TX---------------------------
''-----------------------------------------
''

'' ------------------PORTE-----------------
'' Bit#:  -7---6---5---4---3---2---1---0---
'' IO:    ----------------RST--------------
''-----------------------------------------
''


'Setup Serial port
#DEFINE USART_BAUD_RATE 9600
#DEFINE USART_TX_BLOCKING


'*****************************************************************************************************
'Main program commences here.. everything before this is setup for the board.
' Now assumes Serial Terminal is operational

Dim  PFMAddress as long
Dim  DataWord as word

wait 1 s
HSerPrintCRLF 2

HSerPrint "Read Address"
HSerSend 9
HSerPrint "Received"
HSerPrintCRLF

'We are sending words, so we send the PFMAddress address every two bytes (a word).
for PFMAddress = 0x0 to 0xF step 2
    'Write the value of the PFMAddress to the PFM - this just masks off the high byte (0xFF00)
    DataWord = (PFMAddress and 0x00FF)

    'Display the value
    HSerPrint "0x"
    HSerPrint hex(PFMAddress_h)
    HSerPrint hex(PFMAddress)
    HSerSend 9
    HSerSend 9

    'Read the value of the PFMAddress to the PFM
    'PFMRead  ( PFMAddress, DataWord )
    DataWord = PFMReadWord  ( PFMAddress)

    'Display the received value
    HSerPrint "0x"
    HSerPrint hex(DataWord_h)
    HSerPrint hex(DataWord)
    HSerPrintCRLF

Next
HSerPrintCRLF

do
loop

