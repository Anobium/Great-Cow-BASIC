'''
'''  This demonstration shows the impact of the time delay to manage the debouncing of a switch.
'''  The ADC value creates a delay and LEDs switch between each other when the switch is depressed.
'''
'''
'''  Press the switch to reverse the direction of the LEDs, increase the ADC value to increase the debounce check.
'''
'''************************************************************************
'''@author  EvanV
'''@licence GPL
'''@version 1.01
'''@date    31.12.2020
' ----- Configuration

'Chip Settings.
#CHIP 18F16Q41
#OPTION Explicit



'' -------------------PORTA----------------
'' Bit#:  -7---6---5---4---3---2---1---0---
'' IO:   ---------------------SW------ADC--
''-----------------------------------------
''

'' -------------------PORTB----------------
'' Bit#:  -7---6---5---4---3---2---1---0---
'' IO:    ---------------------------------
''-----------------------------------------
''

'' ------------------PORTC-----------------
'' Bit#:  -7---6---5---4---3---2---1---0---
'' IO:    ---------------LED--LED-LED LED--
''-----------------------------------------
''

'Define constants to make things easier. We can reuse these at any time.
#DEFINE LEDPORT LATC

Dir     RC0         Out
Dir     RC1         Out
Dir     RC2         Out
Dir     RC3         Out

#DEFINE POTENTIOMETER PORTA.0
Dir     POTENTIOMETER In
#DEFINE SWITCHIN      PORTA.2
Dir     SWITCHIN      In


'*****************************************************************************************************
'Main program commences here.. everything before this is setup for the board.

#DEFINE DOWN        0
#DEFINE UP          1


Dim direction As Byte
Dim ADCVal, leds  As Byte
#DEFINE LED_RIGHT 0
#DEFINE LED_LEFT  1

'start from the right to left
direction = LED_RIGHT

'Set the initial LED states - change to suit your configuration
#DEFINE LEDSTATEMACRO RC0 = 0: RC1 = 0: RC2 = 0: RC3 = 1
'You may need change to the LEDMASK to suit your port/configuration.  We use a macro as re reuse this statement more that once.
#DEFINE LEDMASK 0B00001111

LEDSTATEMACRO


Do

    'Get a value for the debounce period (the time)
    ADCVal = ReadAD( AN0 )


    'Set the LEDs
    If  direction = LED_RIGHT  Then
        LEDPORT = LEDPORT AND LEDMASK
        'Rotate the LEDs.  We are only interested in the four LEDs so we mask the other bits.
        Set C Off
        ' and shift the contents of LEDState
        Rotate LEDPORT Right
        ' If the LEDState.0is equal to 1 then the sequence has completed, then set the initial state again, the same operation as the starting LED.
        If C = 1 Then
            'Set the initial LED states
            LEDSTATEMACRO
            'Mask off the other bits
            LEDPORT = LEDPORT AND LEDMASK
        End If

    Else
        LEDPORT = LEDPORT AND LEDMASK
        'Rotate the LEDs.  We are only interested in the four LEDs so we mask the other bits.
        Set C Off
        ' and shift the contents of LEDState
        Rotate LEDPORT Left
        ' If the LEDState.0is equal to 1 then the sequence has completed, then set the initial state again, the same operation as the starting LED.
        If RC4 = 1 Then
            'Mask off the other bits
            LEDPORT = LEDPORT AND LEDMASK
            'Set the initial LED states
            RC0 = 1
        End If

    End If

    'wait for our debounce time, and then check the switch is DOWN
    If ADCVal > 1 Then
        Wait ADCVal ms
        If check_switch = TRUE Then
            ' toggle the direction
            direction = !direction
        End If
    End If


Loop



'global variable - if button is held down, we don't want to keep on SWITCHINg directions
#DEFINE SWITCH_UP   1
#DEFINE SWITCH_DOWN 0

Dim previous_state As BIT
previous_state = SWITCH_UP

Function  check_switch
    'switch is normally open to 5V ...when pressed, RA3 is connected to GND
    If (SWITCHIN = SWITCH_DOWN) Then
        'debounce by delaying and checking if switch is still pressed
        Wait 1 ms
        If ( (previous_state =  SWITCH_DOWN) & (SWITCHIN = SWITCH_DOWN) ) Then
            ' don't toggle
            check_switch = FALSE
            Exit Function
        Else
            ' check if still down
            If (SWITCHIN = SWITCH_DOWN) Then
                previous_state = SWITCH_DOWN
                ' reverse the LEDs
                check_switch = TRUE
                Exit Function
            Else
                'switch not properly held down
                previous_state = SWITCH_UP
                ' don't reverse
                check_switch = FALSE
                Exit Function
            End If
        End If
    Else
        'switch not pressed
        previous_state = SWITCH_UP
        'don't reverse
        check_switch = FALSE
        Exit Function
    End If

End Function
