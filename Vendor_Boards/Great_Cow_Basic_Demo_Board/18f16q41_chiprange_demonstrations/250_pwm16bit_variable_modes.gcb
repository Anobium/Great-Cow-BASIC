'''
'''This program shows how to use PWM to provide 1KHz at 50% for 64Khz chip frequency
'''
'''@author     EvanV
'''@licence    GPL
'''@version    1.01
'''@date       09.07.2020
'''********************************************************************************
#CHIP 18F16Q41


    'Generated by PIC PPS Tool for Great Cow Basic
    'PPS Tool version: 0.0.6.1
    'PinManager data: v1.79.0
    'Generated for 18F16Q41
    '
    'Template comment at the start of the config file
    '
    #startup InitPPS, 85
    #define PPSToolPart 18F16Q41

    Sub InitPPS

    PWMIN1PPS = 0x16;   //RC6->PWM1_16BIT:PWMIN1;
    PWMIN0PPS = 0x15;   //RC5->PWM1_16BIT:PWMIN0;
    RC3PPS = 0x0A;   //RC3->PWM1_16BIT:PWM11;
    RC1PPS = 0x0A;   //RC1->PWM1_16BIT:PWM11;
    RC4PPS = 0x0A;   //RC4->PWM1_16BIT:PWM11;
    RC2PPS = 0x0A;   //RC2->PWM1_16BIT:PWM11;


    End Sub
    'Template comment at the end of the config file

'' -------------------PORTA----------------
'' Bit#:  -7---6---5---4---3---2---1---0---
'' IO:   -------------ADC-RST--------------
''-----------------------------------------
''

'' -------------------PORTB----------------
'' Bit#:  -7---6---5---4---3---2---1---0---
'' IO:    ---------------------------------
''-----------------------------------------
''

'' ------------------PORTC-----------------
'' Bit#:  -7---6---5---4---3---2---1---0---
'' IO:    ----TX-----LED--LED-LED LED-SW---
''-----------------------------------------


'Define constants to make things easier. We can reuse these at any time.
#DEFINE LEDPORT LATC


Dir     RC1         Out
Dir     RC2         Out
Dir     RC3         Out
Dir     RC4         Out

#DEFINE POTENTIOMETER PORTA.4
Dir     POTENTIOMETER In
#DEFINE SWITCHIN      PORTC.0
Dir     SWITCHIN      In
'analogue port selection
#DEFINE ADCChannelSelected AN4
#DEFINE ADSpeed LowSpeed


' ------ Start of main Program to provide 250Hz at 50% for 16Khz chip frequency

    //PWMERS External Reset Disabled;
    PWM1ERS = 0x00;

    //PWMCLK FOSC;
    PWM1CLK = 0x02;

    //PWMLDS Autoload disabled;
    PWM1LDS = 0x00;

    //PWMPRL 255;
    PWM1PRL = 0xFF;

    //PWMPRH 249;
    PWM1PRH = 0xF9;

    //PWMCPRE No prescale;
    PWM1CPRE = 0x00;

    //PWMPIPOS No postscale;
    PWM1PIPOS = 0x00;

    //PWMS1P2IF PWM2 output match did not occur; PWMS1P1IF PWM1 output match did not occur;
    PWM1GIR = 0x00;

    //PWMS1P2IE disabled; PWMS1P1IE disabled;
    PWM1GIE = 0x00;

    //PWMPOL2 disabled; PWMPOL1 disabled; PWMPPEN disabled; PWMMODE Left aligned mode;
    PWM1S1CFG = 0x00;

    //PWMS1P1L 0;
    PWM1S1P1L = 0x00;

    //PWMS1P1H 125;
    PWM1S1P1H = 0x7D;

    //PWMS1P2L 0;
    PWM1S1P2L = 0x00;

    //PWMS1P2H 125;
    PWM1S1P2H = 0x7D;

    //Clear PWM1_16BIT period interrupt flag
    PWM1PIF = 0;

    //Clear PWM1_16BIT interrupt flag
    PWM1IF = 0;

    //Clear PWM1_16BIT slice 1, output 1 interrupt flag
    S1P1IF = 0;

    //Clear PWM1_16BIT slice 1, output 2 interrupt flag
    S1P2IF = 0;

    //PWM1_16BIT interrupt enable bit
    PWM1IE = 0;

    //PWM1_16BIT period interrupt enable bit
    PWM1PIE = 0;


    //PWMEN enabled; PWMLD disabled; PWMERSPOL disabled; PWMERSNOW disabled;
    PWM1CON = 0x80;


    Do
    Loop

    End
