'''
'''  This demonstration produces a variable speed toggling the LEDs displayed that is proportional to the ADC value.
'''
'''  Adjust the LDR or rotate the POT to see the LEDs shift faster.
'''
'''  Press the switch to reverse the direction of the LEDs.
'''
'''
'''Great Cow  BASIC Header block
'''
'''@author  Evan R. Venn
'''@licence GPL
'''@version 1.00
'''@date    27/10/2018
'''****
' ----- Configuration
    'Chip Settings.
    #chip 18F25Q10
    #option Explicit


    '' -------------------PORTA----------------
    '' Bit#:  -7---6---5---4---3---2---1---0---
    '' IO:    -------------------| I | A |-----
    ''-----------------------------------------
    ''

    '' -------------------PORTB----------------
    '' Bit#:  -7---6---5---4---3---2---1---0---
    '' IO:    ---------------| O | O | O | O |-
    ''-----------------------------------------
    ''

    '' ------------------PORTC-----------------
    '' Bit#:  -7---6---5---4---3---2---1---0---
    '' IO:    ---------------------------------
    ''-----------------------------------------
    ''

    '' ------------------PORTE-----------------
    '' Bit#:  -7---6---5---4---3---2---1---0---
    '' IO:    XXXXXXXXXXXXXXX| I | XXXXXXXXXXXX
    ''-----------------------------------------
    ''


    'Define constants to make things easier. We can reuse these at any time.
    #define LEDPORT   PORTB
    #define LEDD1     LEDPORT.0
    #define LEDD2     LEDPORT.1
    #define LEDD3     LEDPORT.2
    #define LEDD4     LEDPORT.3

    Dir     LEDD1         Out
    Dir     LEDD2         Out
    Dir     LEDD3         Out
    Dir     LEDD4         Out

    #define SWITCHPORT    PORTA
    #define SwitchIn      SWITCHPORT.2
    Dir     SwitchIn      In

    #define RSTButton     PORTE.3

    '*****************************************************************************************************
    'Main program commences here.. everything before this is setup for the board.

    #define DOWN        0
    #define UP          1

    Dim DIRECTION as Byte
    #define LED_RIGHT 0
    #define LED_LEFT  1

    'start from the right to left
    direction = LED_RIGHT

    'Set the LED states
    LEDD1 = 1
    LEDD2 = 0
    LEDD3 = 0
    LEDD4 = 0

    Dim     LEDState as Byte
    'We are only interested in the lower four bits, so, use a mask to extract the state of these bits.
    LEDState = LEDPORT AND 0B00001111

    dim ADCVal, MaxADCVal, ADCWait as word   'we have change to a larger variable to hold the range of 0 to 1023

    MaxADCVal = 0

    do

        'Read the ADC for the cuttent value
        ADCVal =  ReadAD10 ( ANA1, TRUE )

        'Ensure the ADC value supports the widest range.
        'Use the MaxADCVal as the top range measure then scale from 0 to the MaxADCVal
        'You will have to swing the potentiometer through the complete range, but, do this once and you have a full range!
        if ( ADCVal > MaxADCVal ) Then
            MaxADCVal = ADCVal
        end if

        'Adapt the ADCVal to be representative delay between 20ms and 400ms
        ADCWait = scale ( ADCVal, 0 , MaxADCVal, 2, 400 )

        'Set the LEDs
        if  direction = LED_RIGHT  then

            'Rotate the LEDs.  We are only interested in the four LEDs so we mask the other bits.
            'Clear the C register bit, rotate the LEDState variable, check if the C register bit is set and set the LEDState variable.
            Set C off                 ' Clear the carry flag
            Rotate LEDState right        ' and shift the contents of LEDState
            ' If the Carry is equal to 1 then the sequence has completed, then set the initial state again, the same operation as the starting LED.
            If C = 1 then
               'Set the initial LED states
                LEDD1 = 0
                LEDD2 = 0
                LEDD3 = 0
                LEDD4 = 1
                LEDState = LEDPORT AND 0B00001111
            else
                'Set the port
                LEDPORT = LEDState
            end if


        else

            'Rotate the LEDs.  We are only interested in the four LEDs so we mask the other bits.
            Rotate LEDState LEFT        ' and shift the contents of LEDState
            ' If the bit 4 of LEDState is equal to 1 then the sequence has completed, then set the initial state again, the same operation as the starting LED.
            If LEDState.4 = 1 then
               'Set the  LED state
                LEDD1 = 1
                LEDD2 = 0
                LEDD3 = 0
                LEDD4 = 0
                LEDState = LEDPORT AND 0B00001111
            else
                'Set the port
                LEDPORT = LEDState
            end if

        end if

        'wait, and then check the switch is DOWN
        wait ADCWait ms
        if check_switch = true then
            ' toggle the direction
            direction = !direction
        end if



    loop



  'global variable - if button is held down, we don't want to keep on switching directions
  #define SWITCH_UP   1
  #define SWITCH_DOWN 0

  dim previous_state as bit
  previous_state = SWITCH_UP

  function  check_switch
      'switch is normally open to 5V ...when pressed, button is connected to GND
      if (SwitchIn = SWITCH_DOWN) then
          'debounce by delaying and checking if switch is still pressed
          wait 1 ms
          if ( (previous_state =  SWITCH_DOWN) & (SwitchIn = SWITCH_DOWN) ) then
              ' don't toggle
              check_switch = false
              exit function
          else
              ' check if still down
              if (SwitchIn = SWITCH_DOWN) then
                 previous_state = SWITCH_DOWN
                 ' reverse the LEDs
                 check_switch = true
                 exit function
             else
              'switch not properly held down
              previous_state = SWITCH_UP
              ' don't reverse
              check_switch = false
              exit function
             end if
          end if
      else
         'switch not pressed
          previous_state = SWITCH_UP
          'don't reverse
          check_switch = false
          exit function
      end if

  end Function
