'''
''' This demonstration uses a simple software routine to avoid the initial noise on the switch
''' pin. The code will inspect the switch status, but should overcome most of the noise from a switch.
''' Some switches are worse than others.
'''
''' The switch is attached to the microcontroller with a suitable pull up resistor.
'''
''' When the switch is held down, one LED will toggle.
'''
'''
'''
'''Great Cow  BASIC Header block
'''
'''@author  Evan R. Venn
'''@licence GPL
'''@version 1.00
'''@date    03/05/2018
'''****
' ----- Configuration
    'Chip Settings.
    #chip 18F27K40, 32
    #option Explicit

    '' -------------------PORTA----------------
    '' Bit#:  -7---6---5---4---3---2---1---0---
    '' IO:    -------------------| I | A |-----
    ''-----------------------------------------
    ''

    '' -------------------PORTB----------------
    '' Bit#:  -7---6---5---4---3---2---1---0---
    '' IO:    ---------------| O | O | O | O |-
    ''-----------------------------------------
    ''

    '' ------------------PORTC-----------------
    '' Bit#:  -7---6---5---4---3---2---1---0---
    '' IO:    ---------------------------------
    ''-----------------------------------------
    ''

    'Define constants to make things easier. We can reuse these at any time.
    #define LEDPORT PORTB
    #define LEDD1   LEDPORT.0
    #define LEDD2   LEDPORT.1
    #define LEDD3   LEDPORT.2
    #define LEDD4   LEDPORT.3


    Dir     LEDD1         Out
    Dir     LEDD2         Out
    Dir     LEDD3         Out
    Dir     LEDD4         Out

    #define SWITCHPORT    PORTA
    #define SwitchIn      SWITCHPORT.2
    Dir     SwitchIn      In

    '*****************************************************************************************************
    'Main program commences here.. everything before this is setup for the board.

     dim lastKeyDown as Byte

    'Set the initial LED states
     LEDD1 = 0
     LEDD2 = 0
     LEDD3 = 0
     LEDD4 = 1

     dim     LEDState as Byte
     'We are only interested in the lower four bits, so, use a mask to extract the state of these bits.
     LEDState = LEDPORT AND 0B00001111

     'Debouncing a switch

      Do forever
                wait 10 ms

                if  keyPressed( lastKeyDown ) = true then

                    'Rotate the LEDs.  We are only interested in the four LEDs so we mask the other bits.
                    'Clear the C register bit, rotate the LEDState variable, check if the C register bit is set and set the LEDState variable.
                    Set C off                 ' Clear the carry flag
                    Rotate LEDState right        ' and shift the contents of LEDState
                    ' If the Carry is equal to 1 then the sequence has completed, then set the initial state again, the same operation as the starting LED.
                    If C = 1 then
                       'Set the initial LED states
                        LEDD1 = 0
                        LEDD2 = 0
                        LEDD3 = 0
                        LEDD4 = 1
                        LEDState = LEDPORT AND 0B00001111
                    else
                        'Set the port
                        LEDPORT = LEDState
                    end if

                end if

      loop


  function  keyPressed ( in lastKeyDown )

        dim actKeyDown as byte

        wait 5 ms

        if ( !SwitchIn ) then

            actKeyDown = true

        else

            actKeyDown = false

        end if

        if (actKeyDown <> lastKeyDown) then
            lastKeyDown = actKeyDown
            keyPressed =  actKeyDown
        else
            keyPressed = false
        end if



  end function
