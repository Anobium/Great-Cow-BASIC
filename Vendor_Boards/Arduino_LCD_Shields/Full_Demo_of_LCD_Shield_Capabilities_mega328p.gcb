'''A demonstration program for GCGB and GCB.
'''--------------------------------------------------------------------------------------------------------------------------------
'''This program is a LCD shield demonstration for the DFRrobot LCD Shield
'''See http://www.robotshop.com/dfrobot-lcd-keypad-shield-arduino-1.html
'''This program supports the LCD keypad shield for Chipino mega328p operating at 5V
'''Supports includes 2x16 LCD display and 6 momentary push buttons
'''Use digital pins 4, 5, 6, 7, 8, 9, 10, and analog pin 0 to interface with the LCD
'''Do not use Pin 10 while this shield is connected unless you have adapted the shield with a diode or resistor, see http://forum.arduino.cc/index.php?topic=96747.0
'''The LCD color may vary (green or blue)
'''The display is easy to interface, using a 4 wire LCD type of communication.
'''The GLCD is connected to the microprocessor as shown in the hardware section of this code.
'''@author  EvanV
'''@licence GPL
'''@version 1.3
'''@date    22/2/2017
'''********************************************************************************

' ----- Configuration
'Chip model
#CHIP mega328p, 16
#OPTION Explicit
#INCLUDE <uno_mega328p.h>

'Setup LCD Parameters
#DEFINE LCD_IO 4
#DEFINE LCD_NO_RW
#DEFINE LCD_SPEED SLOW

#DEFINE LCD_DB4           DIGITAL_4
#DEFINE LCD_DB5           DIGITAL_5
#DEFINE LCD_DB6           DIGITAL_6
#DEFINE LCD_DB7           DIGITAL_7
#DEFINE LCD_RS            DIGITAL_8
#DEFINE LCD_Enable        DIGITAL_9


' ------ Define Constants
#DEFINE btnRIGHT  0
#DEFINE btnUP     1
#DEFINE btnDOWN   2
#DEFINE btnLEFT   3
#DEFINE btnSELECT 4
#DEFINE btnReset  5
#DEFINE btnNONE   6

#DEFINE LCD_Backlite      DIGITAL_10

' ------ Define port directions
' ADC port
Dir ANALOG_0 In
Dir DIGITAL_10 Out

' ------ Define variables
select_status = !TRUE
Dim adc_key_in As Word

Dim SELECT_STATUS, PWMLEVEL, PWMCOUNTER, PWMCOUNTER As Byte


' ------ Main program starts here
'Call the initialisation routine
InitPWM

CLS

Print "Great Cow Basic"
Locate 1,0
Print "Anobium Feb 2019"
Wait 2 s
CLS

Print "Keypad Demo     "
Print "Version 3"
Wait 2 s

Locate 1,0
Print Fill(16)

Do Forever
    Locate 0,15
    If select_status = TRUE Then
        Print "*"
    Else
        Print " "
    End If

    Locate 1,0
    Select Case read_LCD_buttons
    Case btnRIGHT
        Print "Right   "
    Case btnUP

        If select_status = TRUE  Then
            PWMLevel++
            Wait 25 ms
            If PWMLevel > 100 Then
                PWMLevel = 100
                Print "Up Max  "

            End If
        Else
            Print "Up      "
        End If
        Print ""
    Case btnDOWN

        If select_status = TRUE  Then

            Wait 25 ms
            If PWMLevel > 0 Then
                PWMLevel--
                If PWMLevel = 1 Then Print "Down Min"
            End If
        Else
            Print "Down    "
        End If


    Case btnLEFT
        Print "Left    "
    Case btnSELECT
        Print "Select  "
        select_status = !select_status
        Wait While read_LCD_buttons = btnSELECT
    Case btnReset
        Print "Reset   "
    Case Else
        Print "None    "

    End Select




Loop


End




'read the buttons
Function read_LCD_buttons
    read_LCD_buttons =   btnNONE
    ' read the value from the sensor
    adc_key_in = ReadAD10(AN0)
    ' Buttons when read are centered at thes values shown below:
    ' we add approx 50 to those values and check to see if we are close
    ' We make this the 1st option for speed reasons since it will be the most likely result
    Select Case adc_key_in
    Case < 50
        read_LCD_buttons = btnRIGHT
    Case < 150
        read_LCD_buttons = btnUP
    Case < 400
        read_LCD_buttons = btnDOWN
    Case < 550
        read_LCD_buttons = btnLEFT
    Case < 700
        read_LCD_buttons = btnSelect
    End Select

End Function


'Setup routine
Sub InitPWM
    'Clear variables
    PWMLevel = 90
    PWMCounter = 0

    'Add a handler for the interrupt
    On Interrupt Timer0Overflow Call PWMHandler

    'Set up the timer and start
    InitTimer0 Osc, PS_1
    StartTimer 0

End Sub

'PWM sub this will be called when Timer 0 overflows
Sub PWMHandler
    If PWMLevel > PWMCounter Then
        Set LCD_Backlite On
    Else
        Set LCD_Backlite Off
    End If
    PWMCounter -= 1
    If PWMCounter = 0 Then
        PWMCounter = 99
    End If
End Sub
