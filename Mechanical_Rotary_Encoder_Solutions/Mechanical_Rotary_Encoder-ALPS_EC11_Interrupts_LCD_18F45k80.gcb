'''A demonstration program for GCB.
'''--------------------------------------------------------------------------------------------------------------------------------
''' This program: MEC-ROTARY-EC11-18F45k80.gcb
''' demonstrates the use of mechanical rotary encoder
''' with the ALPS-EC11.h include file.
'''
'''@author 	Immo,DL5KB&EvanV
'''@licence	GPL
'''@version	1.0c
'''@date   	Dec 2019
''' *****************************************
''' Program: Reads a rotary encoder ALPS EC11
'''
''' Turning the knob counts a number up or down in single steps,
''' corresponding to turning sense.
''' Pushing encoder switch, disables counting.
''' Pushing encoder switch again, enables counting again.
''' Encoder works to Vss (0V), ports are pulled up internal.
''' LCD is 2x16 connected as 4 Wire Data (LCD_IO 4).
''' *****************************************
''' CHANGE CHIP AND PORTS ACCORDING TO YOUR TESTING BOARD!
''' *****************************************

' ----- Configuration
#CHIP 18F45k80, 8

' Load encoder header file
#INCLUDE <alps-ec11.h>

' ----- Define Hardware settings
#DEFINE LCD_SPEED FAST
#DEFINE LCD_IO 4
#DEFINE LCD_NO_RW
#DEFINE LCD_Enable PORTc.0
#DEFINE LCD_RS PORTc.1
#DEFINE LCD_DB4 PORTa.5
#DEFINE LCD_DB5 PORTa.4
#DEFINE LCD_DB6 PORTa.3
#DEFINE LCD_DB7 PORTa.2


' ----- Define Hardware settings
'Set weak pullups on inputs port B
RBPU = 0

'Encoder connections defined here
'Clock
#DEFINE Alps_ENCODER_A		PortB.2

'CW
#DEFINE Alps_ENCODER_B		PortB.0

'encoder-switch
#DEFINE Alps_ENCODER_SW	PortB.3

#DEFINE Alps_ENCODER_ENC_READ_DELAY 100

'---- variables
Dim	RefreshLCD As Byte

'Variables exposed by include file are:
'Alps_ESB_Bit is a bit that is exposed to detect state of button.  Detects event has occurred
'Alps_EncoderEvent is a bit that is exposed to detect state of button.  Detects event has occurred
'Alps_CurrentPosition is a public Integer value that is the current rotational value
'Alps_Directn is a public bit that is the current direction of the encoder

' ----- Main body of program commences here.

'****************************************************************************
'Enable portb.3, which is External Interrupt #3, as the source of the interrupt.
'See the datasheet for more information.
#DEFINE ExternalEventSource_Switch ExtInt3
#DEFINE SetExternalEventEnable_Switch INT3IE
#DEFINE ClearExternalEvent_Switch INT3IF

SetExternalEventEnable_Switch = 1
On Interrupt ExternalEventSource_Switch Call Alps_ENCODER_SW_Pressed

'****************************************************************************
'Enable portb.2, which is External Interrupt #2, as the source of the interrupt.
'See the datasheet for more information.
#DEFINE ExternalEventSource_Clock ExtInt2
#DEFINE SetExternalEventEnable_Clock INT2IE
#DEFINE ClearExternalEvent_Clock INT2IF
#DEFINE SetExternalEdge_Clock INTEDG2

SetExternalEdge_Clock = 1
SetExternalEventEnable_Clock = 1
On Interrupt ExternalEventSource_Clock Call Alps_ENCODER_Clock_Event
'****************************************************************************
'Prevent events from firing during initial LCD update
IntOff
CLS
Print "Rotary Enc. Demo"
Locate 1,0
Print "Great Cow Basic"
Wait 2 s
CLS
Print "@Dec 2019"
Locate 1,0
Print "Immo's&Ano Code"
Wait 2 s
CLS

'Show what happening with encoder on the LCD
Locate 0,0
Print "Counting enabled"
Locate 1, 0
Print "Rotate encoder  "

RefreshLCD = TRUE
IntOn

Do Forever

    ' Alps_ESB_Bit is a bit that is exposed to detect state of button.  Detects event has occurred
    If Alps_ESB_Bit = 1 Then

        'Update screen once on button button change
        If 	RefreshLCD = TRUE Then
            RefreshLCD = FALSE

            CLS
            Locate 0,0
            Print "Counting enabled"

        End If

        'Alps_EncoderEvent is a bit that is exposed to detect state of button.  Detects event has occurred
        If Alps_EncoderEvent = 1  Then

            Alps_EncoderEvent = 0

            Locate 1,0
            'Alps_CurrentPosition is a public Integer value that is the current rotational value
            Print Alps_CurrentPosition

            'Alps_Directn is a public bit that is the current direction of the encoder
            If Alps_Directn = 1 Then
                Print " (+) "
            Else
                Print " (-) "
            End If

        End If

    Else

        Locate 0, 0
        Print "Count disabled  "
        Locate 1, 0
        Print "  press button  "
        RefreshLCD= TRUE

    End If

Loop

End

' ----- Support methods.  Subroutines and Functions
