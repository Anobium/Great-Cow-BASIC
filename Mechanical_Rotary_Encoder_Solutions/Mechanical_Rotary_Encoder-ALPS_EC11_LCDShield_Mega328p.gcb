'''A demonstration program for GCB.
'''--------------------------------------------------------------------------------------------------------------------------------
''' This program: for the Mega328p
''' demonstrates the use of mechanical rotary encoder
''' with the ALPS-EC11.h include file.
'''
'''@author 	Immo,DL5KB&EvanV
'''@licence	GPL
'''@version	1.0b
'''@date   	Dec 2019
''' *****************************************
''' Program: Reads a rotary encoder ALPS EC11
'''
''' Turning the knob counts a number up or down in single steps,
''' corresponding to turning sense.
''' Pushing encoder switch, disables counting.
''' Pushing encoder switch again, enables counting again.
''' Encoder works to Vss (0V), ports are pulled up internal.
''' LCD is 2x16 connected as Arduino Shield
''' *****************************************


' ----- Configuration
#CHIP mega328p,16
#OPTION Explicit
#INCLUDE <uno_mega328p.h>

' Load encoder header file
#INCLUDE <alps-ec11.h>

'Setup LCD Parameters
#DEFINE LCD_IO 4
#DEFINE LCD_NO_RW
#DEFINE LCD_SPEED SLOW


#DEFINE LCD_RS         Digital_8
#DEFINE LCD_Enable     Digital_9
#DEFINE LCD_DB4        Digital_4
#DEFINE LCD_DB5        Digital_5
#DEFINE LCD_DB6        Digital_6
#DEFINE LCD_DB7        Digital_7


#DEFINE btnRIGHT  0
#DEFINE btnUP     1
#DEFINE btnDOWN   2
#DEFINE btnLEFT   3
#DEFINE btnSELECT 4
#DEFINE btnNONE   5


' ----- Define Hardware settings
#DEFINE Resetbtn         Reset
Dir Resetbtn In
#DEFINE LCDBacklite      Digital_10
Dir LCDBacklite Out
Set LCDBacklite On

' ----- Define Hardware settings


'Encoder connections defined here for Mega328p these should not be changed
'Clock on INT0
#DEFINE Alps_ENCODER_A		Portd.2

'CW
#DEFINE Alps_ENCODER_B		Portd.0

'Encoder-switch on INT1
#DEFINE Alps_ENCODER_SW		Portd.3

#DEFINE Alps_ENCODER_ENC_READ_DELAY 200

Dir Alps_ENCODER_A In
Dir Alps_ENCODER_B In
Dir Alps_ENCODER_SW In


'---- variables
Dim REFRESHLCD As Byte

' ----- Main body of program commences here.

'****************************************************************************
'Enable portd.3, which is External Interrupt #1, as the source of the interrupt.
'See the datasheet for more information.
#DEFINE ExternalEventSource_Switch ExtInt1
#DEFINE SetExternalEventEnable_Switch Int1
#DEFINE ClearExternalEvent_Switch INTF1

SetExternalEventEnable_Switch = 1
On Interrupt ExternalEventSource_Switch Call Alps_ENCODER_SW_Pressed

'****************************************************************************
'Enable portd.2, which is External Interrupt #0, as the source of the interrupt.
'See the datasheet for more information.
#DEFINE ExternalEventSource_Clock ExtInt0
#DEFINE SetExternalEventEnable_Clock int0
#DEFINE ClearExternalEvent_Clock INTF0
'To control the rising edge set EICRA to 7, as follows:
'        7 bit 	6 bit 	5 bit 	4 bit 	3 bit 	2 bit 	1 bit 	0 bit
'  EICRA	- 			- 			- 			- 			ISC11 	ISC10 	ISC01 	ISC00
'  External Interrupt Control Register A
'
'
'   ISCx1	 ISCx0 	DESCRIPTION
'  0	0	 Low level of INTx generates an interrupt request
'  0	1	 Any logic change on INTx generates an interrupt request
'  1	0	 The falling edge of INTx generates an interrupt request
'  1	1	 The rising edge of INTx generates an interrupt request

#DEFINE SetExternalEdge_Clock EICRA

SetExternalEdge_Clock = 7
SetExternalEventEnable_Clock = 1
On Interrupt ExternalEventSource_Clock Call Alps_ENCODER_Clock_Event


'****************************************************************************
'Prevent events from firing during initial LCD update
IntOff
CLS
Print "Rotary Enc. Demo"
Locate 1,0
Print "Great Cow Basic"
Wait 2 s
CLS
Print "@Dec 2019"
Locate 1,0
Print "Immo's&Ano Code"
Wait 2 s
CLS

'Show what happening with encoder on the LCD
Locate 0,0
Print "Counting enabled"
Locate 1, 0
Print "Rotate encoder  "



RefreshLCD = TRUE
IntOn

Do Forever

    ' Alps_ESB_Bit is a bit that is exposed to detect state of button.  Detects event has occurred
    If Alps_ESB_Bit = 1 Then

        'Update screen once on button button change
        If 	RefreshLCD = TRUE Then
            RefreshLCD = FALSE

            CLS
            Locate 0,0
            Print "Counting enabled"

        End If

        ' Alps_EncoderEvent is a bit that is exposed to detect state of button.  Detects event has occurred
        If Alps_EncoderEvent = 1  Then

            Alps_EncoderEvent = 0

            Locate 1,0
            'Alps_CurrentPosition is a public Integer value that is the current rotational value
            Print Alps_CurrentPosition

            'Alps_Directn is a public bit that is the current direction of the encoder
            If Alps_Directn = 1 Then
                Print " (+) "
            Else
                Print " (-) "
            End If

        End If

    Else

        Locate 0, 0
        Print "Count disabled  "
        Locate 1, 0
        Print "  press button  "
        RefreshLCD= TRUE

    End If

Loop

End

' ----- Support methods.  Subroutines and Functions
