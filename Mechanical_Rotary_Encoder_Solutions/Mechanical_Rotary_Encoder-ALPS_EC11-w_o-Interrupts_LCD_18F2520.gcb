'''A demonstration program for GCB.
'''--------------------------------------------------------------------------------------------------------------------------------
''' This program:
''' Mechanical Rotary Encoder-ALPS EC11-w_o-Interrupts_LCD_18F2520.gcb
''' demonstrates the use of mechanical rotary encoder
''' without using interrupts
''' with the ALPS-EC11.h include file.
'''
'''@author 	Immo, DL5KB
'''@licence	GPL
'''@version	1.0b
'''@date   	Dec. 2019
''' *****************************************
''' Program: Reads a rotary encoder ALPS EC11
'''
''' Turning the knob counts a number up or down in single steps,
''' corresponding to turning sense.
''' Pushing encoder switch, disables counting.
''' Pushing encoder switch again, enables counting again.
''' Encoder works to Vss (0V), ports are pulled up internal.
''' LCD is 2x16 connected as 4 Wire Data (LCD_IO 4).
''' *****************************************
''' CHANGE CHIP AND PORTS ACCORDING TO YOUR TESTING BOARD!
''' *****************************************

' ---- configuration
#CHIP 18F2520, 8

'load encoder header file
#INCLUDE <alps-ec11.h>

' ---- Define Hardware settings
#DEFINE TRISB 0
#DEFINE TRISA 0
#DEFINE TRISC 0

'make port A digital as output except A.0 and A.1
Dir PORTA 0x03

'make port B 0 to 3 as input, 4 to 7 as output
Dir PORTB 0x0F

'set weak pullups on inputs port B
INTCON2.7 = 0

'make port C as output
Dir PortC 0x0

' ---- LCD-Settings
#DEFINE LCD_SPEED FAST
#DEFINE LCD_IO 4
#DEFINE LCD_NO_RW
#DEFINE LCD_Enable PORTc.0
#DEFINE LCD_RS PORTc.1
#DEFINE LCD_DB4 PORTa.5
#DEFINE LCD_DB5 PORTa.4
#DEFINE LCD_DB6 PORTa.3
#DEFINE LCD_DB7 PORTa.2

'encoder connections defined here
'clk
#DEFINE ALPS_ENCODER_A PortB.0

'cw
#DEFINE ALPS_ENCODER_B PortB.2

'encoder-switch
#DEFINE ALPS_ENCODER_SW PortB.3
'''--------------------------------------------
'''-------End of board-specific settings-------
'''--------------------------------------------

' ---- variables
'value to be displayed
Dim result As Integer

' ---- main body of program begins here
main:
'StartTimer-value to count
result = 0
'switch not pressed
Alps_ESB_Bit = Off

CLS
Print "Rotary Enc. Demo"
Locate 1,0
Print "Great Cow Basic"
Wait 2 s
CLS
Print "@Dec 2019"
Locate 1,0
Print "Immo's&Ano Code"
Wait 2 s
CLS

'Show what happening with encoder on the LCD

Locate 0,0
Print "Counting enabled"
Locate 1, 0
Print "Rotate encoder  "

'now begin working...
count:

'get encoder values (from include File)
'returns only, when encoder is turned
'or encoder_sw has been pressed (Alps_ESB_Bit = 1)
If ! Alps_ESB_Bit Then Alps_Encoder_Read
'--------------------------
'here you can insert any stuff you want
'
'
'to get back to counting, press button again
'--------------------------
'switch was pressed to escape reading loop
If Alps_ESB_Bit = 1 Then
    ' show me

    Locate 0, 0
    Print " count disabled "
    Locate 1, 0
    Print "  press button  "


    'toggle Alps_ESB_Bit, if you want/need
    Alps_Switch_Read


    If ! Alps_ESB_Bit Then
        'switch was pressed again
        'show me old display
        CLS
        Locate 0, 0
        Print "Counting enabled"
        Locate 1, 0
        Print "                "
        Locate 1, 8
        If result > -1 Then
            Print " "
        End If

        Print result

    End If
    'start work - loop counting
    Goto count

End If

'show detected direction of turning
Locate 1, 0
If Alps_directN = 1 Then
    'if enc_directN = 1 then
    Print " CW (+) "
Else
    Print "CCW (-) "
End If

'make new result
result = result + Alps_Count_delta

'show me at same place as negatives
If result > -1 Then
    Print " "
End If

Print result
Print "    "

Goto count

End
' ---- Support methods only at include file ALPS-EC11.h

