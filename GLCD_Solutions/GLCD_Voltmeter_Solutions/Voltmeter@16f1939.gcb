'''A demonstration program for GCGB and GCB.
'''--------------------------------------------------------------------------------------------------------------------------------
'''This program demonstrates the basic primatives a voltmeter on a Graphical LCD (GLCD)
''':
'''You can change the microcontroller, the GLCD and the analogue port.
'''
'''To change the microcontroller simply change the #chip statement
'''To change the GLCD replace GLCD definition
'''To change the analogue port change the ADCChannelSelected constant
'''
''':
'''@author  StanC
'''@licence GPL
'''@version 1.01a
'''@date    14.07.2017
'''********************************************************************************



'analogue 5V voltmeter
#CHIP 16f1939,32
#OPTION Explicit
#INCLUDE <trig2places.h>
'
#INCLUDE <glcd.h>


'GLCD selection
' This is the Default value, not really required.
#DEFINE GLCD_TYPE GLCD_TYPE_KS0108
' #define GLCDDirection 1                          ' Invert display, not always required

'D12 to actually since CS1, CS2 can be reversed on some devices
#DEFINE GLCD_CS1 PORTa.7
#DEFINE GLCD_CS2 PORTa.6
'D0 to pin 7 on LCD
#DEFINE GLCD_DB0 PORTD.0
'D1 to pin 8 on LCD
#DEFINE GLCD_DB1 PORTD.1
'D2 to pin 9 on LCD
#DEFINE GLCD_DB2 PORTD.2
'D3 to pin 10 on LCD
#DEFINE GLCD_DB3 PORTD.3
'D4 to pin 11 on LCD
#DEFINE GLCD_DB4 PORTD.4
'D5 to pin 12 on LCD
#DEFINE GLCD_DB5 PORTD.5
'D6 to pin 13 on LCD
#DEFINE GLCD_DB6 PORTD.6
'D7 to pin 14 on LCD
#DEFINE GLCD_DB7 PORTD.7

#DEFINE GLCD_RS PORTa.0
#DEFINE GLCD_Enable PORTA.1
#DEFINE GLCD_RW PORTA.2
#DEFINE GLCD_RESET PORTA.3
'

' 2 normal usage, 3 for 32 mhz!
#DEFINE KS0108ReadDelay   3
'       #define KS0108WriteDelay  1     ; 1 normal usage, 0 works
'       #define KS0108ClockDelay  1     ; 1 normal usage, 0 works


'analogue port selection
#DEFINE ADCChannelSelected AN5
#DEFINE ADSpeed LowSpeed

Dim radius,xcentre,ycentre,xend,old_xend,yend,old_yend As Byte
Dim angle,old_angle,adcval As Word
Dim volts As String * 4
xcentre=63
ycentre=58
'draw dial
GLCDCLS
Box 0,0,127,63
For radius=144 To 141
    dial
Next radius
GLCDDrawChar (5,40,Asc("0")):GLCDDrawChar (115,40,Asc("5"))
radius=120
angle=1
anglecheck
'main
Do
    old_angle=angle
'--- DVM
    adcval=ReadAD(ADCChannelSelected)
    angle=adcval/2
'
    adcval=adcval*100
    adcval=adcval/51
    volts=Str(adcval)
    If adcval<10 Then
        volts="0.0"+Left(volts,1,1)
        Goto volt_format_done
    End If
    If adcval<100 Then
        volts="0."+Mid(volts,1,2)
    Else
        volts=Left(volts,1,1)+"."+Mid(volts,2,2)
    End If
volt_format_done:
'---
    anglecheck
    old_xend = xcentre + radius  * sin (old_angle)/255
    old_yend = ycentre - radius  * cos (old_angle)/255
    xend = xcentre + radius  * sin (angle)/255
    yend = ycentre - radius  * cos (angle)/255
    If old_angle<>angle Then
        '-- update screen if volts has changed
'   erase old needle
        
        Line (xcentre,ycentre,old_xend,old_yend,0)
'   draw V
        Line (55,22,63,38):Line (63,38,71,22)
'   print new voltage
        'print Voltage
        GLCDPrint (50,10,volts,1)
'   draw new needle
        Line (xcentre,ycentre,xend,yend,1)
        Wait 20 ms
    End If
Loop
'end main
Sub plotdial
    xend = 63 + radius  * sin (angle)/255
    yend = 58 - radius  * cos (angle)/255
    Pset (xend,yend,1)
End Sub
'
Sub dial
    For angle= 296 To 359
        plotdial
    Next angle
'
    For angle= 0 To 63
        plotdial
    Next angle
End Sub
'
Sub anglecheck
    If angle>127 Then
        angle =angle-127
    Else
        angle =296+angle
    End If
End Sub
