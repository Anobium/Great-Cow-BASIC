'''A program  for GCGB and GCB.
'''--------------------------------------------------------------------------------------------------------------------------------
'''This program demonstrates the using Great Cow BASIC to update the Nextion display.
'''
'''Enjoy.
'''
'''
'''@author     Evan Venn
'''@licence    GPL
'''@version    1.00
'''@date       18.11.2019
'''********************************************************************************



' ----- Configuration
'Chip Settings.
#CHIP mega328p, 16
#INCLUDE <uno_mega328p.h>
#OPTION Explicit

' ----- Set up the Nextion GLCD
#INCLUDE <glcd.h>
#DEFINE GLCD_TYPE GLCD_TYPE_Nextion
'Change the width and height to match the rotation in the Nextion Editor
'could be 320 | 400 | 272 | 480 but any valid dimension will work.
#DEFINE GLCD_WIDTH  800
'could be 240 | 480 | 800 but any valid dimension will work.
#DEFINE GLCD_HEIGHT 480

' ----- End of set up for Nextion GLCD

' ----- Set up for Hardware Serial
'VERY IMPORTANT!!
'The Nextion MUST be setup for 9600 bps.
#DEFINE USART_BAUD_RATE 9600
#DEFINE USART_BLOCKING
#DEFINE USART_DELAY 0


' ----- Main program


'   Ensure this CONSTANTS SHOULD BE CORRECT and they match for Nextion project components in the tutorial... but, bect check
'This is the component objname of the Nextion component, this value may be different in your project
#DEFINE RADIOCOMPONENT         "r0"
'This is the component objname of the Nextion component, this value may be different in your project
#DEFINE NUMBERCOMPONENT        "n0"
'This is the component objname of the Nextion component, this value may be different in your project
#DEFINE TEXTCOMPONENT          "t3"
'This is the component ID of the Nextion component, this value may be different in your project
#DEFINE TOGGLELEDBUTTON        6
'This is the component ID of the Nextion component, this value may be different in your project
#DEFINE SELECTPAGE1BUTTON      1

'Statics that should not change.
#DEFINE PAGE0           0
#DEFINE PAGE1           1
#DEFINE TOUCHEVENT      0x65

'   The microcontroller LED
#DEFINE LED1            DIGITAL_13



' ----- Setup the Interrupt Handler - this should NOT be changed
'This manages the serial buffer on the bytes coming from the Nextion
On Interrupt UsartRX1Ready Call readUSART
' Constants required for Buffer Ring
#DEFINE BUFFER_SIZE 255
#DEFINE bkbhit (next_in <> next_out)
'Declare the required variables
'
Dim buffer( BUFFER_SIZE - 1 )
Dim next_in As Byte: next_in = 0
Dim next_out As Byte: next_out = 0


' ----- Declare the variables we need for this tutorial
Dim byteValueOutToNextion As Byte
Dim inComingByteFromNextion As Byte
Dim stringOutToNextion As String

' ----- Set the LED as an output
Dir LED1 Out






'Create a string for text component - this will state the type of microcontroller and the frequency of the microcontroller
#IFDEF PIC
    stringOutToNextion = "PIC"
#ENDIF
#IFDEF AVR
    stringOutToNextion = ""
#ENDIF
stringOutToNextion = stringOutToNextion + ChipNameStr + " @"+Str(ChipMHz)+"Mhz"

'Initialise page0
displayPage0


'   Main loop, never exits
Do
    'Update the n0.val object
    byteValueOutToNextion = (byteValueOutToNextion + 1) % 101
    GLCDUpdateObject_Nextion( NUMBERCOMPONENT+".val",  byteValueOutToNextion )
    Wait 50 ms

    'react to incoming data, if bkbhit is TRUE then we have some serial data!
    Do While bkbhit

        'Has a Nextion Touch Event happended.  bgetc is the next serial byte, so, we can test it.
        'Once bgetc is tested the serial byte has been consumed and the next byte is availalbe in the buffer.
        If bgetc = TouchEvent Then

            'The next bgetc byte in the buffer is the originating Nextion page
            Select Case bgetc

                'Page 0 events... there are potenially a few, so we need to test the next byte to set which component caused the event
            Case PAGE0

                'The next bgetc byte in the buffer is the  component ID that caused the event
                Select Case bgetc

                    'Page change pressed
                Case SELECTPAGE1BUTTON
                    'Send an instruction to 'page' change the Nextion
                    GLCDSendOpInstruction_Nextion( "page",  "page"+Str(PAGE1) )

                    'Toggle LED pressed or released
                Case TOGGLELEDBUTTON

                    'The next byte is the state of the TOGGLELEDBUTTON 0 or 1
                    inComingByteFromNextion  = bgetc

                    'Set the LED state to TOGGLELEDBUTTON state
                    LED1 = inComingByteFromNextion

                    'Tell the Nextion the LED is ON
                    If inComingByteFromNextion = 1 Then
                        Repeat 5
                            GLCDUpdateObject_Nextion( RADIOCOMPONENT+".bco",  [Long]63488 )
                            GLCDUpdateObject_Nextion( RADIOCOMPONENT+".pco",  [Long]63488 )
                        End Repeat
                    End If

                End Select

                'Page 1 events... there is only one, so, just change page
            Case PAGE1
                displayPage0
            End Select

        End If

    Loop

Loop


' Simply a method as we can call this more that once.
Sub displayPage0

    'Send an instruction to 'page' change the Nextion
    GLCDSendOpInstruction_Nextion( "page",  "page"+Str(PAGE0) )
    'wait for display
    Wait 750 ms
    'Update the page text
    GLCDUpdateObject_Nextion( TEXTCOMPONENT+".txt", stringOutToNextion  )

End Sub

'Utility methods - these are required to support the Interrupt routines - no need to change

Sub readUSART
    Dim temppnt As Byte
    buffer(next_in) = HSerReceive
    temppnt = next_in
    next_in = ( next_in + 1 ) % BUFFER_SIZE
    If ( next_in = next_out ) Then
        ' buffer is full so overflow
        next_in = temppnt
    End If
End Sub

Function bgetc
    Wait While !(bkbhit)
    bgetc = buffer(next_out)
    next_out=(next_out+1) % BUFFER_SIZE
End Function
