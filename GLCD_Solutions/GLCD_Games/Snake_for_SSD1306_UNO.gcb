'''A program  for GCGB and GCB.
'''--------------------------------------------------------------------------------------------------------------------------------
'''This program is a SNAKE game on 1" SSD1306 GLCD for an UNO/Arduino/Mega328p
''':
''':This game reserves the rights of any orginal works.
''':
'''UNO or Pic SNAKE type game on 1" GLCD 128x64 pixel monochrome i2c oled display
''':
'''The idea is to control your point to leave a trail that the computer point crashes into.
'''It's easy when you know how :)
'''Player starts on random screen right and initially moves left
'''CPU starts on random screen left and initially moves right
'''4 buttons for up/down/left/right from VSS to UNO D7 to D4 and pull-down resistors
'''
'''The idea is the players pixel has a x,y direction
'''value either +1 or -1 that is added to it'''s x,y value.
'''here, using 255 for -1 as adding 255 to a byte value is the same as adding -1
'''ie subtract 1 from the x or y co-ordinate.
'''the cpu direction is the same process.
'''
'''This Great Cow BASIC version uses a state engine to control the game.
''':
''':
'''Player starts on screen right and initially moves left
'''CPU starts on screen left and initially moves right
'''4 buttons for up/down/left/right from VSS to UNO D8 to D11 via appropriate pull-down resistors
''':
'''@author     StanC & works of EvanV
'''@licence    GP
'''@version    2.04
'''@date       20.04.2017
'''********************************************************************************


' ----- Configuration
#CHIP mega328p,16
#OPTION Explicit
#INCLUDE <uno_mega328p.h>
#INCLUDE <glcd.h>

' ----- Define GLCD Hardware settings
#DEFINE GLCD_TYPE GLCD_TYPE_SSD1306
#DEFINE GLCD_I2C_Address 0x78
#DEFINE GLCD_PROTECTOVERRUN

' ----- Constants
'uno digital 11
#DEFINE up_button portb.3
'uno digital 10
#DEFINE down_button portb.2
'uno digital 9
#DEFINE left_button portb.1
'uno digital 8
#DEFINE right_button portb.0

#DEFINE StartGame     1
#DEFINE PlayGame      2
#DEFINE PlayerCrashed 3
#DEFINE CPUCrashed    4

#DEFINE StartSpeed    70

'select ExplodeA or ExplodeB to change the explosion...
#DEFINE Explode ExplodeB


' ----- Define Hardware settings
Dir portb.0 In
Dir portb.1 In
Dir portb.2 In
Dir portb.3 In

' Define Hardware I2C settings
#DEFINE HI2C_BAUD_RATE 400
#DEFINE HI2C_DATA
HI2CMode Master


' ----- Variables
Dim GLCD_dim_state,GameSpeed As Byte
Dim pixel_status, pixelx, pixely As Byte

Dim Player_Y,Player_X As Byte
Dim Player_X_Direction,Player_Y_Direction As Integer

Dim Explode_Tmp,CPU_X,CPU_Y, GameState As Byte
Dim Game_Tmp Alias Explode_Tmp
Dim CPU_X_Direction,CPU_Y_Direction As Integer

' ----- Main body of program commences here.
GameState = StartGame
GameSpeed = StartSpeed

GLCDPrint ( 14 , 0 , "Great Cow BASIC" )
GLCDPrint ( 0 , 55 , "2.04" )
GLCDPrint ( 64 , 55 , "19.04.2017" )

Do Forever

    Select Case GameState

    Case StartGame
        GLCDfntDefaultSize = 3
        GLCDPrint ( 16 , 8 , "SNAKE" )

        GLCDfntDefaultSize = 1
        GLCDPrint ( 0 , 40 , "PRESS A BUTTON" )
        startscrollright_SSD1306(5,14,0x0e)
        'loop until either portb.0 to 3 goes high ie a button pressed
        Do Until  (pinb AND 15) > 0
            'and 15 is and 00001111 so if either of the right 4 bits which represent
            'portb.0,1,2,3 are high ie button pressed then- and 15 will be not 0
            'if portb.0 is high then and 15 would be 1
            'if portb.1 is high then and 15 would be 2
            'if portb.2 is high then and 15 would be 4
            'if portb.3 is high then and 15 would be 8
            'we aren't concerned about portb.4 to 7 so we mask the portb bits we want by and 15
            'so ignore portb bits 4 to 7
            'a new random number in tmp each loop so tmp is more Random
            Game_Tmp = Random
            '               because the time it takes to press a button will vary
            '               so the random start positions seem different each game
            'wait for button press
        Loop


        '--set up game screen screen
        stopscroll_SSD1306
        GLCDCLS
        'draw border
        Box 0,0,GLCD_WIDTH - 1, GLCD_HEIGHT - 1

        'plot a dot at random y left and right to make cpu not follow border
        Pset (1,(Game_Tmp/8)+16,1)
        Game_Tmp = Random
        Pset (126,(Game_Tmp/8)+16,1)

        'define start positions and directions
        'player y start position
        Game_Tmp = Random:Player_Y=(Game_Tmp/8)+16
        'cpu y start position
        Game_Tmp = Random:CPU_Y=(Game_Tmp/8)+16
        ' plot player
        Player_X=90:Player_X_Direction=-1:Player_Y_Direction=0:Pset (Player_X,Player_Y,1)
        ' plot cpu
        CPU_X=30:CPU_X_Direction=1:CPU_Y_Direction=0:Pset (CPU_X,CPU_Y,1)

        GameState = PlayGame

        Wait 2 s

    Case PlayGame

        '* Game Speed, 30 ms is impossible,75 is easy. starts at 80,gets faster every win *
        Wait GameSpeed ms
        '--testkeys
        If up_button = 1 Then
            'up key pressed
            Player_X_Direction=0:Player_Y_Direction=-1
        End If
        If down_button = 1 Then
            'down key pressed
            Player_X_Direction=0:Player_Y_Direction=1
        End If
        If left_button = 1 Then
            'left key pressed
            Player_X_Direction=-1:Player_Y_Direction=0
        End If
        If right_button = 1 Then
            'right key pressed
            Player_X_Direction=1:Player_Y_Direction=0
        End If

        'player direction
        Player_X=Player_X+Player_X_Direction
        Player_Y=Player_Y+Player_Y_Direction
        '
        'test pixel ahead

        pixel_status = pixelstatus_SSD1306( Player_X, Player_Y )

        If pixel_status = 1 Then
            'player crashed

            GameState = PlayerCrashed

        Else

            'player_has not_crashed, so, plot player
            Pset(Player_X,Player_Y,1)

            'CPU manouver
            MoveCPU

        End If


        If GameState = PlayGame Then
            'no one has crashed, show CPU next move

            'has cpu crashed?
            pixel_status = pixelstatus_SSD1306(CPU_X,CPU_Y)

            If pixel_status=0 Then
                'CPU didn't crash
                ' plot CPU
                Pset (CPU_X,CPU_Y,1)
            Else
                GameState = CPUCrashed
            End If

        End If

    Case PlayerCrashed

        'boom!
        Explode( Player_X,Player_Y )
        GLCDfntDefaultSize = 2
        GLCDPrint (22,24,"YOU LOST")
        Repeat 4
            For GLCD_dim_state = 0 To 255
                SetContrast_SSD1306 ( GLCD_dim_state )
                Wait 1 ms
            Next
        End Repeat
        GameSpeed = StartSpeed
        GameState = StartGame
        GLCDCLS

    Case CPUCrashed

        'boom!
        Explode( CPU_X,CPU_Y )
        GLCDfntDefaultSize = 2
        GLCDPrint (22,24,"YOU WIN")
        Repeat 100
            For GLCD_dim_state = 0 To 255
                SetContrast_SSD1306 ( GLCD_dim_state )
            Next
        End Repeat
        GameState = StartGame
        'Game gets faster and faster....if you win
        GameSpeed = GameSpeed - 10: GameSpeed = GameSpeed AND 127
        GLCDCLS

    End Select
Loop
'************************* end of game code *************************************************************

Sub MoveCPU

    '**** CPU manouver ****
    'cpu diection
    CPU_X=CPU_X+CPU_X_Direction:CPU_Y=CPU_Y+CPU_Y_Direction
    '
    If CPU_X_Direction=1 Then
        'going right
        Pixel_Status = pixelstatus_SSD1306(CPU_X+1,CPU_Y)
        If Pixel_Status=1 Then
            'object ahead..change direction
            CPU_X_Direction=0
            If Player_Y>=CPU_Y Then
                CPU_Y_Direction=1
            Else
                CPU_Y_Direction=-1
            End If
        End If
        Exit Sub
    End If
    '
    If CPU_X_Direction=-1 Then
        'going left
        Pixel_Status = pixelstatus_SSD1306(CPU_X-1,CPU_Y)
        If Pixel_Status=1 Then
            'object ahead..change direction
            CPU_X_Direction=0
            If Player_Y>=CPU_Y Then
                CPU_Y_Direction=1
            Else
                CPU_Y_Direction=-1
            End If
        End If
        Exit Sub
    End If
    '
    If CPU_Y_Direction=1 Then
        'going down
        Pixel_Status = pixelstatus_SSD1306(CPU_X,CPU_Y+1)
        If Pixel_Status =1  Then
            'object ahead..change direction
            CPU_Y_Direction=0
            If Player_X>=CPU_X Then
                CPU_X_Direction=1
            Else
                CPU_X_Direction=-1
            End If
            Exit Sub
        End If
    End If
    '
    If CPU_Y_Direction=-1 Then
        'going up
        Pixel_Status = pixelstatus_SSD1306(CPU_X,CPU_Y-1)
        If Pixel_Status=1  Then
            'object ahead..change direction
            CPU_Y_Direction=0
            If Player_X>=CPU_X Then
                CPU_X_Direction=1
            Else
                CPU_X_Direction=-1
            End If
            Exit Sub
        End If
    End If
    Exit Sub
End Sub

Sub ExplodeA ( In ExplodeX, In ExplodeY )

    For Explode_Tmp = 3 To 30
        Circle (ExplodeX, ExplodeY, Explode_Tmp, GLCDForeground )
        Wait 5 ms
    Next tmp

    For Explode_Tmp=3 To 30
        Circle (ExplodeX, ExplodeY, Explode_Tmp, GLCDBackground )
        Wait 10 ms
        'draw border
        Box 0,0,GLCD_WIDTH - 1,GLCD_HEIGHT - 1
    Next tmp

    GLCDCLS
    GLCDfntDefaultSize = 2

End Sub


Sub ExplodeB ( In ExplodeX, In ExplodeY )
    Dim Pixel_Status As Byte
    Dim boomx ( 8 ) , boomy (8)
    For Explode_Tmp = 1 To 3
        'erase boarder
        Box 0,0,GLCD_WIDTH - 1 ,GLCD_HEIGHT -1 ,0
        'draw boarder
        Box 0,0,GLCD_WIDTH - 1 ,GLCD_HEIGHT -1 ,1
    Next Explode_Tmp

    Pixel_Status=1
    Repeat 2
        For Explode_Tmp = 1 To 8
            boomx(Explode_Tmp)=ExplodeX:boomy(Explode_Tmp)=ExplodeY
        Next Explode_Tmp

        For Explode_Tmp = 1 To 60
            boomy(1)=boomy(1)-1
            boomy(2)=boomy(2)+1
            boomx(3)=boomx(3)-1
            boomx(4)=boomx(4)+1
            boomx(5)=boomx(5)-1:boomy(5)=boomy(5)-1
            boomx(6)=boomx(6)+1:boomy(6)=boomy(6)-1
            boomx(7)=boomx(7)-1:boomy(7)=boomy(7)+1
            boomx(8)=boomx(8)+1:boomy(8)=boomy(8)+1

            For CPU_X=1 To 8
                If (boomx(CPU_X)< GLCD_WIDTH ) AND (boomy(CPU_X)< GLCD_HEIGHT ) Then
                    Pset (boomx(CPU_X),boomy(CPU_X),Pixel_Status)
                End If
            Next CPU_X
            Wait 10 ms
        Next Explode_Tmp
        Pixel_Status=0
        Box ( 0, 0, GLCD_WIDTH-1, GLCD_HEIGHT-1, GLCDForeground )
        FilledBox ( 1, 1, GLCD_WIDTH-2, GLCD_HEIGHT-2, GLCDBackground )

    End Repeat
End Sub
