'''A program  for GCGB and GCB.
'''--------------------------------------------------------------------------------------------------------------------------------
'''This program examines the GLCD devices and shows the registers on a serial port/terminal, and, or can determine the type of glcd controller.
'''
'''This is a standalone program with no supporting libraries.
'''
'''This is an SPI for the GLCD controller and supports the mcufriend.com connection options, see below.
'''
'''The program has two options, all controlled by constants.
'''   1. Display of all 256 registers
'''   2. Examine the registers to determine controller type.
'''
'''Refer to the datasheet of the specific device is the controller type is not recognised.
'''
'''@author     Evan Venn
'''@licence    GPL
'''@version    1.00
'''@date       16/11/17
'''********************************************************************************

#CHIP mega328p, 16
#OPTION Explicit

#INCLUDE <uno_mega328p.h >




'   Scan all 256 registers
#DEFINE fullScan

'   Using some level of intelligence try to determine the type of device.
#DEFINE determineType



'Set up your ports
' Data command line
#DEFINE GLCD_DC       DIGITAL_8
' Chip select line
#DEFINE GLCD_CS       DIGITAL_10
' Reset line
#DEFINE GLCD_RESET    DIGITAL_9
' Data in | MISO    - Not used therefore not really required
#DEFINE GLCD_DI       DIGITAL_12
' Data out | MOSI
#DEFINE GLCD_DO       DIGITAL_11
' Clock Line
#DEFINE GLCD_SCK      DIGITAL_13


'USART settings
#DEFINE USART_BAUD_RATE 9600
#DEFINE USART_TX_BLOCKING
#DEFINE USART_DELAY 10 us

HSerPrintLn ("")
HserPrintLn("Read Registers on GLCD device")
HserPrintLn("controllers with an SPI interface")
HserPrintLn("")


GLCDInit

#IFDEF fullScan
    Dim studyreg As Byte
    For studyreg = 0 To 255
        GLCDreadRegStr(studyreg, 7, "f.k")
    Next
#ENDIF


#IFDEF determineType
    Dim identifier As Word
    Dim devicestr As String
    GLCDInit

    HSerPrintLn ("")
    HSerPrintLN("Examining  :")
    'also sets 'devicestr', a global string variable
    GLCDreadID ( identifier )
    HSerPrint  ("Read       : GLCD Device ID = ")
    HSerPrint "0x"
    HSerPrint Hex( identifier_h )
    HSerPrintLn Hex( identifier )
    Hserprintln("Controller : "+devicestr )
    HSerPrintLn ("Completed  :")

#ENDIF

Sub GLCDInit


    'Pin directions
    Dir GLCD_CS Out
    Dir GLCD_DC Out
    Dir GLCD_RESET Out

    Dir GLCD_DI In
    Dir GLCD_DO Out
    Dir GLCD_SCK Out

    Set GLCD_CS On
    Set GLCD_DC On

    GlcdReset
    Wait 150 ms


End Sub

Sub GLCDreadRegStr( reg As Word, nparams, lnmsg As String )

    Dim val8, regcount As Byte
    regcount = 1
    Dim readdummy As Byte

    Set GLCD_CS Off


    HSerPrint("reg(0x")
    HSerPrint Hex(reg_h)
    HSerPrint Hex(reg)
    HSerPrint(")")

    Repeat nparams
        GLCDSendCommand(0xd9)
        GLCDSendData(0x10+regcount)
        regcount++
        GLCDSendCommand(reg)
        GLCDSPITransfer( readdummy, val8 )
        HSerPrint(" ")
        HSerPrint Hex(val8)
    End Repeat

    HSerSend 9
    HserPrintLn(lnmsg)
    Set GLCD_CS On

End Sub

'function GLCDreadReg16( reg as byte ) as word
'
'    GLCDSendCommand(0xB0) ' Command Access Protect
'    GLCDSendData(0x00)    ' looks wrong
'
'    GLCDSendCommand(reg)
'
'    GLCDreadReg16 = glcdReadData16
'
'End Function
'
'function GLCDreadReg8( reg as byte ) as byte
'
'    GLCDSendCommand(reg)
'
'    GLCDreadReg8 = glcdReadData8
'
'End Function


Sub GlcdReset

    'Reset
    'Reset display
    Wait 50 ms
    Set GLCD_RESET On
    Wait 5 ms
    'Reset sequence (lower line for at least 10 us)
    Set GLCD_RESET Off
    Wait 20 us
    Set GLCD_RESET On
    Wait 150 ms

End Sub

Dim GlcdReadData32 As Long
Function GlcdReadData32 ( In reg ) As Long


    Dim val8, regcount As Byte
    regcount = 1
    Dim readdummy As Byte
    Dim registryElements(5)

    Set GLCD_CS Off

    Repeat 4
        GLCDSendCommand(0xd9)
        GLCDSendData(0x10+regcount)
        GLCDSendCommand(reg)
        GLCDSPITransfer( readdummy, val8 )
        registryElements(regcount) = val8
        regcount++
    End Repeat

    Set GLCD_CS On

    GlcdReadData32 = registryElements(4)
    GlcdReadData32_h = registryElements(3)
    GlcdReadData32_u = registryElements(2)
    GlcdReadData32_e = registryElements(1)


End Function

Sub  GLCDSendCommand( In SPISendByte As Word )

    Set GLCD_DC Off

    Repeat 8

        If SPISendByte.7 = On  Then
            Set GLCD_DO On
        Else
            Set GLCD_DO Off
        End If
        Set GLCD_SCK On
        Rotate SPISendByte Left
        Set GLCD_SCK Off

    End Repeat
    Set GLCD_DC On


End Sub

'''Send a data byte to the HX8347 GLCD
'''@param HX8347SendByte Byte to send
'''@hide
Sub  GLCDSendData( In SPISendByte As Word )

    Set GLCD_DC On

    Repeat 8

        If SPISendByte.7 = On Then
            Set GLCD_DO On
        Else
            Set GLCD_DO Off
        End If
        Set GLCD_SCK On
        Rotate SPISendByte Left
        Set GLCD_SCK Off

    End Repeat

End Sub


Sub HSerPrintLN (In PrintData As String, Optional In comport = 1)
    Dim PrintLen, SysPrintTemp As Byte
    'PrintLen = LEN(PrintData$)
    PrintLen = PrintData(0)

    If PrintLen <> 0 Then
        'Write Data
        For SysPrintTemp = 1 To PrintLen
            HSerSend(PrintData(SysPrintTemp),comport )
            Wait USART_DELAY
        Next
    End If

    HSerSend(13,comport)
    Wait USART_DELAY
    HSerSend(10,comport)
    Wait USART_DELAY

End Sub



Sub  GLCDreadID ( Out DeviceID As Word )

    Dim reg As Byte

    ' copy this section to add more IDs
    reg = 0xd3
    If ( GlcdReadData32 ( reg )  = 0x00934141) Then
        DeviceID = 0x9341
        devicestr =  "@reg("+Hex(reg)+") ILI9341"
        Exit Sub
    End If
    ' end of section

    DeviceID = 0x0000
    devicestr =  "unknown GLCD"

End Sub


Sub  GLCDSPITransfer( In SPISendByte As Byte, Out SPITempOut As Byte )

    SPITempOut = 0
'    set GLCD_CS OFF
    Set GLCD_DC On
    Set GLCD_SCK Off

    Repeat 8

        If SPISendByte.7 = On  Then
            Set GLCD_DO On
        Else
            Set GLCD_DO Off
        End If

        'Device is cpol = 0. Invert SCK if cpol = 1
        Set GLCD_SCK On
        Rotate SPISendByte Left


        Rotate SPITempOut Left
        If GLCD_DI = On Then
            Set SPITempOut.0 On
        Else
            Set SPITempOut.0 Off
        End If

        Set GLCD_SCK Off

    End Repeat

'    set GLCD_CS ON

End Sub
