''' A flying sprite demonstration of the HX8347G GLCD.  Attach the GLCD to the microntroller - see the section on port assignments but this GCLD is typically a shield.
''' Nothing special about the setup.
''' The demonstration uses arrays and table to create the sprite and then GLCD specific methods to control the position of the sprites.
'''
''' Enjoy



#CHIP mega328p, 16
#OPTION Explicit


#INCLUDE <glcd.h>
#INCLUDE <uno_mega328p.h >

#DEFINE GLCD_TYPE GLCD_TYPE_HX8347
#DEFINE GLCD_OLED_FONT

GLCDfntDefaultSize = 2

'Pin mappings for SPI - this GLCD driver supports Hardware SPI and Software SPI
' read command line
#DEFINE GLCD_RD       ANALOG_0
' write command line
#DEFINE GLCD_WR       ANALOG_1
' Command/Data line
#DEFINE GLCD_RS       ANALOG_2
' Chip select line
#DEFINE GLCD_CS       ANALOG_3
' Reset line
#DEFINE GLCD_RST      ANALOG_4



#DEFINE GLCD_DB0       DIGITAL_8
#DEFINE GLCD_DB1       DIGITAL_9
#DEFINE GLCD_DB2       DIGITAL_2
#DEFINE GLCD_DB3       DIGITAL_3
#DEFINE GLCD_DB4       DIGITAL_4
#DEFINE GLCD_DB5       DIGITAL_5
#DEFINE GLCD_DB6       DIGITAL_6
#DEFINE GLCD_DB7       DIGITAL_7


'define the frame_refresh
'1 to 5 is advised
#DEFINE frame_refresh 5
'
'now rename colours to make it easier to set up sprite data
#DEFINE bk HX8347_BLACK
#DEFINE re HX8347_RED
#DEFINE gr HX8347_GREEN
#DEFINE bl HX8347_BLUE
#DEFINE wh HX8347_WHITE
#DEFINE pu HX8347_PURPLE
#DEFINE ye HX8347_YELLOW
#DEFINE cy HX8347_CYAN
#DEFINE dg HX8347_D_GRAY
#DEFINE lg HX8347_L_GRAY
#DEFINE si HX8347_SILVER
#DEFINE ma HX8347_MAROON
#DEFINE ol HX8347_OLIVE
#DEFINE li HX8347_LIME
#DEFINE aq HX8347_AQUA
#DEFINE te HX8347_TEAL
#DEFINE na HX8347_NAVY
#DEFINE fu HX8347_FUCHSIA
'backgroung color
#DEFINE bg bk

GLCDRotate Portrait
GLCDCLS bg
'
'height and width of sprite in pixels
Dim sprite_height,sprite_width As Byte
'dim spritedata as byte;data to make sprite
Dim sprite_x,sprite_y As Word
Dim ptr,spritedata_ptr,pixel As Word
'
'demo vars
Dim temp,frame,frame_count As Byte
Dim dx(8),dy(8) As Word
Dim spy(8),oldspy(8) As Word
Dim spx(8),oldspx(8) As Word
'set up start sprite positions and directions
dx(1)=2:dx(2)=3:dx(3)=65536-4:dx(4)=6
dx(5)=65536-8:dx(6)=65536-8:dx(7)=65536-8:dx(8)=65536-8
dy(1)=65536-5:dy(2)=65536-3:dy(3)=65536-8:dy(4)=3
dy(5)=2:dy(6)=7:dy(7)=2:dy(8)=8
'
spx(1)=30:spx(2)=100:spx(3)=150:spx(4)=50
spx(5)=160:spx(6)=100:spx(7)=80:spx(8)=30
spy(1)=20:spy(2)=20:spy(3)=16:spy(4)=50:spy(5)=60:spy(6)=40
spy(5)=20:spy(6)=30:spy(7)=24:spy(8)=36
sprite_height=16:sprite_width=16
spritedata_ptr=1
frame=0:frame_count=0
'
'demo moving sprite
Do
    For temp=1 To 8
        If spx(temp)> (229-sprite_width) Then
            'check right edge
            dx(temp)= 65536-dx(temp)
        End If
        If spx(temp)<8 Then
            'check left edge
            dx(temp)= 65536-dx(temp)
        End If
        If spy(temp)> (319-sprite_height) Then
            'check bottom edge
            dy(temp)= 65536-dy(temp)
        End If
        If spy(temp)<8 Then
            'check top edge
            dy(temp)= 65536-dy(temp)
        End If
        '
        'get last position for erase
        oldspx(temp)=spx(temp):oldspy(temp)=spy(temp)
        'get new position for draw
        spx(temp)=spx(temp)+dx(temp):spy(temp)=spy(temp)+dy(temp)
        '
        If frame=0 Then
            'which sprite to draw
            'erase sprite at last position
            erase_sprite (oldspx(temp),oldspy(temp))
            ' 1 ;pointer to sprite 1 in table
            'draw sprite1 at new position
            sprite (spx(temp),spy(temp), 1 )
        Else
            'erase sprite at last position
            erase_sprite (oldspx(temp),oldspy(temp))
            ' 257 ;pointer to sprite 2 in table
            'draw sprite2 at new position
            sprite (spx(temp),spy(temp), 257)
        End If
        '
    Next temp
    'when to change spritedata_ptr
    frame_count++
    If frame_count=frame_refresh Then
        frame=!frame
        frame_count=0
    End If
    'wait 5 s
    'end demo
Loop
'

'fills box with sprite data
Sub sprite ( In sprite_x, In sprite_y, In spritedata_ptr )
    SetAddressWindow_HX8347 ( sprite_x,sprite_y,sprite_x +15,sprite_y +15 )
    For ptr=spritedata_ptr To spritedata_ptr+255
        ReadTable spritedata,ptr,pixel
        SendData_HX8347 pixel
    Next ptr
End Sub
'
'write a box of 0's
Sub erase_sprite (sprite_x,sprite_y)
    SetAddressWindow_HX8347 ( sprite_x,sprite_y,sprite_x +15,sprite_y +15 )
    Repeat 256
        SendData_HX8347 bg
    End Repeat
End Sub
'
'sprite 1
Table spritedata
    wh,bl,bl,bl,bl,bg,bg,bg,bg,bg,bg,bl,bl,bl,bl,wh
    bg,bl,re,re,re,bl,bl,bg,bg,bl,bl,re,re,re,bl,bg
    bg,bg,bl,re,re,re,bl,bg,bg,bl,re,re,re,bl,bg,bg
    bg,bg,bg,bl,re,wh,bl,bg,bg,bl,wh,re,bl,bg,bg,bg
    bg,bg,bg,bg,bl,wh,bl,bg,bg,bl,wh,bl,bg,bg,bg,bg
    bg,bg,bg,bg,bg,bl,bl,bg,bg,bl,bl,bg,bg,bg,bg,bg
    bg,bg,bg,bg,bg,bg,bg,bg,bg,bg,bg,bg,bg,bg,bg,bg
    bg,bg,bg,bg,ye,ye,ye,bg,bg,ye,ye,ye,bg,bg,bg,bg
    bg,bg,bg,ye,bg,bg,bg,bg,bg,bg,bg,bg,ye,bg,bg,bg
    bg,ye,ye,bg,bg,bg,bg,bg,bg,bg,bg,bg,bg,ye,ye,bg
    bg,ye,bg,bg,bg,bg,bg,bg,bg,bg,bg,bg,bg,bg,ye,bg
    ye,bg,bg,bg,bg,bg,bg,bg,bg,bg,bg,bg,bg,bg,bl,ye
    ye,bg,bg,bg,bg,bg,bg,bg,bg,bg,bg,bg,bg,bg,bg,ye
    ye,bg,bg,bg,bg,bg,bg,bg,bg,bg,bg,bg,bg,bg,bg,ye
    bg,ye,bg,bg,bg,bg,bg,bg,bg,bg,bg,bg,bg,bg,ye,bg
    bg,bg,ye,bg,bg,bg,bg,bg,bg,bg,bg,bg,bg,ye,bg,bg
    '
    'sprite 2
    bl,bl,bl,bl,bl,bg,bg,bg,bg,bg,bg,bl,bl,bl,bl,bl
    bg,bl,re,re,re,bl,bl,bg,bg,bl,bl,re,re,re,bl,bg
    bg,bg,bl,wh,wh,re,bl,bg,bg,bl,re,wh,wh,bl,bg,bg
    bg,bg,bg,bl,re,wh,bl,bg,bg,bl,wh,re,bl,bg,bg,bg
    bg,bg,bg,bg,bl,wh,bl,bg,bg,bl,wh,bl,bg,bg,bg,bg
    bg,bg,bg,bg,bg,bl,bl,bg,bg,bl,bl,bg,bg,bg,bg,bg
    bg,bg,bg,bg,bg,bg,bg,ye,ye,bg,bg,bg,bg,bg,bg,bg
    bg,bg,bg,bg,bg,ye,ye,bg,bg,ye,ye,bg,bg,bg,bg,bg
    bg,bg,bg,bg,ye,ye,bg,bg,bg,bg,ye,ye,bg,bg,bg,bg
    bg,bg,bg,bg,ye,bg,bg,bg,bg,bg,bg,ye,bg,bg,bg,bg
    bg,bg,bg,ye,bg,bg,bg,bg,bg,bg,bg,bg,ye,bg,bg,bg
    bg,bg,ye,bg,bg,bg,bg,bg,bg,bg,bg,bg,bg,ye,bg,bg
    bg,bg,bg,ye,ye,bg,bg,bg,bg,bg,bg,ye,ye,bg,bg,bg
    bg,bg,bg,bg,ye,ye,bg,bg,bg,bg,ye,ye,bg,bg,bg,bg
    bg,bg,bg,bg,bg,ye,bg,bg,bg,bg,ye,bg,bg,bg,bg,bg
    bg,bg,bg,bg,bg,bg,ye,bg,bg,ye,bg,bg,bg,bg,bg,bg
End Table
