'''A demonstration program for GCGB and GCB.
'''--------------------------------------------------------------------------------------------------------------------------------
'''This program is a simple GLCD demonstration of the '''A demonstration program for GCGB and GCB.
'''--------------------------------------------------------------------------------------------------------------------------------
'''This program is a simple GLCD demonstration of the SSD1306 GLCD capabilities.
'''This program draws lines, boxes, circles and prints strings and numbers.
'''The SSD1306 controller a small graphical OLED, suitable for a lot of various projects.
'''The display is 38*17 mm, with an active display surface of 0.96inches , and a 128*32 pixel resolution.
'''The display is easy to interface, using an I2C type of communication.
'''The GLCD is connected to the microprocessor as shown in the hardware section of this code.
'''
'''This example show how to integrate a timer to control the display update.
'''
'''@author  EvanV
'''@licence GPL
'''@version 1.5
'''@date    25.3.17
'''********************************************************************************

' ----- Configuration
#CHIP mega328p, 16

#OPTION Explicit

#INCLUDE <glcd.h>

' ----- Define Hardware settings
' Define I2C settings
#DEFINE hi2c_BAUD_RATE 400
#DEFINE hi2c_DATA


' ----- Define GLCD Hardware settings
#DEFINE GLCD_TYPE GLCD_TYPE_SSD1306_32
#DEFINE GLCD_I2C_Address 0x78
' ----- Define variables

Dim BYTENUMBER, CCOUNT, TogglePixels As Byte

CCount = 0
Dim longNumber As Long
' max value = 4294967290
longNumber = 123456
Dim wordNumber As Word
Dim outstring As String
wordNumber = 0
byteNumber = 0

'Call the initialisation routine
InitLEDControl

' ----- Main program
GLCDfntDefaultSize = 2
GLCDPrint 0, 0,   "Great Cow"
GLCDPrint 0, 15,  "  BASIC"

Wait 3 s
GLCDCLS

GLCDfntDefaultSize = 1
GLCDPrint (0, 0, "Anobium 2019")
GLCDPrint (0, 9, "Timed pixel demo")
GLCDPrint (76, 18, GLCD_WIDTH )
GLCDPrint (96, 18, "*" )
GLCDPrint (104, 18, GLCD_HEIGHT )



Wait 3 s
GLCDCLS

' Prepare the static components of the screen
' Print some text
GLCDPrint ( 0,   0, "PrintStr")
' Print some more text
GLCDPrint ( 64,  0, "@")
' Print chip speed
GLCDPrint ( 72,  0, ChipMHz)
' Print some text
GLCDPrint ( 86, 0, "Mhz")
' Draw some text
GLCDDrawString( 0,8,"DrawStr")
' Draw a box
Box 0,0,GLCD_WIDTH-1, GLCD_HEIGHT-1
' Draw a box
Box GLCD_WIDTH-5, GLCD_HEIGHT-5,GLCD_WIDTH-1, GLCD_HEIGHT-1
' Draw a circle
Circle( 44,24,5)
' Draw a line
Line 0,GLCD_HEIGHT-1,44,19
' Draw a line
Line 0,19,44,19


Do Forever

    For CCount = 32 To 127

        ' Print a HEX string
        GLCDPrint ( 64 ,  36,  Hex(longNumber_E ) )

        FilledBox (80,24,83,27, TogglePixels )
        ' Draw a Box
        Box (3,24,6,27, !TogglePixels )
        ' Draw a character
        GLCDDrawChar(48, 9, CCount )
        ' Prepare a string
        outString = Str( CCount )
        ' Draw a string
        GLCDDrawString(64, 9, Pad(outString,3) )
        longNumber = longNumber + 7

    Next

Loop
End



'Setup routine to create a 1s Interrupt
Sub InitLEDControl

    ' Add the handler for the interrupt
    On Interrupt Timer1Match1 Call TimeOutHandler
    ' Initialise the timer - this is required
    ' Set prescaler and then start the timer
    InitTimer1 Osc, PS_1_1
    ' Start the timer - this is required
    StartTimer 1
    ' Set the OCRnA register to give us the corrent timed Interrupt.
    ' This means there are 255-OCRnA+1 clocks cycles to the next event. Why 1? Becuase the TOP value is 0 not 255.
    'this OCR1A Register is used to manipulate the counter resolution.
    OCR1AH = 0xF4
    'this OCR1A Register is used to manipulate the counter resolution.
    OCR1AL = 0x23
    TCCR1A = 0x80
    TCCR1B = 0x0C

End Sub


Sub TimeOutHandler
    'TogglePixels which is then used as the state of the pixels in the main routine
    TogglePixels = !TogglePixels

End Sub
