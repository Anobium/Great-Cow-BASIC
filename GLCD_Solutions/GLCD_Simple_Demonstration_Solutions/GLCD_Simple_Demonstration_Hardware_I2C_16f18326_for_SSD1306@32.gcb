'''A demonstration program for GCGB and GCB.
'''--------------------------------------------------------------------------------------------------------------------------------
'''This program is a simple GLCD demonstration of the '''A demonstration program for GCGB and GCB.
'''--------------------------------------------------------------------------------------------------------------------------------
'''This program is a simple GLCD demonstration of the SSD1306 GLCD capabilities.
'''This program draws lines, boxes, circles and prints strings and numbers.
'''The SSD1306 controller a small graphical OLED, suitable for a lot of various projects.
'''The display is 38*35 mm, with an active display surface of 0.96inches , and a 128*64 pixel resolution.
'''The display is easy to interface, using an I2C type of communication.
'''The GLCD is connected to the microprocessor as shown in the hardware section of this code.
'''@author  EvanV
'''@licence GPL
'''@version 1.0
'''@date    25.3.17
'''********************************************************************************

' ----- Configuration
#CHIP 16f18326,32
#OPTION Explicit
#CONFIG mclr=On

#INCLUDE <glcd.h>

'Generated by PIC PPS Tool for Great Cow Basic
'PPS Tool version: 0.0.5.4

'
'Template comment at the start of the config file
'
#STARTUP InitPPS, 85

Sub InitPPS

    'Module: MSSP1
    'RC0 > SCL1
    SSP1CLKPPS = 0x0010
    'SCL1 > RC0 (bi-directional)
    RC0PPS = 0x0018
    'RC1 > SDA1
    SSP1DATPPS = 0x0011
    'SDA1 > RC1 (bi-directional)
    RC1PPS = 0x0019

End Sub
'Template comment at the end of the config file


' ----- Define Hardware settings
' Define I2C settings - CHANGE PORTS if required for your specific device.

#DEFINE HI2C_BAUD_RATE 400
#DEFINE HI2C_DATA PORTc.1
#DEFINE HI2C_CLOCK PORTc.0
'I2C pins need to be input for SSP module when used on Microchip PIC device
Dir HI2C_DATA In
Dir HI2C_CLOCK In

' ----- Define GLCD Hardware settings
#DEFINE GLCD_TYPE GLCD_TYPE_SSD1306
#DEFINE GLCD_I2C_Address 0x78

' ----- Define variables

Dim BYTENUMBER, CCOUNT As Byte

CCount = 0
Dim longNumber As Long
' max value = 4294967290
longNumber = 123456
Dim wordNumber As Word
Dim outstring As String
wordNumber = 0
byteNumber = 0

' ----- Main program

GLCDPrint 0, 0,   "Great Cow BASIC"
GLCDPrint (0, 16, "Anobium 2019")
GLCDPrint (0, 32, "Portability Demo")
GLCDPrint (0, 48, ChipNameStr )




Wait 3 s
GLCDCLS

' Prepare the static components of the screen
' Print some text
GLCDPrint ( 0,   0, "PrintStr")
' Print some more text
GLCDPrint ( 64,  0, "@")
' Print chip speed
GLCDPrint ( 72,  0, ChipMHz)
' Print some text
GLCDPrint ( 86, 0, "Mhz")
' Draw some text
GLCDDrawString( 0,8,"DrawStr")
' Draw a box
Box 0,0,GLCD_WIDTH-1, GLCD_HEIGHT-1
' Draw a box
Box GLCD_WIDTH-5, GLCD_HEIGHT-5,GLCD_WIDTH-1, GLCD_HEIGHT-1
' Draw a circle
Circle( 44,41,15)
' Draw a line
Line 64,31,0,31

Do Forever

    For CCount = 32 To 127

        ' Print a HEX string
        GLCDPrint ( 64 ,  36,  Hex(longNumber_E ) )
        ' Print a HEX string
        GLCDPrint ( 76 ,  36,  Hex(longNumber_U ) )
        ' Print a HEX string
        GLCDPrint ( 88 ,  36,  Hex(longNumber_H ) )
        ' Print a HEX string
        GLCDPrint ( 100 ,  36, Hex(longNumber   ) )
        ' Print a HEX string
        GLCDPrint ( 112 ,  36, "h" )


        ' Print a padded string
        GLCDPrint ( 64 ,  44, Pad(Str(wordNumber), 5 ) )
        ' Print a padded string
        GLCDPrint ( 64 ,  52, Pad(Str(byteNumber), 3 ) )


        ' Draw a Box
        Box (46,9,56,19)
        ' Draw a character
        GLCDDrawChar(48, 9, CCount )
        ' Prepare a string
        outString = Str( CCount )
        ' Draw a string
        GLCDDrawString(64, 9, Pad(outString,3) )

        ' Draw a filled box
        FilledBox 3,43,11,51, wordNumber

        ' Draw a filled box
        FilledCircle( 44,41,9, longNumber XOR 1)
        ' Draw a line
        Line 0,63,64,31

        ' Do some simple maths
        longNumber = longNumber + 7 : wordNumber = wordNumber + 3 : byteNumber++
    Next
Loop
End
