'''A demonstration program for GCGB and GCB.
'''--------------------------------------------------------------------------------------------------------------------------------
'''This program is a GLCD demonstration multifunctional capabilities for the NT7108C GLCD controllers.
'''
'''The GLCD is connected to the microprocessor as shown in the hardware section of this code.
'''@author  EvanV
'''@licence GPL
'''@version 1.1
'''@date    24.11.18
'''********************************************************************************

#CHIP 18F45K80,64
#OPTION Explicit

#INCLUDE <glcd.h>
' Specify the GLCD type
#DEFINE GLCD_TYPE GLCD_TYPE_NT7108C
' Flip the GLCD   0 do not flip, 1 flip
#DEFINE GLCDDirection 0
#DEFINE LED_GLCD_HEIGHT GLCD_HEIGHT
'Setup the device
'D12 to actually since CS1, CS2 can be reversed on some devices
#DEFINE GLCD_CS1 PORTC.1
#DEFINE GLCD_CS2 PORTC.0
#DEFINE GLCD_DATA_PORT PORTD
#DEFINE GLCD_RS PORTe.0
#DEFINE GLCD_Enable PORTe.2
#DEFINE GLCD_RW PORTc.3
#DEFINE GLCD_RESET PORTC.2


'USART settings
#DEFINE USART_BAUD_RATE 9600
#DEFINE USART_TX_BLOCKING

HSerPrintStringCRLF "Test"


' 5 normal usage, 5 for 32 mhz!
#DEFINE NT7108CReadDelay   7
' 1 normal usage, 0 works
#DEFINE NT7108CWriteDelay  7
' 1 normal usage, 0 works
#DEFINE NT7108CClockDelay  7
' 0 normal mode
#DEFINE GLCDDirection      0

'     Optionally change the font, by uncommenting the next two lines
'     #define GLCD_OLED_FONT
'     GLCDfntDefaultsize= 1    'this demo with the GLCD_TYPE_NT7108C only supports GLCDfntDefaultsize= 1, as the text is all in the incorrect position

'     change to LED height, this, avoids set the 4 LED signals if your device uses the bottom row to control LEDs
#DEFINE LED_GLCD_HEIGHT GLCD_HEIGHT


Dim BYTENUMBER, CCOUNT As Byte

CCount = 0
Dim longNumber As Long
' max value = 4294967296
longNumber = 4294967290
Dim wordNumber As Word
Dim outString As String
wordNumber = 0
byteNumber = 0


' Print some text
GLCDPrint ( 0,   0, "Great Cow BASIC 2019")
' Print some text
GLCDPrint ( 0,   16, "@Evan R. Venn")
Wait 3 s
GLCDCLS

' Prepare the static components of the screen
' Print some text
GLCDPrint ( 2,   1, "PrintStr")
' Print some more text
GLCDPrint ( 64,  1, "LAT@")
' Print chip speed
GLCDPrint ( 88,  1, ChipMHz)
' Print some text
GLCDPrint ( 100, 1, "Mhz")
' Draw some text
GLCDDrawString( 2,10,"DrawStr")
' Draw a box
Box 0,0,GLCD_WIDTH-1, LED_GLCD_HEIGHT-1
' Draw a box
Box GLCD_WIDTH-5, LED_GLCD_HEIGHT-5,GLCD_WIDTH-1, LED_GLCD_HEIGHT-1
' Draw a circle
Circle( 44,41,15)
' Draw a line
Line LED_GLCD_HEIGHT,31,0,31

Do Forever
    For CCount = 32 To 127
        ' Print a HEX string
        GLCDPrint ( LED_GLCD_HEIGHT ,  36,  Hex(longNumber_E ) )
        ' Print a HEX string
        GLCDPrint ( 76 ,  36,  Hex(longNumber_U ) )
        ' Print a HEX string
        GLCDPrint ( 88 ,  36,  Hex(longNumber_H ) )
        ' Print a HEX string
        GLCDPrint ( 100 ,  36, Hex(longNumber   ) )
        ' Print a HEX string
        GLCDPrint ( 112 ,  36, "h" )


        ' Print a padded string
        GLCDPrint ( LED_GLCD_HEIGHT ,  44, Pad(Str(wordNumber), 5 ) )
        ' Print a padded string
        GLCDPrint ( LED_GLCD_HEIGHT ,  52, Pad(Str(byteNumber), 3 ) )


        ' Draw a Box
        Box (46,9,56,19)
        ' Draw a character
        GLCDDrawChar(48, 10, CCount )
        ' Prepare a string
        outString = Str( CCount )
        ' Draw a string
        GLCDDrawString(LED_GLCD_HEIGHT, 10, Pad(outString,3) )

        ' Draw a filled box
        FilledBox 3,43,11,51, wordNumber

        ' Draw a filled box
        FilledCircle( 44,41,9, longNumber XOR 1)
        ' Draw a line
        Line 0,63,LED_GLCD_HEIGHT,31

        ' Do some simple maths
        longNumber = longNumber + 7 : wordNumber = wordNumber + 3 : byteNumber++
    Next
Loop

End

