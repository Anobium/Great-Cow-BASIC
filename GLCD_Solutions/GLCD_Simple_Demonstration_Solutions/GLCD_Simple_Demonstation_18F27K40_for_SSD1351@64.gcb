'''A demonstration program for GCGB and GCB.
'''--------------------------------------------------------------------------------------------------------------------------------
'''This program is a simple GLCD demonstration of the SSD1351 GLCD capabilities.
'''It is a nice graphical OLED display, suitable for a lot of various projects.
'''This program draws lines, boxes, circles and prints strings and numbers.
'''The GLCD is connected to the microprocessor as shown in the hardware section of this code.
'''
'''@author 	JoeR
'''@licence	GPL
'''@version	1.0
'''@date   	13.10.2019
'''********************************************************************************


#CHIP PIC18F27K40,64
#INCLUDE <glcd.h>

'Generated by PIC PPS Tool for Great Cow Basic
'PPS Tool version: 0.0.5.15
'PinManager data: v1.65.1
'
'Template comment at the start of the config file
'
#STARTUP InitPPS, 85

Sub InitPPS

    'Module: MSSP1
    'SDO1 > RC5
    RC5PPS = 0x0010
    'SDA1 > RC4
    RC4PPS = 0x0010
    'RC4 > SDA1 (bi-directional)
    SSP1DATPPS = 0x0014
    'SCL1 > RC3
    RC3PPS = 0x000F
    'RC3 > SCL1 (bi-directional)
    SSP1CLKPPS = 0x0013
    'RC7 > SS1
    SSP1SSPPS = 0x0017

End Sub
'Template comment at the end of the config file

' ----- Define Hardware settings

#DEFINE GLCD_DC PORTC.6
#DEFINE GLCD_CS PORTC.7
#DEFINE GLCD_RESET PORTC.2
#DEFINE GLCD_DO PORTC.5
#DEFINE GLCD_DI PORTC.4
#DEFINE GLCD_SCK PORTC.3
'Use Hardware SPI, comment out to use software SPI AND remove SPI PPS support
#DEFINE SSD1351_HardwareSPI
'Use optimised SPI performance.  Optimised SPI performance is only available on microcontrollers with SSPADD support for SPI
#DEFINE HWSPIMode MasterSSPADDMode

' ----- Define GLCD Hardware settings
#DEFINE GLCD_TYPE GLCD_TYPE_SSD1351

'GLCD selected OLED font set.
#DEFINE GLCD_OLED_FONT
#DEFINE GLCD_PROTECTOVERRUN
GLCDfntDefaultSize = 1

' supports GLCDBackground as default
GLCDCLS

Dim CCOUNT, BYTENUMBER, OLDFONT, OLDFONT As Byte
CCount = 31
Dim longNumber As Long
' max value = 4294967290
longNumber = 0
Dim AnobiumTableAddres, wordNumber, wordNumber2, binary16 As Word
Dim outstring As String
wordNumber = 0
byteNumber = 0

GLCDPrint( 0, 0, "Great Cow BASIC" )
GLCDPrint( 0, 8, "October 2019" )
GLCDPrint( 0, 16, "SSD1351 GLCD" )
GLCDPrint( 0, 24, "by Joseph Realmuto" )

Wait 5 s
FilledBox 0,0,127,127, SSD1351_YELLOW
a0 = 255
b0 = 255
c0 = 255
Repeat 255
    SetContrast_SSD1351 ( a0, b0, c0 )
    a0 = a0 - 1
    b0 = b0 - 1
    c0 = c0 - 1
    Wait 20 ms
End Repeat

SetContrast_SSD1351 ( 255, 255, 255 )

Repeat 2

    GLCDRotate ( Landscape )
    GLCDCLS SSD1351_BLUE

    GLCDForeground = SSD1351_MAROON
    GLCDPrint ( 2, 2, "GLCDPrint String" )

    GLCDForeground = SSD1351_WHITE
    GLCDPrint ( 2, 12, "GLCDPrint String" )

    GLCDForeground = SSD1351_GREEN
    GLCDPrint ( 2,30, precharge )


    FilledBox 50,40,55,45,SSD1351_RED

    SetScrollParameters_SSD1351(1, 0, 128, 0)
    StartScroll_SSD1351

    Wait 5 s

    StopScroll_SSD1351
    Wait 1 s
    SetScrollParameters_SSD1351(128, 0, 128, 0)
    StartScroll_SSD1351

    Wait 5 s

    StopScroll_SSD1351
    longNumber = 0xFFFFFFFF
    wordNumber = 0xFFFF
    byteNumber = 0xFF

    GLCDRotate ( Portrait )
    GLCDCLS SSD1351_GREEN

    GLCDForeground = SSD1351_MAROON
    GLCDPrint ( 2, 2, bytenumber )


    GLCDForeground = SSD1351_BLACK
    GLCDPrint ( 2, 12, wordNumber )


    GLCDForeground = SSD1351_CYAN
    GLCDPrint ( 2,30, longnumber )

    Wait 2 s

    GLCDRotate ( Portrait_Rev )

    Wait 2 s

End Repeat

GLCDRotate ( Landscape )
GLCDCLS SSD1351_BLUE
GLCDForeground = SSD1351_WHITE
' Prepare the static components of the screen
' Print some text
GLCDPrint ( 2,   2, "SSD1351 Library")
' Print some text
GLCDPrint ( 2,   9, "PrintStr")
' Print some more text
GLCDPrint ( 64,  2, "@")
' Print chip speed
GLCDPrint ( 72,  2, ChipMHz)
' Print some text
GLCDPrint ( 80,  2, "Mhz")
' Draw some text
GLCDDrawString( 2,18,"DrawStr")
' Draw a box
Box 0,0,GLCD_WIDTH-1, GLCD_HEIGHT-1
' Draw a box
Box GLCD_WIDTH-5, GLCD_HEIGHT-5,GLCD_WIDTH-1, GLCD_HEIGHT-1
' Draw a circle
Circle( 32,41,10)
' Draw a line
Line 50,31,0,31
CCount = 0
byteNumber = 0xFF
bit17 = 0

Do Forever
    For CCount = 32 To 127
        outstring = Hex(longNumber_E )
        outstring = outstring+Hex(longNumber_E )
        outstring = outstring+Hex(longNumber_H )
        outstring = outstring+Hex(longNumber )
        outstring = outstring+"h"

        ' Print a HEX string
        GLCDPrint ( 46 ,  36,  Outstring  )
        ' Print a padded string
        GLCDPrint ( 46 ,  44, Pad(Str(wordNumber), 6 ) )
        ' Print a padded string
        GLCDPrint ( 46 ,  52, Pad(Str(byteNumber), 4 ) )


        ' Draw a Box
        Box (46,19,56,28)
        ' Draw a character
        GLCDDrawChar(49, 20, CCount )
        ' Prepare a string
        outString = Str( CCount )
        ' Draw a string
        GLCDDrawString(64, 19, Pad(outString,5) )

        ' Draw a filled box
        FilledBox 3,43,11,51, wordNumber

        ' Draw a filled box
        FilledCircle( 32,41,8, longNumber )
        ' Draw a line
        Line 0,63,50,31

        ' Do some simple maths
        longNumber = longNumber + 7 : wordNumber = wordNumber + 1 : wordNumber2 = wordNumber2 + 1 : byteNumber++

    Next

Loop
End
