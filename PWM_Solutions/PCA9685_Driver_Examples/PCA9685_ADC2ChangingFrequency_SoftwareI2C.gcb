'''A program  for GCGB and GCB.
'''--------------------------------------------------------------------------------------------------------------------------------
'''This program demonstrates the PCA9685. The PCA9685 is an I2C-bus controlled 16-channel LED controller optimized for
'''Red/Green/Blue/Amber (RGBA) color backlighting applications.
'''Each LED output has its own 12-bit resolution (4096 steps) fixed frequency individual PWM controller that operates
'''at a programmable frequency from a typical of 24 Hz to 1526 Hz with a duty cycle that is
'''adjustable from 0 % to 100 % to allow the LED to be set to a specific brightness value.
'''
'''All outputs are set to the same PWM frequency.  The demonstration uses hardware I2C.
'''
'''You must call PCA9685_Initialise to initialise the device.
'''The demonstration sets channels to the frequency that is between 24 and 1526 based on the proportional value of the ADC
'''
'''Uses public methods:
''' PCA9685_Initialise
''' PCA9685_SetChannelDuty(  channel as byte , duty as word )  where duty is 0 to 100%
''' PCA9685_SetFreqency ( frequency_wordvalue ) a value from 24 to 1526
'''
'''The library support up to four PCA9685 devices.  They are enables and controlled via the constants shown below.
'''     You can specify your own addresses for the hex value.  The constant name is the critical component.
'''     #define PCA9685_ADDRESS_1 0x80
'''     #define PCA9685_ADDRESS_2 0x82
'''     #define PCA9685_ADDRESS_3 0x84
'''     #define PCA9685_ADDRESS_4 0x86
'''
'''There are many Arduino guides for this board. These guides DO NOT always discuss the READ address for a specific device.
'''The advice for a device board is:
'''For one board:
'''     Solder links is first extra board solder A0.
'''For two boards:
'''     First board do not solder any links
'''     Second board solder A0.
'''     then, connect both boards and use i2c Discover to find addresses of both boards and use those values.
'''     or you will be on a fools errand.
'''
'''@author     EvanV
'''@licence    GPL
'''@version    1.02
'''@date       28.08.18
'''********************************************************************************

' ----- Configuration
'Chip Settings.
#CHIP 16f18855,32
#INCLUDE <pca9685.h>
#OPTION Explicit


'PPS is defined for Serial and I2C - so, you can use Serial if you wish.  Delete if not required
'Generated by PIC PPS Tool for Great Cow Basic
'PPS Tool version: 0.0.5.2
'PinManager data: 09/02/2017
'
'Template comment at the start of the config file
'
#STARTUP InitPPS, 85

Sub InitPPS
    UNLOCKPPS

    'Module: EUSART
    'TX > RC0
    RC0PPS = 0x0010
    'RC0 > TX (bi-directional)
    TXPPS = 0x0008

    LOCKPPS
End Sub
'Template comment at the end of the config file

#DEFINE LEDD2 PORTA.0
#DEFINE LEDD3 PORTA.1
#DEFINE LEDD4 PORTA.2
#DEFINE LEDD5 PORTA.3
#DEFINE Potentiometer   PORTA.4

Dir     LEDD2 Out
Dir     LEDD3 Out
Dir     LEDD4 Out
Dir     LEDD5 Out
Dir     Potentiometer In


#DEFINE SWITCH_DOWN         0
#DEFINE SWITCH_UP           1

#DEFINE SWITCH      PORTA.5

#DEFINE USART_BAUD_RATE 19200
#DEFINE USART_TX_BLOCKING


'Define I2C settings - CHANGE PORTS as required
#DEFINE I2C_MODE Master
#DEFINE I2C_DATA PORTC.3
#DEFINE I2C_CLOCK PORTC.4
#DEFINE I2C_DISABLE_INTERRUPTS On


'User Program starts here with solution specific constants
'User Program starts here with solution specific constants
'User Program starts here with solution specific constants
'User Program starts here with solution specific constants
'User Program starts here with solution specific constants

#DEFINE PCA9685_ADDRESS_1 0x80

'Set the frequency using the Great Cow BASIC PWM constant
#DEFINE PWM_Freq 38
'  Range is 24-1526
'#define PWM_Freq 1526
'#define PWM_Freq 24


Dim myLocalVariable, myOldLocalVariable As Word
Dim myLoADCValue, myHiADCValue As Word
myLoADCValue = 1023
myHiADCValue = 0

'The call IS required to setup the device
PCA9685_Initialise

PCA9685_SetFreqency ( 38 )


Do Forever
    'Show ADC to Freqency
    myLocalVariable = ReadAD10 ( AN4 )
    'ensure you get the range of your ADC
    If myLocalVariable < myLoADCValue Then myLoADCValue  = myLocalVariable
    If myLocalVariable > myHiADCValue Then myHiADCValue  = myLocalVariable
    myLocalVariable = Scale ( myLocalVariable , myLoADCValue, myHiADCValue, 24, 1526 )
    'If you want to ensure the PCA9685_SetFreqency method does not 'glitch' the PWM signal
    'Only change when required
    If myOldLocalVariable <> myLocalVariable Then
        PCA9685_SetFreqency ( myLocalVariable )
        PCA9685_SetChannelDuty ( PCA9685_ALL_CHANNELS, 50 )
        myOldLocalVariable = myLocalVariable
    End If
    Wait 20 ms
Loop

End


' Each channel has two 12-bit registers associated with it: ON and OFF. The
' PCA9685 has an internal 12-bit register which counts from 0-4095 and then
' overflows. When the ON register matches that counter, the pin asserts. When
' the OFF register matches, the pin de-asserts.

'PCA9685_LED0
'PCA9685_LED1
'PCA9685_LED2
'PCA9685_LED3
'PCA9685_LED4
'PCA9685_LED5
'PCA9685_LED6
'PCA9685_LED7
'PCA9685_LED8
'PCA9685_LED9
'PCA9685_LED10
'PCA9685_LED11
'PCA9685_LED12
'PCA9685_LED13
'PCA9685_LED14
'PCA9685_LED15
'PCA9685_ALL_CHANNELS

' The PRE_SCALE register allows the user to set the PWM frequency. The
' equation for determining this value is
'  PRE_SCALE = ((f_clk)/(4096*f_pwm))-1
' Of course, only positive integers are allowed, and futhermore, a minimum
' value of 3 is enforced on the value in this register.
' f_clk is, by default, 25MHz; external clocks can be applied.

'PCA9685_PRE_SCALE
