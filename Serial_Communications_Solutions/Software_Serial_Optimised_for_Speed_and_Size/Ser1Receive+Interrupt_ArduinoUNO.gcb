'''A demonstration program for GCB
'''---------------------------------------------------------------------------------
'''This program uses the SoftSerial library for serial sending and receiving.
''' SoftSerial uses ASM routines for minimal overhead.
''' This samples uses a pin change interrupt to detect incoming data.
''' Ser1Receive normally stops programm execution until a startbit-impulse is detected;
''' "#define SERx_RXNOWAIT On" abrogates that and shortens the startbit delay.
''' This is necessary to compensate the additional time used for interrupt-handling.
''':
'''@author  Frank Steinberg
'''@licence GPL
'''@version 1.0
'''@date    17.01.2017
'''********************************************************************************

' ----- Configuration
'Arduino UNO
#CHIP mega328P, 16
#OPTION Explicit

' ----- Include library
#INCLUDE <softserial.h>

' ----- Config Serial UART (we use the onboard USB-serial converter):
' baudrate must be defined
#DEFINE SER1_BAUD 256000
' databits optional (default = 8)
#DEFINE SER1_DATABITS 8
' stopbits optional (default = 1)
#DEFINE SER1_STOPBITS 1
' inverted polarity optional (default = Off)
#DEFINE SER1_INVERT Off
' Config UNOs Tx-Pin (PortD.1) for transmitting:
' I/O port (without .bit) must be defined
#DEFINE SER1_TXPORT PORTD
' portbit  must be defined
#DEFINE SER1_TXPIN 1
' Config UNOs Rx-Pin (PortD.0) for receiving:
' I/O port (without .bit) must be defined
#DEFINE SER1_RXPORT PORTD
' portbit  must be defined
#DEFINE SER1_RXPIN 0
' RXNOWAIT disables waiting for stopbit and reduces first delaytime
' to compensate overhead for invoking an interrupt:
' don't wait for stopbit optional (default = Off)
#DEFINE SER1_RXNOWAIT On

' ----- Variables
Dim RecByte As Byte
Dim RxIndicator As Byte

' ----- Config Interrupt
'Rx Pin on Arduino UNO is PCINT16
Set PCMSK2.PCINT16 On
'activate PinChangeInterrupt2
On Interrupt PinChange2 Call ISR_StartReceive

' ----- Main body of program commences here.
'new line in Terminal
Ser1Send 10
Ser1Send 13
Ser1Print "Please send a byte!"

RxIndicator = 0

Do Forever

    'we can do someting else here!

    If RxIndicator Then
        'if an interrupt occured
        'new line in Terminal
        Ser1Send 10
        Ser1Send 13
        Ser1Print "You sent: "
        Ser1Send RecByte
        'reset "flag"
        RxIndicator -= 1
    End If

Loop


Sub ISR_StartReceive

    If SER1_RXPORT.SER1_RXPIN = 1 Then Exit Sub
    'process falling edge only (of startbit)
    'IntOff                'ignore interrupts while receiving
    
    'ignore interrupts while receiving
    cli
    'receive one byte
    RecByte = Ser1Receive
    'indicate new data
    RxIndicator += 1
    'reactivate interrupts
    sei
    'IntOn                 'reactivate interrupts

End Sub
