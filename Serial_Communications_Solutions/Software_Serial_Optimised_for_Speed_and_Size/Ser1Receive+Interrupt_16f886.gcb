'''A demonstration program for GCB
'''---------------------------------------------------------------------------------
'''This program uses the SoftSerial library for serial sending and receiving.
''' SoftSerial uses ASM routines for minimal overhead.
''' This samples uses the Interrupt-On-Change to detect incoming data.
''' Ser1Receive normally stops programm execution until a startbit-impulse is detected;
''' "#define SERx_RXNOWAIT On" abrogates that and shortens the startbit delay.
''' This is necessary to compensate the additional time used for interrupt-handling.
''':
'''@author  Frank Steinberg
'''@licence GPL
'''@version 1.0
'''@date    17.01.2017
'''********************************************************************************

' ----- Configuration
#CHIP 16F886, 16
#OPTION Explicit

' ----- Include library
#INCLUDE <softserial.h>

' ----- Config Serial UART :
' baudrate must be defined
#DEFINE SER1_BAUD 115200
' databits optional (default = 8)
#DEFINE SER1_DATABITS 8
' stopbits optional (default = 1)
#DEFINE SER1_STOPBITS 1
' inverted polarity optional (default = Off)
#DEFINE SER1_INVERT Off
' Config I/O ports for transmitting:
' I/O port (without .bit) must be defined
#DEFINE SER1_TXPORT PORTB
' portbit  must be defined
#DEFINE SER1_TXPIN 1
' Config I/O ports for receiving:
' I/O port (without .bit) must be defined
#DEFINE SER1_RXPORT PORTB
' portbit  must be defined
#DEFINE SER1_RXPIN 0
' RXNOWAIT disables waiting for stopbit and reduces first delaytime
' to compensate overhead for invoking an interrupt:
' don't wait for stopbit optional (default = Off)
#DEFINE SER1_RXNOWAIT On

' ----- Variables
Dim RecByte As Byte
Dim RxIndicator As Byte

' ----- Config Interrupt
On Interrupt PORTBChange Call ISR_StartReceive
' set portbit in INTERRUPT-ON-CHANGE PORTB NEGATIVE EDGE REGISTER
Set IOCB.SER1_RXPIN On

' ----- Main body of program commences here.
'delay to prevent garbage if sending too quick after init
Wait 1 ms
'new line in Terminal
Ser1Send 10
'
Ser1Send 13
Ser1Print "Please send a byte!"

RxIndicator = 0

Do Forever

    'we can do someting else here!

    If RxIndicator Then
        'if an interrupt occured
        'new line in Terminal
        Ser1Send 10
        Ser1Send 13
        Ser1Print "You sent: "
        Ser1Send RecByte
        'reset "flag"
        RxIndicator -= 1
    End If

Loop

Sub ISR_StartReceive

    If SER1_RXPORT.SER1_RXPIN = 1 Then Exit Sub
    'process falling edge only (of startbit)
    'ignore interrupts while receiving
    IntOff
    'get new data
    RecByte = Ser1Receive
    'tell mainprog, that we have new data
    RxIndicator += 1
    're-enable interrupts
    IntOn

End Sub
