'''A demonstration program for GCGB and GCB.
'''--------------------------------------------------------------------------------------------------------------------------------
'''This program searches for I2C devices and display their adresses to the attached PC terminal.
'''This program uses the software implementation of I2C for the Microchip microprocessors.
'''The hardware serial connections are shown in the program.
'''@author  EvanV
'''@licence GPL
'''@version 1.0a
'''@date    14.12.15
'''********************************************************************************

' ----- Configuration
#CHIP 16F690
#OPTION Explicit

'************************** YOU MUST VERIFY THIS ADDRESS!!!!!! *********************

#DEFINE TargetGCBI2CAddress 0x70


' ----- Define Hardware settings
' Define I2C settings - CHANGE PORTS
#DEFINE I2C_MODE Master
#DEFINE I2C_DATA PORTb.4
#DEFINE I2C_CLOCK PORTb.6
#DEFINE I2C_DISABLE_INTERRUPTS On


'width of data bit on SDA
#DEFINE I2C_BIT_DELAY   4 us
'width of clock pulse on SCL
#DEFINE I2C_CLOCK_DELAY 2 us
'interval between clock pulses
#DEFINE I2C_END_DELAY   2 us



' THIS CONFIG OF THE SERIAL PORT WORKS WITH A  MAX232 (or equiv) THEN TO PC
' USART settings - CHANGE PORTS if required
#DEFINE USART_BAUD_RATE 19200
Dir PORTb.7 Out
Dir PORTb.5 In
#DEFINE USART_TX_BLOCKING
#DEFINE USART_DELAY 1 ms

Wait 500 ms

'----- Variables
#DEFINE STRINGSIZE 32

Dim DeviceID, invar, outvar, I2CRetry As Byte
Dim eepromVal1, eepromVal2, eepromVal3 As Byte

outvar = 0

' ----- Main body of program commences here.
' Now assumes Serial Terminal is operational
Dim DeviceID As Byte

#DEFINE LED3 portc.0
#DEFINE LED2 portc.1
#DEFINE LED1 portc.2
#DEFINE LED4 portc.3

Dir LED4 Out
Dir LED3 Out
Dir LED2 Out
Dir LED1 Out



Repeat  4

    I2CRetry = 0
    Do
        'generate a start signal
        I2CStart
        'inidcate a write
        I2CSend(TargetGCBI2CAddress)
        I2CRetry++
    Loop While I2CSendState = 0 AND I2CRetry <> 255
    I2CSend(0x23)
    'this value is incrementing - just to get the demo Slave to figure out a packet has been sent
    I2CSend(0)
    I2CStop
    Wait 100 ms

    I2CRetry = 0
    Do
        'generate a start signal
        I2CStart
        'inidcate a write
        I2CSend(TargetGCBI2CAddress)
        I2CRetry++
    Loop While I2CSendState = 0 AND I2CRetry <> 255
    I2CSend(0x23)
    'this value is incrementing - just to get the demo Slave to figure out a packet has been sent
    I2CSend(15)
    I2CStop
    Wait 500 ms




End Repeat

Do

' Send request for ADC
    I2CRetry = 0
    Do
        'generate a start signal
        I2CStart
        'inidcate a write
        I2CSend(TargetGCBI2CAddress)
        I2CRetry++
    Loop While I2CSendState = 0 AND I2CRetry <> 255
    I2CSend(0x81)
    'this value for the ADC4 port
    I2CSend(0x04)
    I2CStop


    led4 = !led4
    Wait 100 ms

'Get Adc value
    I2CRetry = 0
    Do
        'generate a start signal
        I2CStart
        'inidcate a write
        I2CSend(TargetGCBI2CAddress+1)
        I2CRetry++
    Loop While I2CSendState = 0 AND I2CRetry <> 255
    I2CReceive( invar, nack )
    I2CStop

'Set the local LEDS

    Select Case invar
    Case < 10
        led1 = 0
        led2 = 0
        led3 = 0
        outvar = 0
    Case < 80
        led1 = 1
        led2 = 0
        led3 = 0
        outvar = 1
    Case < 160
        led1 = 0
        led2 = 1
        led3 = 0
        outvar = 2
    Case Else
        led1 = 0
        led2 = 0
        led3 = 1
        outvar = 4
    End Select



'set the remote LEDs to the same value
    I2CRetry = 0
    Do
        'generate a start signal
        I2CStart
        'inidcate a write
        I2CSend(TargetGCBI2CAddress)
        I2CRetry++
    Loop While I2CSendState = 0 AND I2CRetry <> 255
    I2CSend(0x23)
    'this value is incrementing - just to get the demo Slave to figure out a packet has been sent
    I2CSend(outvar)
    I2CStop

Loop

' ----- Support methods.  Subroutines and Functions
