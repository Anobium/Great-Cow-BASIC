'''A demonstration of Great Cow BASIC supporting the WS2812 LED devices.
'''
'''This demonstration contains two operational demonstrations, and ONE method of driving the WS2812 LEDs.
'''
'''    The demo has a speed control using the Pot. This adjusts the timing.
'''
'''     Demos:
'''         1. Chaser - LED chaser
'''         2. Flash All LEDs
'''
'''     Methods of driving the WS2812:
'''         2. Bit Banging a SPI signal, again in terms of timing.
'''
'''
'''     Operation:
'''         By default the Chaser (#1) will be operational when applying power to the microcontroller and the WS2812 LEDs.
'''         Pressing the Switch will change the operational to the Flash All LEDs (#2), pressing the Switch again with return to Chaser operation.
'''
'''     Selecting the method of generating the specialised SPI signal:
'''         Using the bit Banging method used the WS2812BitBangSendData method
'''
'''     Configuration:
'''         WS2812 DIN is connected to PORTC.2.
'''         Pot is connected to PORTA.0
'''         Switch is pulled high and connected to PORTA.3
'''
'''
'''     General commentary:
'''         The Chaser demonstration simply writes to the WS2812 (for the number of LEDs) and indexes through the LEDS enabling the select color on each pass through the sequence.
'''         The Flash ALL LEDS simply writes to all the LEDS the same color.
'''
'''     This demonstration can be further developed - have fun.
'''
'''
'''************************************************************************
'''
'''PIC: 18f14k22
'''Compiler: GCB
'''IDE: GCB@SYN
'''Board: Xpress Evaluation Board
'''
'''@author     EvanV
'''@licence    GPL
'''@version    1.00
'''@date       2.09.2016
'''********************************************************************************
'''
'----- Configuration
'Chip Settings.
#CHIP 18f14k22, 16
#OPTION Explicit
'We need the switch to operate on this demo board
#CONFIG MCLRE_OFF


Setup:

#DEFINE WS2812SendData WS2812BitBangSendData



' ----- Define Hardware settings

'-------------------LATC-----------------
'Bit#:  -7---6---5---4---3---2---1---0---
'------|DIN|-----------------X-----------
'

' ----- Constants

'STANDARD BOARD CONSTANTS
#DEFINE DS2  PORTC.0
#DEFINE DS3  PORTC.1
#DEFINE DS4  PORTC.2
#DEFINE DS5  PORTC.3
Dir    DS2 Out
Dir    DS3 Out
Dir    DS4 Out
Dir    DS5 Out

#DEFINE  Potentiometer      PORTA.0
Dir      Potentiometer In

#DEFINE SWITCH_DOWN         0
#DEFINE SWITCH_UP           1
#DEFINE SWITCH              PORTA.3
Dir     SWITCH              In

'WS2812 SPECIFIC CONSTANTS
#DEFINE DIN PORTC.2
Dir     DIN Out

' ----- Variables

Dim PIXELCOUNT, YLOOP, TIMEOUTOCURRED, SYSINTSTATESAVE0, XLOOP, DSISPLAYSTATE, SWITCHSTATE As Byte


'Number of WS2812 LEDs
PixelCount = 16
'Color to send to LEDs 6 byte  color address
ColorofLED = 0
'Curent LED being address - between 1 and the PixelCount
CurrentAddessedLED = 1
'Current LED sequence pointer. Simply points to the array of colors
CurrentLEDColorSequence = 0
'DSisplayState = 0 or 1.  0 = LEDs addressed is sequence 1-2-3-4 etc OR 1 = ALL on 'not' sequential
DSisplayState = 1
'State of the switch tracker.  Toggle DSisplayState 1 | 0
SwitchState = SWITCH_UP

Dim CurrentAddessedLED, CurrentLEDColorSequence As Byte
Dim ColortoSend, ColorofLED As Long

' ----- Main body of program commences here.

MainCode:

WS2812_Init

' Set of colors stored in an array for simplicity - they can be addressed with a pointer.
' 5 long element in the array = 5 * 4 = 20
Dim colorArray( 20)

' Set the values of the array to the colors.  Five colors are defined. You can add more.....
'RED
SetLongArrayValueHandler ( colorArray, 0, 0x00FF00 )
'yellow
SetLongArrayValueHandler ( colorArray, 1, 0xFFFF00 )
'GREEN
SetLongArrayValueHandler ( colorArray, 2, 0xFF0000 )
'WHITE
SetLongArrayValueHandler ( colorArray, 3, 0xFFFFFF )
'BLACK
SetLongArrayValueHandler ( colorArray, 4, 0x000000 )

Do

    'This gets the long value of color from the array - CurrentLEDColorSequence is a index into the array
    ColorofLED = GetLongArrayValueHandler ( ColorArray, CurrentLEDColorSequence )

    'first loop - as we interate through the first loop to get the tracer display working
    For yloop = 1 To PixelCount

        'Ensure minimum delay has happended as the timing is critical
        'The delay is maintained by the timer0 Interrupt
        Wait While timeoutocurred =  0
        IntOff

        ' second loop - loop sends data to the LEDs
        For xloop = 1 To PixelCount

            'Set the color or set to black
            If xloop = CurrentAddessedLED Then
                ColortoSend = ColorofLED
            Else
                If DSisplayState = 1 Then
                    'black
                    ColortoSend = 0x000000
                Else
                    'This has to reset here... why? As the output function destroys the long value when ROTATING the number.
                    ColortoSend = ColorofLED
                End If
            End If

            'Send the data - either to the CLC or bit banging
            WS2812SendData ( ColortoSend )

        Next

        'Increment the LED being addressed
        CurrentAddessedLED++

        'The minimum delay is 50us. This will SURELY never happen....
        Dim mydelay As Word
        mydelay =  ReadAD10( AN0 )

        If mydelay > 0 Then
            Wait mydelay ms
        Else
            Wait While ReadAD10( AN0 ) = 0
        End If
        If mydelay > 1015 Then
            Do

            Loop While ReadAD10( AN0 ) > 1000
        End If

        If Switch = SWITCH_DOWN AND SwitchState = SWITCH_UP Then
            DSisplayState = !DSisplayState
            SwitchState = SWITCH_DOWN
        End If

        If Switch = SWITCH_UP Then
            SwitchState = SWITCH_UP
        End If

        'Set InterPacketDelay running
        ' Preload Count
        SetTimer(0, period_us)
        timeoutocurred =  0
        IntOn

    Next

    'Reset the addressed LED
    CurrentAddessedLED = 1
    'Resequence LEDs the start of the color sequence
    CurrentLEDColorSequence = ( CurrentLEDColorSequence + 1 ) mod 4

Loop


End

' ----- Support methods.  Subroutines and Functions

'Initialise the LED device, timers etc.
Sub WS2812_Init

    Set DIN Off

    timeoutocurred =  0
    'Period for LED internal processing
    #DEFINE period_us   0x38
    InitTimer0(Osc, PS0_4)
    ' Preload Count
    SetTimer(0, period_us)
    StartTimer 0
    On Interrupt Timer0Overflow Call ISR0

    Set DIN On
    Set DIN Off
    Wait 500 us

End Sub

Sub WS2812BitBangSendData ( In ColortoSend As Long )

    Repeat 24
        If ColortoSend.23 On Then
            'High for to 1 bit
            Set DIN On
        Else
            'High and Low as fast as practical
            Set DIN On
            Set DIN Off
        End If
        Rotate ColortoSend Left
        'Low for the 1 bit
        Set DIN Off
    End Repeat

End Sub

'Returns the long of a color for a specific element
Function GetLongArrayValueHandler ( In AddressArray(),  ElementPointer ) As Long

    ElementPointer = ( ElementPointer * 4 ) + ElementPointer
    GetLongArrayValueHandler = AddressArray(ElementPointer)
    GetLongArrayValueHandler_H = AddressArray(ElementPointer+1)
    GetLongArrayValueHandler_U = AddressArray(ElementPointer+2)
    GetLongArrayValueHandler_E = AddressArray(ElementPointer+3)

End Function

'Sets the array element to a specific long value
Sub SetLongArrayValueHandler ( In AddressArray(), ElementPointer, In ElementValue As Long )

    ElementPointer = ( ElementPointer * 4 ) + ElementPointer
    AddressArray(ElementPointer)   = ElementValue
    AddressArray(ElementPointer+1)  = ElementValue_H
    AddressArray(ElementPointer+2) = ElementValue_U
    AddressArray(ElementPointer+3) = ElementValue_E

End Sub

Sub ISR0

    TMR0IF = 0
    'Set InterPacketDelay running
    ' Preload Count
    SetTimer(0, period_us)
    timeoutocurred =  1

End Sub
